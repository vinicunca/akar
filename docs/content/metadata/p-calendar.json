{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.\n\nRead our [primitive tag](https://akar.vinicunca.dev/core/guides/primitive-tag) guide for more details.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": "any"
  },
  {
    "name": "allowNonContiguousRanges",
    "global": false,
    "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "defaultPlaceholder",
    "global": false,
    "description": "The default placeholder date",
    "tags": [],
    "required": false,
    "type": "DateValue | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "DateValue | DateRange | DateValue[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | DateRange | DateValue[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "4": {
          "kind": "object",
          "type": "DateRange",
          "schema": {
            "start": {
              "name": "start",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "DateValue | undefined",
              "schema": {
                "kind": "enum",
                "type": "DateValue | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "CalendarDate",
                  "2": "CalendarDateTime",
                  "3": "ZonedDateTime"
                }
              }
            },
            "end": {
              "name": "end",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "DateValue | undefined",
              "schema": "DateValue | undefined"
            }
          }
        },
        "5": {
          "kind": "array",
          "type": "DateValue[]",
          "schema": [
            {
              "kind": "enum",
              "type": "DateValue",
              "schema": [
                "CalendarDate",
                "CalendarDateTime",
                "ZonedDateTime"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "Whether or not the calendar is disabled",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disableDaysOutsideCurrentView",
    "global": false,
    "description": "Whether or not to disable days outside the current view.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "fixedDate",
    "global": false,
    "description": "Which part of the range should be fixed",
    "tags": [],
    "required": false,
    "type": "'start' | 'end' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'start' | 'end' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'start'",
        "2": "'end'"
      }
    }
  },
  {
    "name": "fixedWeeks",
    "global": false,
    "description": "Whether or not to always display 6 weeks in the calendar",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "initialFocus",
    "global": false,
    "description": "If true, the calendar will focus the selected day, today, or the first day of the month depending on what is visible when the calendar is mounted",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "isDateDisabled",
    "global": false,
    "description": "A function that returns whether or not a date is disabled",
    "tags": [],
    "required": false,
    "type": "DateMatcher | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateMatcher | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(date: DateValue): boolean",
          "schema": []
        }
      }
    }
  },
  {
    "name": "isDateHighlightable",
    "global": false,
    "description": "A function that returns whether or not a date is hightable",
    "tags": [],
    "required": false,
    "type": "DateMatcher | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateMatcher | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(date: DateValue): boolean",
          "schema": []
        }
      }
    }
  },
  {
    "name": "isDateUnavailable",
    "global": false,
    "description": "A function that returns whether or not a date is unavailable",
    "tags": [],
    "required": false,
    "type": "DateMatcher | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateMatcher | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(date: DateValue): boolean",
          "schema": []
        }
      }
    }
  },
  {
    "name": "maximumDays",
    "global": false,
    "description": "The maximum number of days that can be selected in a range",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    }
  },
  {
    "name": "maxValue",
    "global": false,
    "description": "The maximum date that can be selected",
    "tags": [],
    "required": false,
    "type": "DateValue | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "minValue",
    "global": false,
    "description": "The minimum date that can be selected",
    "tags": [],
    "required": false,
    "type": "DateValue | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "DateValue | DateRange | DateValue[] | null | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | DateRange | DateValue[] | null | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "4": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "5": {
          "kind": "object",
          "type": "DateRange",
          "schema": {
            "start": {
              "name": "start",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "DateValue | undefined",
              "schema": {
                "kind": "enum",
                "type": "DateValue | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "CalendarDate",
                  "2": "CalendarDateTime",
                  "3": "ZonedDateTime"
                }
              }
            },
            "end": {
              "name": "end",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "DateValue | undefined",
              "schema": "DateValue | undefined"
            }
          }
        },
        "6": {
          "kind": "array",
          "type": "DateValue[]",
          "schema": [
            {
              "kind": "enum",
              "type": "DateValue",
              "schema": [
                "CalendarDate",
                "CalendarDateTime",
                "ZonedDateTime"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "monthControls",
    "global": false,
    "description": "Show month controls",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "multiple",
    "global": false,
    "description": "Whether or not multiple dates can be selected",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "nextMonth",
    "global": false,
    "description": "Configure the next month button.\n`{ color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'xs'",
                            "3": "'sm'",
                            "4": "'lg'",
                            "5": "'xl'",
                            "6": "'3xs'",
                            "7": "'2xs'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "nextMonthIcon",
    "global": false,
    "description": "The icon to use for the next month control.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronRight"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "nextPage",
    "global": false,
    "description": "A function that returns the next page of the calendar. It receives the current placeholder as an argument inside the component.",
    "tags": [],
    "required": false,
    "type": "((placeholder: DateValue) => DateValue) | undefined",
    "schema": {
      "kind": "enum",
      "type": "((placeholder: DateValue) => DateValue) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(placeholder: DateValue): DateValue",
          "schema": []
        }
      }
    }
  },
  {
    "name": "nextYear",
    "global": false,
    "description": "Configure the next year button.\n`{ color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'xs'",
                            "3": "'sm'",
                            "4": "'lg'",
                            "5": "'xl'",
                            "6": "'3xs'",
                            "7": "'2xs'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "nextYearIcon",
    "global": false,
    "description": "The icon to use for the next year control.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDoubleRight"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "numberOfMonths",
    "global": false,
    "description": "The number of months to display at once",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    }
  },
  {
    "name": "pagedNavigation",
    "global": false,
    "description": "This property causes the previous and next buttons to navigate by the number of months displayed at once, rather than one month",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "placeholder",
    "global": false,
    "description": "The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view",
    "tags": [],
    "required": false,
    "type": "DateValue | undefined",
    "schema": {
      "kind": "enum",
      "type": "DateValue | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "CalendarDate",
          "schema": {
            "__#22882@#private": {
              "name": "__#22882@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": {
                "kind": "object",
                "type": "Calendar",
                "schema": {
                  "identifier": {
                    "name": "identifier",
                    "global": false,
                    "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                    "tags": [],
                    "required": true,
                    "type": "CalendarIdentifier",
                    "schema": {
                      "kind": "enum",
                      "type": "CalendarIdentifier",
                      "schema": {
                        "0": "'gregory'",
                        "1": "'buddhist'",
                        "2": "'chinese'",
                        "3": "'coptic'",
                        "4": "'dangi'",
                        "5": "'ethioaa'",
                        "6": "'ethiopic'",
                        "7": "'hebrew'",
                        "8": "'indian'",
                        "9": "'islamic'",
                        "10": "'islamic-umalqura'",
                        "11": "'islamic-tbla'",
                        "12": "'islamic-civil'",
                        "13": "'islamic-rgsa'",
                        "14": "'iso8601'",
                        "15": "'japanese'",
                        "16": "'persian'",
                        "17": "'roc'"
                      }
                    }
                  },
                  "fromJulianDay": {
                    "name": "fromJulianDay",
                    "global": false,
                    "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(jd: number) => CalendarDate",
                    "schema": {
                      "kind": "event",
                      "type": "(jd: number): CalendarDate",
                      "schema": {}
                    }
                  },
                  "toJulianDay": {
                    "name": "toJulianDay",
                    "global": false,
                    "description": "Converts a date in this calendar to a Julian day number.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getDaysInMonth": {
                    "name": "getDaysInMonth",
                    "global": false,
                    "description": "Returns the number of days in the month of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getMonthsInYear": {
                    "name": "getMonthsInYear",
                    "global": false,
                    "description": "Returns the number of months in the year of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getYearsInEra": {
                    "name": "getYearsInEra",
                    "global": false,
                    "description": "Returns the number of years in the era of the given date.",
                    "tags": [],
                    "required": true,
                    "type": "(date: AnyCalendarDate) => number",
                    "schema": {
                      "kind": "event",
                      "type": "(date: AnyCalendarDate): number",
                      "schema": {}
                    }
                  },
                  "getEras": {
                    "name": "getEras",
                    "global": false,
                    "description": "Returns a list of era identifiers for the calendar.",
                    "tags": [],
                    "required": true,
                    "type": "() => string[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): string[]"
                    }
                  },
                  "getMinimumMonthInYear": {
                    "name": "getMinimumMonthInYear",
                    "global": false,
                    "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getMinimumDayInMonth": {
                    "name": "getMinimumDayInMonth",
                    "global": false,
                    "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => number) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): number",
                          "schema": []
                        }
                      }
                    }
                  },
                  "getFormattableMonth": {
                    "name": "getFormattableMonth",
                    "global": false,
                    "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                    "tags": [],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): CalendarDate",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isEqual": {
                    "name": "isEqual",
                    "global": false,
                    "description": "Returns whether the given calendar is the same as this calendar.",
                    "tags": [],
                    "required": false,
                    "type": "((calendar: Calendar) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(calendar: Calendar): boolean",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceDate": {
                    "name": "balanceDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "balanceYearMonth": {
                    "name": "balanceYearMonth",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "constrainDate": {
                    "name": "constrainDate",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "isInverseEra": {
                    "name": "isInverseEra",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "private"
                      }
                    ],
                    "required": false,
                    "type": "((date: AnyCalendarDate) => boolean) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(date: AnyCalendarDate): boolean",
                          "schema": []
                        }
                      }
                    }
                  }
                }
              }
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDate"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateDuration) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(duration: DateDuration): CalendarDate",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields): CalendarDate",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: AnyCalendarDate) => number",
              "schema": {
                "kind": "event",
                "type": "(b: AnyCalendarDate): number",
                "schema": {}
              }
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "CalendarDateTime",
          "schema": {
            "__#22884@#private": {
              "name": "__#22884@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(): CalendarDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): CalendarDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object in the given time zone.",
              "tags": [],
              "required": true,
              "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
              "schema": {
                "kind": "event",
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                "schema": {}
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "ZonedDateTime",
          "schema": {
            "__#22885@#private": {
              "name": "__#22885@#private",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "any",
              "schema": "any"
            },
            "calendar": {
              "name": "calendar",
              "global": false,
              "description": "The calendar system associated with this date, e.g. Gregorian.",
              "tags": [],
              "required": true,
              "type": "Calendar",
              "schema": "Calendar"
            },
            "era": {
              "name": "era",
              "global": false,
              "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "year": {
              "name": "year",
              "global": false,
              "description": "The year of this date within the era.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "month": {
              "name": "month",
              "global": false,
              "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "day": {
              "name": "day",
              "global": false,
              "description": "The day number within the month.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "hour": {
              "name": "hour",
              "global": false,
              "description": "The hour in the day, numbered from 0 to 23.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "minute": {
              "name": "minute",
              "global": false,
              "description": "The minute in the hour.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "second": {
              "name": "second",
              "global": false,
              "description": "The second in the minute.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "millisecond": {
              "name": "millisecond",
              "global": false,
              "description": "The millisecond in the second.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "timeZone": {
              "name": "timeZone",
              "global": false,
              "description": "The IANA time zone identifier that this date and time is represented in.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "offset": {
              "name": "offset",
              "global": false,
              "description": "The UTC offset for this time, in milliseconds.",
              "tags": [],
              "required": true,
              "type": "number",
              "schema": "number"
            },
            "copy": {
              "name": "copy",
              "global": false,
              "description": "Returns a copy of this date.",
              "tags": [],
              "required": true,
              "type": "() => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(): ZonedDateTime"
              }
            },
            "add": {
              "name": "add",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "subtract": {
              "name": "subtract",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
              "tags": [],
              "required": true,
              "type": "(duration: DateTimeDuration) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(duration: DateTimeDuration): ZonedDateTime",
                "schema": {}
              }
            },
            "set": {
              "name": "set",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
              "tags": [],
              "required": true,
              "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "cycle": {
              "name": "cycle",
              "global": false,
              "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
              "tags": [],
              "required": true,
              "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
              "schema": {
                "kind": "event",
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                "schema": {}
              }
            },
            "toDate": {
              "name": "toDate",
              "global": false,
              "description": "Converts the date to a native JavaScript Date object.",
              "tags": [],
              "required": true,
              "type": "() => Date",
              "schema": {
                "kind": "event",
                "type": "(): Date"
              }
            },
            "toString": {
              "name": "toString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "toAbsoluteString": {
              "name": "toAbsoluteString",
              "global": false,
              "description": "Converts the date to an ISO 8601 formatted string in UTC.",
              "tags": [],
              "required": true,
              "type": "() => string",
              "schema": {
                "kind": "event",
                "type": "(): string"
              }
            },
            "compare": {
              "name": "compare",
              "global": false,
              "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
              "tags": [],
              "required": true,
              "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
              "schema": {
                "kind": "event",
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "preventDeselect",
    "global": false,
    "description": "Whether or not to prevent the user from deselecting a date without selecting another date first",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "prevMonth",
    "global": false,
    "description": "Configure the prev month button.\n`{ color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'xs'",
                            "3": "'sm'",
                            "4": "'lg'",
                            "5": "'xl'",
                            "6": "'3xs'",
                            "7": "'2xs'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "prevMonthIcon",
    "global": false,
    "description": "The icon to use for the previous month control.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronLeft"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "prevPage",
    "global": false,
    "description": "A function that returns the previous page of the calendar. It receives the current placeholder as an argument inside the component.",
    "tags": [],
    "required": false,
    "type": "((placeholder: DateValue) => DateValue) | undefined",
    "schema": {
      "kind": "enum",
      "type": "((placeholder: DateValue) => DateValue) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(placeholder: DateValue): DateValue",
          "schema": []
        }
      }
    }
  },
  {
    "name": "prevYear",
    "global": false,
    "description": "Configure the prev year button.\n`{ color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'xs'",
                            "3": "'sm'",
                            "4": "'lg'",
                            "5": "'xl'",
                            "6": "'3xs'",
                            "7": "'2xs'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "prevYearIcon",
    "global": false,
    "description": "The icon to use for the previous year control.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDoubleLeft"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "range",
    "global": false,
    "description": "Whether or not a range of dates can be selected",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "readonly",
    "global": false,
    "description": "Whether or not the calendar is readonly",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "weekdayFormat",
    "global": false,
    "description": "The format to use for the weekday strings provided via the weekdays slot prop",
    "tags": [],
    "required": false,
    "type": "WeekDayFormat | undefined",
    "schema": {
      "kind": "enum",
      "type": "WeekDayFormat | undefined",
      "schema": {
        "0": "undefined",
        "1": "'long'",
        "2": "'narrow'",
        "3": "'short'"
      }
    }
  },
  {
    "name": "weekStartsOn",
    "global": false,
    "description": "The day of the week to start the calendar on",
    "tags": [],
    "required": false,
    "type": "0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined",
    "schema": {
      "kind": "enum",
      "type": "0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined",
      "schema": {
        "0": "undefined",
        "1": "0",
        "2": "1",
        "3": "2",
        "4": "3",
        "5": "4",
        "6": "5",
        "7": "6"
      }
    }
  },
  {
    "name": "yearControls",
    "global": false,
    "description": "Show year controls",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; header?: ClassValue; body?: ClassValue; heading?: ClassValue; grid?: ClassValue; gridRow?: ClassValue; gridWeekDaysRow?: ClassValue; gridBody?: ClassValue; headCell?: ClassValue; cell?: ClassValue; cellTrigger?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; header?: ClassValue; body?: ClassValue; heading?: ClassValue; grid?: ClassValue; gridRow?: ClassValue; gridWeekDaysRow?: ClassValue; gridBody?: ClassValue; headCell?: ClassValue; cell?: ClassValue; cellTrigger?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; header?: ClassValue; body?: ClassValue; heading?: ClassValue; grid?: ClassValue; gridRow?: ClassValue; gridWeekDaysRow?: ClassValue; gridBody?: ClassValue; headCell?: ClassValue; cell?: ClassValue; cellTrigger?: ClassValue; }"
      }
    }
  }
],
  "slots": [
  {
    "name": "heading",
    "type": "{ value: string; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ value: string; }",
      "schema": {
        "value": {
          "name": "value",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "string",
          "schema": "string"
        }
      }
    }
  },
  {
    "name": "day",
    "type": "Pick<ACalendarCellTriggerProps, 'day'>",
    "description": "",
    "schema": "Pick<ACalendarCellTriggerProps, 'day'>"
  },
  {
    "name": "week-day",
    "type": "{ day: string; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ day: string; }",
      "schema": {
        "day": {
          "name": "day",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "string",
          "schema": "string"
        }
      }
    }
  }
],
  "events": [
  {
    "name": "update:modelValue",
    "description": "",
    "tags": [],
    "type": "[date: DateValue | DateRange | DateValue[] | null | undefined]",
    "signature": "(evt: 'update:modelValue', date: DateValue | DateRange | DateValue[] | null | undefined): void",
    "schema": [
      {
        "kind": "enum",
        "type": "DateValue | DateRange | DateValue[] | null | undefined",
        "schema": [
          "undefined",
          "null",
          {
            "kind": "object",
            "type": "CalendarDate",
            "schema": {
              "__#22882@#private": {
                "name": "__#22882@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": {
                  "kind": "object",
                  "type": "Calendar",
                  "schema": {
                    "identifier": {
                      "name": "identifier",
                      "global": false,
                      "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                      "tags": [],
                      "required": true,
                      "type": "CalendarIdentifier",
                      "schema": {
                        "kind": "enum",
                        "type": "CalendarIdentifier",
                        "schema": {
                          "0": "'gregory'",
                          "1": "'buddhist'",
                          "2": "'chinese'",
                          "3": "'coptic'",
                          "4": "'dangi'",
                          "5": "'ethioaa'",
                          "6": "'ethiopic'",
                          "7": "'hebrew'",
                          "8": "'indian'",
                          "9": "'islamic'",
                          "10": "'islamic-umalqura'",
                          "11": "'islamic-tbla'",
                          "12": "'islamic-civil'",
                          "13": "'islamic-rgsa'",
                          "14": "'iso8601'",
                          "15": "'japanese'",
                          "16": "'persian'",
                          "17": "'roc'"
                        }
                      }
                    },
                    "fromJulianDay": {
                      "name": "fromJulianDay",
                      "global": false,
                      "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                      "tags": [],
                      "required": true,
                      "type": "(jd: number) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(jd: number): CalendarDate",
                        "schema": {}
                      }
                    },
                    "toJulianDay": {
                      "name": "toJulianDay",
                      "global": false,
                      "description": "Converts a date in this calendar to a Julian day number.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getDaysInMonth": {
                      "name": "getDaysInMonth",
                      "global": false,
                      "description": "Returns the number of days in the month of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getMonthsInYear": {
                      "name": "getMonthsInYear",
                      "global": false,
                      "description": "Returns the number of months in the year of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getYearsInEra": {
                      "name": "getYearsInEra",
                      "global": false,
                      "description": "Returns the number of years in the era of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getEras": {
                      "name": "getEras",
                      "global": false,
                      "description": "Returns a list of era identifiers for the calendar.",
                      "tags": [],
                      "required": true,
                      "type": "() => string[]",
                      "schema": {
                        "kind": "event",
                        "type": "(): string[]"
                      }
                    },
                    "getMinimumMonthInYear": {
                      "name": "getMinimumMonthInYear",
                      "global": false,
                      "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => number) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): number",
                            "schema": []
                          }
                        }
                      }
                    },
                    "getMinimumDayInMonth": {
                      "name": "getMinimumDayInMonth",
                      "global": false,
                      "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => number) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): number",
                            "schema": []
                          }
                        }
                      }
                    },
                    "getFormattableMonth": {
                      "name": "getFormattableMonth",
                      "global": false,
                      "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): CalendarDate",
                            "schema": []
                          }
                        }
                      }
                    },
                    "isEqual": {
                      "name": "isEqual",
                      "global": false,
                      "description": "Returns whether the given calendar is the same as this calendar.",
                      "tags": [],
                      "required": false,
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((calendar: Calendar) => boolean) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(calendar: Calendar): boolean",
                            "schema": []
                          }
                        }
                      }
                    },
                    "balanceDate": {
                      "name": "balanceDate",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "balanceYearMonth": {
                      "name": "balanceYearMonth",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "constrainDate": {
                      "name": "constrainDate",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "isInverseEra": {
                      "name": "isInverseEra",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => boolean) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): boolean",
                            "schema": []
                          }
                        }
                      }
                    }
                  }
                }
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(): CalendarDate"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateDuration) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateDuration): CalendarDate",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateDuration) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateDuration): CalendarDate",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields): CalendarDate",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
                "tags": [],
                "required": true,
                "type": "(timeZone: string) => Date",
                "schema": {
                  "kind": "event",
                  "type": "(timeZone: string): Date",
                  "schema": {}
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: AnyCalendarDate) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: AnyCalendarDate): number",
                  "schema": {}
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "CalendarDateTime",
            "schema": {
              "__#22884@#private": {
                "name": "__#22884@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": "Calendar"
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "hour": {
                "name": "hour",
                "global": false,
                "description": "The hour in the day, numbered from 0 to 23.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "minute": {
                "name": "minute",
                "global": false,
                "description": "The minute in the hour.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "second": {
                "name": "second",
                "global": false,
                "description": "The second in the minute.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "millisecond": {
                "name": "millisecond",
                "global": false,
                "description": "The millisecond in the second.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(): CalendarDateTime"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): CalendarDateTime",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): CalendarDateTime",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object in the given time zone.",
                "tags": [],
                "required": true,
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
                "schema": {
                  "kind": "event",
                  "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                  "schema": {}
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                  "schema": {}
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "ZonedDateTime",
            "schema": {
              "__#22885@#private": {
                "name": "__#22885@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": "Calendar"
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "hour": {
                "name": "hour",
                "global": false,
                "description": "The hour in the day, numbered from 0 to 23.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "minute": {
                "name": "minute",
                "global": false,
                "description": "The minute in the hour.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "second": {
                "name": "second",
                "global": false,
                "description": "The second in the minute.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "millisecond": {
                "name": "millisecond",
                "global": false,
                "description": "The millisecond in the second.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "timeZone": {
                "name": "timeZone",
                "global": false,
                "description": "The IANA time zone identifier that this date and time is represented in.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "offset": {
                "name": "offset",
                "global": false,
                "description": "The UTC offset for this time, in milliseconds.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(): ZonedDateTime"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): ZonedDateTime",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): ZonedDateTime",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object.",
                "tags": [],
                "required": true,
                "type": "() => Date",
                "schema": {
                  "kind": "event",
                  "type": "(): Date"
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "toAbsoluteString": {
                "name": "toAbsoluteString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string in UTC.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                  "schema": {}
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "DateRange",
            "schema": {
              "start": {
                "name": "start",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "DateValue | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "DateValue | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "CalendarDate",
                    "2": "CalendarDateTime",
                    "3": "ZonedDateTime"
                  }
                }
              },
              "end": {
                "name": "end",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "DateValue | undefined",
                "schema": "DateValue | undefined"
              }
            }
          },
          {
            "kind": "array",
            "type": "DateValue[]",
            "schema": [
              {
                "kind": "enum",
                "type": "DateValue",
                "schema": [
                  "CalendarDate",
                  "CalendarDateTime",
                  "ZonedDateTime"
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "update:placeholder",
    "description": "",
    "tags": [],
    "type": "[date: DateValue] & [date: DateValue]",
    "signature": "(evt: 'update:placeholder', ...args: [date: DateValue] & [date: DateValue]): void",
    "schema": []
  },
  {
    "name": "update:validModelValue",
    "description": "",
    "tags": [],
    "type": "[date: DateRange]",
    "signature": "(evt: 'update:validModelValue', date: DateRange): void",
    "schema": [
      {
        "kind": "object",
        "type": "DateRange",
        "schema": {
          "start": {
            "name": "start",
            "global": false,
            "description": "",
            "tags": [],
            "required": true,
            "type": "DateValue | undefined",
            "schema": {
              "kind": "enum",
              "type": "DateValue | undefined",
              "schema": {
                "0": "undefined",
                "1": {
                  "kind": "object",
                  "type": "CalendarDate",
                  "schema": {
                    "__#22882@#private": {
                      "name": "__#22882@#private",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": true,
                      "type": "any",
                      "schema": "any"
                    },
                    "calendar": {
                      "name": "calendar",
                      "global": false,
                      "description": "The calendar system associated with this date, e.g. Gregorian.",
                      "tags": [],
                      "required": true,
                      "type": "Calendar",
                      "schema": {
                        "kind": "object",
                        "type": "Calendar",
                        "schema": {
                          "identifier": {
                            "name": "identifier",
                            "global": false,
                            "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                            "tags": [],
                            "required": true,
                            "type": "CalendarIdentifier",
                            "schema": {
                              "kind": "enum",
                              "type": "CalendarIdentifier",
                              "schema": {
                                "0": "'gregory'",
                                "1": "'buddhist'",
                                "2": "'chinese'",
                                "3": "'coptic'",
                                "4": "'dangi'",
                                "5": "'ethioaa'",
                                "6": "'ethiopic'",
                                "7": "'hebrew'",
                                "8": "'indian'",
                                "9": "'islamic'",
                                "10": "'islamic-umalqura'",
                                "11": "'islamic-tbla'",
                                "12": "'islamic-civil'",
                                "13": "'islamic-rgsa'",
                                "14": "'iso8601'",
                                "15": "'japanese'",
                                "16": "'persian'",
                                "17": "'roc'"
                              }
                            }
                          },
                          "fromJulianDay": {
                            "name": "fromJulianDay",
                            "global": false,
                            "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                            "tags": [],
                            "required": true,
                            "type": "(jd: number) => CalendarDate",
                            "schema": {
                              "kind": "event",
                              "type": "(jd: number): CalendarDate",
                              "schema": {}
                            }
                          },
                          "toJulianDay": {
                            "name": "toJulianDay",
                            "global": false,
                            "description": "Converts a date in this calendar to a Julian day number.",
                            "tags": [],
                            "required": true,
                            "type": "(date: AnyCalendarDate) => number",
                            "schema": {
                              "kind": "event",
                              "type": "(date: AnyCalendarDate): number",
                              "schema": {}
                            }
                          },
                          "getDaysInMonth": {
                            "name": "getDaysInMonth",
                            "global": false,
                            "description": "Returns the number of days in the month of the given date.",
                            "tags": [],
                            "required": true,
                            "type": "(date: AnyCalendarDate) => number",
                            "schema": {
                              "kind": "event",
                              "type": "(date: AnyCalendarDate): number",
                              "schema": {}
                            }
                          },
                          "getMonthsInYear": {
                            "name": "getMonthsInYear",
                            "global": false,
                            "description": "Returns the number of months in the year of the given date.",
                            "tags": [],
                            "required": true,
                            "type": "(date: AnyCalendarDate) => number",
                            "schema": {
                              "kind": "event",
                              "type": "(date: AnyCalendarDate): number",
                              "schema": {}
                            }
                          },
                          "getYearsInEra": {
                            "name": "getYearsInEra",
                            "global": false,
                            "description": "Returns the number of years in the era of the given date.",
                            "tags": [],
                            "required": true,
                            "type": "(date: AnyCalendarDate) => number",
                            "schema": {
                              "kind": "event",
                              "type": "(date: AnyCalendarDate): number",
                              "schema": {}
                            }
                          },
                          "getEras": {
                            "name": "getEras",
                            "global": false,
                            "description": "Returns a list of era identifiers for the calendar.",
                            "tags": [],
                            "required": true,
                            "type": "() => string[]",
                            "schema": {
                              "kind": "event",
                              "type": "(): string[]"
                            }
                          },
                          "getMinimumMonthInYear": {
                            "name": "getMinimumMonthInYear",
                            "global": false,
                            "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                            "tags": [],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => number) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => number) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): number",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "getMinimumDayInMonth": {
                            "name": "getMinimumDayInMonth",
                            "global": false,
                            "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                            "tags": [],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => number) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => number) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): number",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "getFormattableMonth": {
                            "name": "getFormattableMonth",
                            "global": false,
                            "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                            "tags": [],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): CalendarDate",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "isEqual": {
                            "name": "isEqual",
                            "global": false,
                            "description": "Returns whether the given calendar is the same as this calendar.",
                            "tags": [],
                            "required": false,
                            "type": "((calendar: Calendar) => boolean) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((calendar: Calendar) => boolean) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(calendar: Calendar): boolean",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "balanceDate": {
                            "name": "balanceDate",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "private"
                              }
                            ],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): void",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "balanceYearMonth": {
                            "name": "balanceYearMonth",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "private"
                              }
                            ],
                            "required": false,
                            "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "constrainDate": {
                            "name": "constrainDate",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "private"
                              }
                            ],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): void",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "isInverseEra": {
                            "name": "isInverseEra",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "private"
                              }
                            ],
                            "required": false,
                            "type": "((date: AnyCalendarDate) => boolean) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((date: AnyCalendarDate) => boolean) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(date: AnyCalendarDate): boolean",
                                  "schema": []
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "era": {
                      "name": "era",
                      "global": false,
                      "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                      "tags": [],
                      "required": true,
                      "type": "string",
                      "schema": "string"
                    },
                    "year": {
                      "name": "year",
                      "global": false,
                      "description": "The year of this date within the era.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "month": {
                      "name": "month",
                      "global": false,
                      "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "day": {
                      "name": "day",
                      "global": false,
                      "description": "The day number within the month.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "copy": {
                      "name": "copy",
                      "global": false,
                      "description": "Returns a copy of this date.",
                      "tags": [],
                      "required": true,
                      "type": "() => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(): CalendarDate"
                      }
                    },
                    "add": {
                      "name": "add",
                      "global": false,
                      "description": "Returns a new `CalendarDate` with the given duration added to it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateDuration) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateDuration): CalendarDate",
                        "schema": {}
                      }
                    },
                    "subtract": {
                      "name": "subtract",
                      "global": false,
                      "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateDuration) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateDuration): CalendarDate",
                        "schema": {}
                      }
                    },
                    "set": {
                      "name": "set",
                      "global": false,
                      "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                      "tags": [],
                      "required": true,
                      "type": "(fields: DateFields) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(fields: DateFields): CalendarDate",
                        "schema": {}
                      }
                    },
                    "cycle": {
                      "name": "cycle",
                      "global": false,
                      "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                      "tags": [],
                      "required": true,
                      "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                        "schema": {}
                      }
                    },
                    "toDate": {
                      "name": "toDate",
                      "global": false,
                      "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
                      "tags": [],
                      "required": true,
                      "type": "(timeZone: string) => Date",
                      "schema": {
                        "kind": "event",
                        "type": "(timeZone: string): Date",
                        "schema": {}
                      }
                    },
                    "toString": {
                      "name": "toString",
                      "global": false,
                      "description": "Converts the date to an ISO 8601 formatted string.",
                      "tags": [],
                      "required": true,
                      "type": "() => string",
                      "schema": {
                        "kind": "event",
                        "type": "(): string"
                      }
                    },
                    "compare": {
                      "name": "compare",
                      "global": false,
                      "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                      "tags": [],
                      "required": true,
                      "type": "(b: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(b: AnyCalendarDate): number",
                        "schema": {}
                      }
                    }
                  }
                },
                "2": {
                  "kind": "object",
                  "type": "CalendarDateTime",
                  "schema": {
                    "__#22884@#private": {
                      "name": "__#22884@#private",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": true,
                      "type": "any",
                      "schema": "any"
                    },
                    "calendar": {
                      "name": "calendar",
                      "global": false,
                      "description": "The calendar system associated with this date, e.g. Gregorian.",
                      "tags": [],
                      "required": true,
                      "type": "Calendar",
                      "schema": "Calendar"
                    },
                    "era": {
                      "name": "era",
                      "global": false,
                      "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                      "tags": [],
                      "required": true,
                      "type": "string",
                      "schema": "string"
                    },
                    "year": {
                      "name": "year",
                      "global": false,
                      "description": "The year of this date within the era.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "month": {
                      "name": "month",
                      "global": false,
                      "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "day": {
                      "name": "day",
                      "global": false,
                      "description": "The day number within the month.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "hour": {
                      "name": "hour",
                      "global": false,
                      "description": "The hour in the day, numbered from 0 to 23.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "minute": {
                      "name": "minute",
                      "global": false,
                      "description": "The minute in the hour.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "second": {
                      "name": "second",
                      "global": false,
                      "description": "The second in the minute.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "millisecond": {
                      "name": "millisecond",
                      "global": false,
                      "description": "The millisecond in the second.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "copy": {
                      "name": "copy",
                      "global": false,
                      "description": "Returns a copy of this date.",
                      "tags": [],
                      "required": true,
                      "type": "() => CalendarDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(): CalendarDateTime"
                      }
                    },
                    "add": {
                      "name": "add",
                      "global": false,
                      "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateTimeDuration) => CalendarDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateTimeDuration): CalendarDateTime",
                        "schema": {}
                      }
                    },
                    "subtract": {
                      "name": "subtract",
                      "global": false,
                      "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateTimeDuration) => CalendarDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateTimeDuration): CalendarDateTime",
                        "schema": {}
                      }
                    },
                    "set": {
                      "name": "set",
                      "global": false,
                      "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                      "tags": [],
                      "required": true,
                      "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                        "schema": {}
                      }
                    },
                    "cycle": {
                      "name": "cycle",
                      "global": false,
                      "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                      "tags": [],
                      "required": true,
                      "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                        "schema": {}
                      }
                    },
                    "toDate": {
                      "name": "toDate",
                      "global": false,
                      "description": "Converts the date to a native JavaScript Date object in the given time zone.",
                      "tags": [],
                      "required": true,
                      "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
                      "schema": {
                        "kind": "event",
                        "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                        "schema": {}
                      }
                    },
                    "toString": {
                      "name": "toString",
                      "global": false,
                      "description": "Converts the date to an ISO 8601 formatted string.",
                      "tags": [],
                      "required": true,
                      "type": "() => string",
                      "schema": {
                        "kind": "event",
                        "type": "(): string"
                      }
                    },
                    "compare": {
                      "name": "compare",
                      "global": false,
                      "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                      "tags": [],
                      "required": true,
                      "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                        "schema": {}
                      }
                    }
                  }
                },
                "3": {
                  "kind": "object",
                  "type": "ZonedDateTime",
                  "schema": {
                    "__#22885@#private": {
                      "name": "__#22885@#private",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": true,
                      "type": "any",
                      "schema": "any"
                    },
                    "calendar": {
                      "name": "calendar",
                      "global": false,
                      "description": "The calendar system associated with this date, e.g. Gregorian.",
                      "tags": [],
                      "required": true,
                      "type": "Calendar",
                      "schema": "Calendar"
                    },
                    "era": {
                      "name": "era",
                      "global": false,
                      "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                      "tags": [],
                      "required": true,
                      "type": "string",
                      "schema": "string"
                    },
                    "year": {
                      "name": "year",
                      "global": false,
                      "description": "The year of this date within the era.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "month": {
                      "name": "month",
                      "global": false,
                      "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "day": {
                      "name": "day",
                      "global": false,
                      "description": "The day number within the month.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "hour": {
                      "name": "hour",
                      "global": false,
                      "description": "The hour in the day, numbered from 0 to 23.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "minute": {
                      "name": "minute",
                      "global": false,
                      "description": "The minute in the hour.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "second": {
                      "name": "second",
                      "global": false,
                      "description": "The second in the minute.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "millisecond": {
                      "name": "millisecond",
                      "global": false,
                      "description": "The millisecond in the second.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "timeZone": {
                      "name": "timeZone",
                      "global": false,
                      "description": "The IANA time zone identifier that this date and time is represented in.",
                      "tags": [],
                      "required": true,
                      "type": "string",
                      "schema": "string"
                    },
                    "offset": {
                      "name": "offset",
                      "global": false,
                      "description": "The UTC offset for this time, in milliseconds.",
                      "tags": [],
                      "required": true,
                      "type": "number",
                      "schema": "number"
                    },
                    "copy": {
                      "name": "copy",
                      "global": false,
                      "description": "Returns a copy of this date.",
                      "tags": [],
                      "required": true,
                      "type": "() => ZonedDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(): ZonedDateTime"
                      }
                    },
                    "add": {
                      "name": "add",
                      "global": false,
                      "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateTimeDuration) => ZonedDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateTimeDuration): ZonedDateTime",
                        "schema": {}
                      }
                    },
                    "subtract": {
                      "name": "subtract",
                      "global": false,
                      "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
                      "tags": [],
                      "required": true,
                      "type": "(duration: DateTimeDuration) => ZonedDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(duration: DateTimeDuration): ZonedDateTime",
                        "schema": {}
                      }
                    },
                    "set": {
                      "name": "set",
                      "global": false,
                      "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                      "tags": [],
                      "required": true,
                      "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                        "schema": {}
                      }
                    },
                    "cycle": {
                      "name": "cycle",
                      "global": false,
                      "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                      "tags": [],
                      "required": true,
                      "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
                      "schema": {
                        "kind": "event",
                        "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                        "schema": {}
                      }
                    },
                    "toDate": {
                      "name": "toDate",
                      "global": false,
                      "description": "Converts the date to a native JavaScript Date object.",
                      "tags": [],
                      "required": true,
                      "type": "() => Date",
                      "schema": {
                        "kind": "event",
                        "type": "(): Date"
                      }
                    },
                    "toString": {
                      "name": "toString",
                      "global": false,
                      "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
                      "tags": [],
                      "required": true,
                      "type": "() => string",
                      "schema": {
                        "kind": "event",
                        "type": "(): string"
                      }
                    },
                    "toAbsoluteString": {
                      "name": "toAbsoluteString",
                      "global": false,
                      "description": "Converts the date to an ISO 8601 formatted string in UTC.",
                      "tags": [],
                      "required": true,
                      "type": "() => string",
                      "schema": {
                        "kind": "event",
                        "type": "(): string"
                      }
                    },
                    "compare": {
                      "name": "compare",
                      "global": false,
                      "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                      "tags": [],
                      "required": true,
                      "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                        "schema": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "end": {
            "name": "end",
            "global": false,
            "description": "",
            "tags": [],
            "required": true,
            "type": "DateValue | undefined",
            "schema": "DateValue | undefined"
          }
        }
      }
    ]
  },
  {
    "name": "update:startValue",
    "description": "",
    "tags": [],
    "type": "[date: DateValue | undefined]",
    "signature": "(evt: 'update:startValue', date: DateValue | undefined): void",
    "schema": [
      {
        "kind": "enum",
        "type": "DateValue | undefined",
        "schema": [
          "undefined",
          {
            "kind": "object",
            "type": "CalendarDate",
            "schema": {
              "__#22882@#private": {
                "name": "__#22882@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": {
                  "kind": "object",
                  "type": "Calendar",
                  "schema": {
                    "identifier": {
                      "name": "identifier",
                      "global": false,
                      "description": "A string identifier for the calendar, as defined by Unicode CLDR.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types).",
                      "tags": [],
                      "required": true,
                      "type": "CalendarIdentifier",
                      "schema": {
                        "kind": "enum",
                        "type": "CalendarIdentifier",
                        "schema": {
                          "0": "'gregory'",
                          "1": "'buddhist'",
                          "2": "'chinese'",
                          "3": "'coptic'",
                          "4": "'dangi'",
                          "5": "'ethioaa'",
                          "6": "'ethiopic'",
                          "7": "'hebrew'",
                          "8": "'indian'",
                          "9": "'islamic'",
                          "10": "'islamic-umalqura'",
                          "11": "'islamic-tbla'",
                          "12": "'islamic-civil'",
                          "13": "'islamic-rgsa'",
                          "14": "'iso8601'",
                          "15": "'japanese'",
                          "16": "'persian'",
                          "17": "'roc'"
                        }
                      }
                    },
                    "fromJulianDay": {
                      "name": "fromJulianDay",
                      "global": false,
                      "description": "Creates a CalendarDate in this calendar from the given Julian day number.",
                      "tags": [],
                      "required": true,
                      "type": "(jd: number) => CalendarDate",
                      "schema": {
                        "kind": "event",
                        "type": "(jd: number): CalendarDate",
                        "schema": {}
                      }
                    },
                    "toJulianDay": {
                      "name": "toJulianDay",
                      "global": false,
                      "description": "Converts a date in this calendar to a Julian day number.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getDaysInMonth": {
                      "name": "getDaysInMonth",
                      "global": false,
                      "description": "Returns the number of days in the month of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getMonthsInYear": {
                      "name": "getMonthsInYear",
                      "global": false,
                      "description": "Returns the number of months in the year of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getYearsInEra": {
                      "name": "getYearsInEra",
                      "global": false,
                      "description": "Returns the number of years in the era of the given date.",
                      "tags": [],
                      "required": true,
                      "type": "(date: AnyCalendarDate) => number",
                      "schema": {
                        "kind": "event",
                        "type": "(date: AnyCalendarDate): number",
                        "schema": {}
                      }
                    },
                    "getEras": {
                      "name": "getEras",
                      "global": false,
                      "description": "Returns a list of era identifiers for the calendar.",
                      "tags": [],
                      "required": true,
                      "type": "() => string[]",
                      "schema": {
                        "kind": "event",
                        "type": "(): string[]"
                      }
                    },
                    "getMinimumMonthInYear": {
                      "name": "getMinimumMonthInYear",
                      "global": false,
                      "description": "Returns the minimum month number of the given date's year.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a year.",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => number) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): number",
                            "schema": []
                          }
                        }
                      }
                    },
                    "getMinimumDayInMonth": {
                      "name": "getMinimumDayInMonth",
                      "global": false,
                      "description": "Returns the minimum day number of the given date's month.\nNormally, this is 1, but in some calendars such as the Japanese,\neras may begin in the middle of a month.",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => number) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => number) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): number",
                            "schema": []
                          }
                        }
                      }
                    },
                    "getFormattableMonth": {
                      "name": "getFormattableMonth",
                      "global": false,
                      "description": "Returns a date that is the first day of the month for the given date.\nThis is used to determine the month that the given date falls in, if\nthe calendar has months that do not align with the standard calendar months\n(e.g. fiscal calendars).",
                      "tags": [],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => CalendarDate) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): CalendarDate",
                            "schema": []
                          }
                        }
                      }
                    },
                    "isEqual": {
                      "name": "isEqual",
                      "global": false,
                      "description": "Returns whether the given calendar is the same as this calendar.",
                      "tags": [],
                      "required": false,
                      "type": "((calendar: Calendar) => boolean) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((calendar: Calendar) => boolean) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(calendar: Calendar): boolean",
                            "schema": []
                          }
                        }
                      }
                    },
                    "balanceDate": {
                      "name": "balanceDate",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "balanceYearMonth": {
                      "name": "balanceYearMonth",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate, previousDate: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate, previousDate: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "constrainDate": {
                      "name": "constrainDate",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "isInverseEra": {
                      "name": "isInverseEra",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "private"
                        }
                      ],
                      "required": false,
                      "type": "((date: AnyCalendarDate) => boolean) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((date: AnyCalendarDate) => boolean) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(date: AnyCalendarDate): boolean",
                            "schema": []
                          }
                        }
                      }
                    }
                  }
                }
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(): CalendarDate"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateDuration) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateDuration): CalendarDate",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateDuration) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateDuration): CalendarDate",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields): CalendarDate",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `CalendarDate` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined) => CalendarDate",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields, amount: number, options?: CycleOptions | undefined): CalendarDate",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone.",
                "tags": [],
                "required": true,
                "type": "(timeZone: string) => Date",
                "schema": {
                  "kind": "event",
                  "type": "(timeZone: string): Date",
                  "schema": {}
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: AnyCalendarDate) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: AnyCalendarDate): number",
                  "schema": {}
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "CalendarDateTime",
            "schema": {
              "__#22884@#private": {
                "name": "__#22884@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": "Calendar"
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "hour": {
                "name": "hour",
                "global": false,
                "description": "The hour in the day, numbered from 0 to 23.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "minute": {
                "name": "minute",
                "global": false,
                "description": "The minute in the hour.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "second": {
                "name": "second",
                "global": false,
                "description": "The second in the minute.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "millisecond": {
                "name": "millisecond",
                "global": false,
                "description": "The millisecond in the second.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(): CalendarDateTime"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): CalendarDateTime",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): CalendarDateTime",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields & TimeFields) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields & TimeFields): CalendarDateTime",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => CalendarDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): CalendarDateTime",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object in the given time zone.",
                "tags": [],
                "required": true,
                "type": "(timeZone: string, disambiguation?: Disambiguation | undefined) => Date",
                "schema": {
                  "kind": "event",
                  "type": "(timeZone: string, disambiguation?: Disambiguation | undefined): Date",
                  "schema": {}
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                  "schema": {}
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "ZonedDateTime",
            "schema": {
              "__#22885@#private": {
                "name": "__#22885@#private",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              },
              "calendar": {
                "name": "calendar",
                "global": false,
                "description": "The calendar system associated with this date, e.g. Gregorian.",
                "tags": [],
                "required": true,
                "type": "Calendar",
                "schema": "Calendar"
              },
              "era": {
                "name": "era",
                "global": false,
                "description": "The calendar era for this date, e.g. 'BC' or 'AD'.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "year": {
                "name": "year",
                "global": false,
                "description": "The year of this date within the era.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "month": {
                "name": "month",
                "global": false,
                "description": "The month number within the year. Note that some calendar systems such as Hebrew\nmay have a variable number of months per year. Therefore, month numbers may not\nalways correspond to the same month names in different years.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "day": {
                "name": "day",
                "global": false,
                "description": "The day number within the month.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "hour": {
                "name": "hour",
                "global": false,
                "description": "The hour in the day, numbered from 0 to 23.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "minute": {
                "name": "minute",
                "global": false,
                "description": "The minute in the hour.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "second": {
                "name": "second",
                "global": false,
                "description": "The second in the minute.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "millisecond": {
                "name": "millisecond",
                "global": false,
                "description": "The millisecond in the second.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "timeZone": {
                "name": "timeZone",
                "global": false,
                "description": "The IANA time zone identifier that this date and time is represented in.",
                "tags": [],
                "required": true,
                "type": "string",
                "schema": "string"
              },
              "offset": {
                "name": "offset",
                "global": false,
                "description": "The UTC offset for this time, in milliseconds.",
                "tags": [],
                "required": true,
                "type": "number",
                "schema": "number"
              },
              "copy": {
                "name": "copy",
                "global": false,
                "description": "Returns a copy of this date.",
                "tags": [],
                "required": true,
                "type": "() => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(): ZonedDateTime"
                }
              },
              "add": {
                "name": "add",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given duration added to it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): ZonedDateTime",
                  "schema": {}
                }
              },
              "subtract": {
                "name": "subtract",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given duration subtracted from it.",
                "tags": [],
                "required": true,
                "type": "(duration: DateTimeDuration) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(duration: DateTimeDuration): ZonedDateTime",
                  "schema": {}
                }
              },
              "set": {
                "name": "set",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly.",
                "tags": [],
                "required": true,
                "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(fields: DateFields & TimeFields, disambiguation?: Disambiguation | undefined): ZonedDateTime",
                  "schema": {}
                }
              },
              "cycle": {
                "name": "cycle",
                "global": false,
                "description": "Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\nWhen the resulting value reaches the limits of the field, it wraps around.",
                "tags": [],
                "required": true,
                "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined) => ZonedDateTime",
                "schema": {
                  "kind": "event",
                  "type": "(field: keyof DateFields | keyof TimeFields, amount: number, options?: CycleTimeOptions | undefined): ZonedDateTime",
                  "schema": {}
                }
              },
              "toDate": {
                "name": "toDate",
                "global": false,
                "description": "Converts the date to a native JavaScript Date object.",
                "tags": [],
                "required": true,
                "type": "() => Date",
                "schema": {
                  "kind": "event",
                  "type": "(): Date"
                }
              },
              "toString": {
                "name": "toString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "toAbsoluteString": {
                "name": "toAbsoluteString",
                "global": false,
                "description": "Converts the date to an ISO 8601 formatted string in UTC.",
                "tags": [],
                "required": true,
                "type": "() => string",
                "schema": {
                  "kind": "event",
                  "type": "(): string"
                }
              },
              "compare": {
                "name": "compare",
                "global": false,
                "description": "Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after.",
                "tags": [],
                "required": true,
                "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime) => number",
                "schema": {
                  "kind": "event",
                  "type": "(b: CalendarDate | CalendarDateTime | ZonedDateTime): number",
                  "schema": {}
                }
              }
            }
          }
        ]
      }
    ]
  }
],
  "exposed": []
}
