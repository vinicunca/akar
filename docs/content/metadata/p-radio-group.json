{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "The value of the RadioGroup when initially rendered. Use when you do not need to control the state of the RadioGroup.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "descriptionKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the description.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'description'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'description'"
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with radio items.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "indicator",
    "global": false,
    "description": "Position of the indicator.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'start'"
      }
    ],
    "required": false,
    "type": "'hidden' | 'start' | 'end' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'hidden' | 'start' | 'end' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'hidden'",
        "2": "'start'",
        "3": "'end'"
      }
    }
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "PRadioGroupItem[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "PRadioGroupItem[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PRadioGroupItem[]",
          "schema": [
            {
              "kind": "enum",
              "type": "PRadioGroupItem",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "false",
                "true",
                {
                  "kind": "object",
                  "type": "{ [key: string]: any; label?: string | undefined; description?: string | undefined; disabled?: boolean | undefined; value?: AcceptableValue | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; }, 'label' | 'description' | 'item' | 'wrapper' | 'base' | 'indicator' | 'container'> | undefined; }",
                  "schema": {
                    "label": {
                      "name": "label",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string"
                        }
                      }
                    },
                    "description": {
                      "name": "description",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "disabled": {
                      "name": "disabled",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "boolean | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "false",
                          "2": "true"
                        }
                      }
                    },
                    "value": {
                      "name": "value",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "AcceptableValue | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "AcceptableValue | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "null",
                          "2": "string",
                          "3": "number",
                          "4": "bigint",
                          "5": "false",
                          "6": "true"
                        }
                      }
                    },
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "Pick<{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; }, 'label' | 'description' | 'item' | 'wrapper' | 'base' | 'indicator' | 'container'> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "Pick<{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; }, 'label' | 'description' | 'item' | 'wrapper' | 'base' | 'indicator' | 'container'> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "Pick<{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; }, 'label' | 'description' | 'item' | 'wrapper' | 'base' | 'indicator' | 'container'>"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the label.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "legend",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "loop",
    "global": false,
    "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The controlled value of the RadioGroup. Can be bind as `v-model`.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "name",
    "global": false,
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "orientation",
    "global": false,
    "description": "The orientation the radio buttons are laid out.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'vertical'"
      }
    ],
    "required": false,
    "type": "DataOrientation | undefined",
    "schema": {
      "kind": "enum",
      "type": "DataOrientation | undefined",
      "schema": {
        "0": "undefined",
        "1": "'vertical'",
        "2": "'horizontal'"
      }
    },
    "default": "'vertical'"
  },
  {
    "name": "required",
    "global": false,
    "description": "When `true`, indicates that the user must set the value before the owning form can be submitted.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "valueKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the value.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'value'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<PRadioGroupItem[]> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'value' as never"
  },
  {
    "name": "variant",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'list'"
      }
    ],
    "required": false,
    "type": "'table' | 'list' | 'card' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'table' | 'list' | 'card' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'table'",
        "2": "'list'",
        "3": "'card'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; fieldset?: ClassValue; legend?: ClassValue; item?: ClassValue; container?: ClassValue; base?: ClassValue; indicator?: ClassValue; wrapper?: ClassValue; label?: ClassValue; description?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "change",
    "description": "",
    "type": "[event: Event]"
  },
  {
    "name": "update:modelValue",
    "description": "",
    "type": "[payload: string]"
  }
],
  "slots": [
  {
    "description": "",
    "type": ""
  },
  {
    "description": "",
    "type": ""
  }
]
}
