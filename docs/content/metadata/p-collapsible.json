{
  "props": [
  {
    "name": "closeText",
    "global": false,
    "description": "The text displayed when the collapsible is closed.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "t('prose.collapsible.closeText')"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "icon",
    "global": false,
    "description": "The icon displayed to toggle the collapsible.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDown"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "name",
    "global": false,
    "description": "The name displayed in the trigger label.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "t('prose.collapsible.name')"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "openText",
    "global": false,
    "description": "The text displayed when the collapsible is open.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "t('prose.collapsible.openText')"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; trigger?: ClassValue; triggerIcon?: ClassValue; triggerLabel?: ClassValue; content?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; trigger?: ClassValue; triggerIcon?: ClassValue; triggerLabel?: ClassValue; content?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; trigger?: ClassValue; triggerIcon?: ClassValue; triggerLabel?: ClassValue; content?: ClassValue; }"
      }
    }
  }
],
  "slots": [
  {
    "description": "",
    "type": ""
  },
  {
    "description": "",
    "type": ""
  }
]
}
NormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "defaultOpen",
    "global": false,
    "description": "The open state of the collapsible when it is initially rendered. <br> Use when you do not need to control its open state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with the collapsible.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "open",
    "global": false,
    "description": "The controlled open state of the collapsible. Can be binded with `v-model`.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "unmountOnHide",
    "global": false,
    "description": "When `true`, the element will be unmounted on closed state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; content?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; content?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; content?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "update:open",
    "description": "",
    "type": "[value: boolean]"
  }
],
  "slots": [
  {
    "name": "open",
    "description": "",
    "type": "boolean"
  }
]
}
