{
  "props": [
  {
    "name": "collapsed",
    "global": false,
    "description": "Whether the button is collapsed.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "color",
    "global": false,
    "description": "The color of the button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'neutral'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    },
    "default": "'neutral'"
  },
  {
    "name": "icon",
    "global": false,
    "description": "The icon displayed in the button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.search"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "kbds",
    "global": false,
    "description": "The keyboard keys to display in the button.\n`{ variant: 'subtle' }`{lang='ts-type'}",
    "tags": [
      {
        "name": "defaultValue",
        "text": "['meta', 'k']"
      }
    ],
    "required": false,
    "type": "(string | undefined)[] | PKbdProps[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "(string | undefined)[] | PKbdProps[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "(string | undefined)[]",
          "schema": [
            {
              "kind": "enum",
              "type": "string | undefined",
              "schema": [
                "undefined",
                "string"
              ]
            }
          ]
        },
        "2": {
          "kind": "array",
          "type": "PKbdProps[]",
          "schema": [
            {
              "kind": "object",
              "type": "PKbdProps",
              "schema": {
                "as": {
                  "name": "as",
                  "global": false,
                  "description": "The element or component this component should render as.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'kbd'"
                    }
                  ],
                  "required": false,
                  "type": "APrimitiveAsTag | Component | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "APrimitiveAsTag | Component | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'a'",
                      "2": "'button'",
                      "3": "'div'",
                      "4": "'form'",
                      "5": "'h2'",
                      "6": "'h3'",
                      "7": "'img'",
                      "8": "'input'",
                      "9": "'label'",
                      "10": "'li'",
                      "11": "'nav'",
                      "12": "'ol'",
                      "13": "'p'",
                      "14": "'span'",
                      "15": "'svg'",
                      "16": "'template'",
                      "17": "'ul'",
                      "18": {
                        "kind": "object",
                        "type": "string & {}",
                        "schema": {}
                      },
                      "19": {
                        "kind": "object",
                        "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                        "schema": {
                          "beforeRouteEnter": {
                            "name": "beforeRouteEnter",
                            "global": false,
                            "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuardWithThis<undefined> | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "NavigationGuardWithThis<undefined> | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "beforeRouteUpdate": {
                            "name": "beforeRouteUpdate",
                            "global": false,
                            "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuard | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "NavigationGuard | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "beforeRouteLeave": {
                            "name": "beforeRouteLeave",
                            "global": false,
                            "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuard | undefined",
                            "schema": "NavigationGuard | undefined"
                          },
                          "head": {
                            "name": "head",
                            "global": false,
                            "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                            "tags": [],
                            "required": false,
                            "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                  "schema": []
                                }
                              }
                            }
                          }
                        }
                      },
                      "20": {
                        "kind": "event",
                        "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                        "schema": []
                      },
                      "21": {
                        "kind": "object",
                        "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                        "schema": {}
                      }
                    }
                  }
                },
                "value": {
                  "name": "value",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "color": {
                  "name": "color",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'neutral'"
                    }
                  ],
                  "required": false,
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'error'",
                      "2": "'primary'",
                      "3": "'secondary'",
                      "4": "'success'",
                      "5": "'info'",
                      "6": "'warning'",
                      "7": "'neutral'"
                    }
                  }
                },
                "variant": {
                  "name": "variant",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'outline'"
                    }
                  ],
                  "required": false,
                  "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'solid'",
                      "2": "'outline'",
                      "3": "'soft'",
                      "4": "'subtle'"
                    }
                  }
                },
                "size": {
                  "name": "size",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'md'"
                    }
                  ],
                  "required": false,
                  "type": "'md' | 'sm' | 'lg' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'md' | 'sm' | 'lg' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'md'",
                      "2": "'sm'",
                      "3": "'lg'"
                    }
                  }
                },
                "class": {
                  "name": "class",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "any",
                  "schema": "any"
                }
              }
            }
          ]
        }
      }
    },
    "default": "['meta', 'k']"
  },
  {
    "name": "label",
    "global": false,
    "description": "The label displayed in the button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "t('contentSearchButton.label')"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "tooltip",
    "global": false,
    "description": "Display a tooltip on the button when is collapsed with the button label.\nThis has priority over the global `tooltip` prop.",
    "tags": [],
    "required": false,
    "type": "boolean | PTooltipProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | PTooltipProps | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "object",
          "type": "PTooltipProps",
          "schema": {
            "text": {
              "name": "text",
              "global": false,
              "description": "The text content of the tooltip.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "kbds": {
              "name": "kbds",
              "global": false,
              "description": "The keyboard keys to display in the tooltip.",
              "tags": [],
              "required": false,
              "type": "(string | undefined)[] | PKbdProps[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "array",
                    "type": "(string | undefined)[]",
                    "schema": [
                      "string | undefined"
                    ]
                  },
                  "2": {
                    "kind": "array",
                    "type": "PKbdProps[]",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "PKbdProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'kbd'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'a'",
                                "2": "'button'",
                                "3": "'div'",
                                "4": "'form'",
                                "5": "'h2'",
                                "6": "'h3'",
                                "7": "'img'",
                                "8": "'input'",
                                "9": "'label'",
                                "10": "'li'",
                                "11": "'nav'",
                                "12": "'ol'",
                                "13": "'p'",
                                "14": "'span'",
                                "15": "'svg'",
                                "16": "'template'",
                                "17": "'ul'",
                                "18": {
                                  "kind": "object",
                                  "type": "string & {}",
                                  "schema": {}
                                },
                                "19": {
                                  "kind": "object",
                                  "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                  "schema": {
                                    "beforeRouteEnter": {
                                      "name": "beforeRouteEnter",
                                      "global": false,
                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteUpdate": {
                                      "name": "beforeRouteUpdate",
                                      "global": false,
                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteLeave": {
                                      "name": "beforeRouteLeave",
                                      "global": false,
                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": "NavigationGuard | undefined"
                                    },
                                    "head": {
                                      "name": "head",
                                      "global": false,
                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                      "tags": [],
                                      "required": false,
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "20": {
                                  "kind": "event",
                                  "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                  "schema": []
                                },
                                "21": {
                                  "kind": "object",
                                  "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "value": {
                            "name": "value",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "color": {
                            "name": "color",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'neutral'"
                              }
                            ],
                            "required": false,
                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'error'",
                                "2": "'primary'",
                                "3": "'secondary'",
                                "4": "'success'",
                                "5": "'info'",
                                "6": "'warning'",
                                "7": "'neutral'"
                              }
                            }
                          },
                          "variant": {
                            "name": "variant",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'outline'"
                              }
                            ],
                            "required": false,
                            "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'solid'",
                                "2": "'outline'",
                                "3": "'soft'",
                                "4": "'subtle'"
                              }
                            }
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | 'sm' | 'lg' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'sm'",
                                "3": "'lg'"
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                }
              ],
              "required": false,
              "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>",
                    "schema": {
                      "sticky": {
                        "name": "sticky",
                        "global": false,
                        "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'partial'"
                          }
                        ],
                        "required": false,
                        "type": "'partial' | 'always' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'partial'",
                            "2": "'always'"
                          }
                        }
                      },
                      "forceMount": {
                        "name": "forceMount",
                        "global": false,
                        "description": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "side": {
                        "name": "side",
                        "global": false,
                        "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top'"
                          }
                        ],
                        "required": false,
                        "type": "Side | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Side | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top'",
                            "2": "'bottom'",
                            "3": "'left'",
                            "4": "'right'"
                          }
                        }
                      },
                      "sideOffset": {
                        "name": "sideOffset",
                        "global": false,
                        "description": "The distance in pixels from the trigger.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number"
                          }
                        }
                      },
                      "align": {
                        "name": "align",
                        "global": false,
                        "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'center'"
                          }
                        ],
                        "required": false,
                        "type": "Align | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Align | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'center'",
                            "2": "'start'",
                            "3": "'end'"
                          }
                        }
                      },
                      "alignOffset": {
                        "name": "alignOffset",
                        "global": false,
                        "description": "An offset in pixels from the `start` or `end` alignment options.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "avoidCollisions": {
                        "name": "avoidCollisions",
                        "global": false,
                        "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "collisionBoundary": {
                        "name": "collisionBoundary",
                        "global": false,
                        "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "Array"
                          }
                        ],
                        "required": false,
                        "type": "Element | (Element | null)[] | null | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "null",
                            "2": {
                              "kind": "object",
                              "type": "Element",
                              "schema": {}
                            },
                            "3": {
                              "kind": "array",
                              "type": "(Element | null)[]",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "Element | null",
                                  "schema": [
                                    "null",
                                    "Element"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "collisionPadding": {
                        "name": "collisionPadding",
                        "global": false,
                        "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | Partial<Record<Side, number>> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number",
                            "2": "Partial<Record<Side, number>>"
                          }
                        }
                      },
                      "arrowPadding": {
                        "name": "arrowPadding",
                        "global": false,
                        "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "hideWhenDetached": {
                        "name": "hideWhenDetached",
                        "global": false,
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "positionStrategy": {
                        "name": "positionStrategy",
                        "global": false,
                        "description": "The type of CSS position property to use.",
                        "tags": [],
                        "required": false,
                        "type": "'fixed' | 'absolute' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'fixed'",
                            "2": "'absolute'"
                          }
                        }
                      },
                      "updatePositionStrategy": {
                        "name": "updatePositionStrategy",
                        "global": false,
                        "description": "Strategy to update the position of the floating element on every animation frame.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'optimized'"
                          }
                        ],
                        "required": false,
                        "type": "'always' | 'optimized' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'always'",
                            "2": "'optimized'"
                          }
                        }
                      },
                      "ariaLabel": {
                        "name": "ariaLabel",
                        "global": false,
                        "description": "By default, screenreaders will announce the content inside\nthe component. If this is not descriptive enough, or you have\ncontent that cannot be announced, use aria-label as a more\ndescriptive label.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "String"
                          }
                        ],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "onEscapeKeyDown": {
                        "name": "onEscapeKeyDown",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: KeyboardEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: KeyboardEvent): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "KeyboardEvent",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onPointerDownOutside": {
                        "name": "onPointerDownOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "Event",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "arrow": {
              "name": "arrow",
              "global": false,
              "description": "Display an arrow alongside the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "Omit<ATooltipArrowProps, 'as' | 'asChild'>"
                }
              }
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the tooltip in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | boolean | HTMLElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "false",
                  "3": "true",
                  "4": {
                    "kind": "object",
                    "type": "HTMLElement",
                    "schema": {}
                  }
                }
              }
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; }"
                }
              }
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the tooltip when it is initially rendered.\nUse when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the tooltip.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "delayDuration": {
              "name": "delayDuration",
              "global": false,
              "description": "Override the duration given to the `Provider` to customise\nthe open delay for a specific tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "700"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "disableHoverableContent": {
              "name": "disableHoverableContent",
              "global": false,
              "description": "Prevents Tooltip.Content from remaining open when hovering.\nDisabling this has accessibility consequences. Inherits\nfrom Tooltip.Provider.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disableClosingTrigger": {
              "name": "disableClosingTrigger",
              "global": false,
              "description": "When `true`, clicking on trigger will not close the content.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "When `true`, disable tooltip",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "ignoreNonKeyboardFocus": {
              "name": "ignoreNonKeyboardFocus",
              "global": false,
              "description": "Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the `:focus-visible` selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    },
    "default": "false"
  },
  {
    "name": "variant",
    "global": false,
    "description": "The variant of the button.\nDefaults to 'outline' when not collapsed, 'ghost' when collapsed.",
    "tags": [],
    "required": false,
    "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'link'",
        "2": "'solid'",
        "3": "'outline'",
        "4": "'soft'",
        "5": "'subtle'",
        "6": "'ghost'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "({ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }) | undefined",
    "schema": {
      "kind": "enum",
      "type": "({ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "{ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }",
          "schema": {
            "base": {
              "name": "base",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": {
                "kind": "enum",
                "type": "ClassValue",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string",
                  "3": "false",
                  "4": "0",
                  "5": "0n",
                  "6": {
                    "kind": "array",
                    "type": "ClassNameArray",
                    "schema": [
                      "ClassValue"
                    ]
                  }
                }
              }
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingAvatar": {
              "name": "leadingAvatar",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingAvatarSize": {
              "name": "leadingAvatarSize",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            }
          }
        }
      }
    }
  }
],
  "slots": [
  {
    "name": "leading",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  },
  {
    "name": "default",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  },
  {
    "name": "trailing",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  }
],
  "events": [],
  "exposed": [
  {
    "name": "$slots",
    "type": "Readonly<InternalSlots> & PButtonSlots",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "Readonly<InternalSlots> & PButtonSlots",
      "schema": {
        "leading": {
          "name": "leading",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "(props?: object | undefined) => any",
          "schema": {
            "kind": "event",
            "type": "(props?: object | undefined): any",
            "schema": {}
          }
        },
        "default": {
          "name": "default",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "(props?: object | undefined) => any",
          "schema": {
            "kind": "event",
            "type": "(props?: object | undefined): any",
            "schema": {}
          }
        },
        "trailing": {
          "name": "trailing",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "(props?: object | undefined) => any",
          "schema": {
            "kind": "event",
            "type": "(props?: object | undefined): any",
            "schema": {}
          }
        }
      }
    }
  },
  {
    "name": "color",
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'",
    "description": "The color of the button.",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'",
      "schema": {
        "0": "'error'",
        "1": "'primary'",
        "2": "'secondary'",
        "3": "'success'",
        "4": "'info'",
        "5": "'warning'",
        "6": "'neutral'"
      }
    }
  },
  {
    "name": "tooltip",
    "type": "boolean | PTooltipProps",
    "description": "Display a tooltip on the button when is collapsed with the button label.\nThis has priority over the global `tooltip` prop.",
    "schema": {
      "kind": "enum",
      "type": "boolean | PTooltipProps",
      "schema": {
        "0": "false",
        "1": "true",
        "2": {
          "kind": "object",
          "type": "PTooltipProps",
          "schema": {
            "text": {
              "name": "text",
              "global": false,
              "description": "The text content of the tooltip.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "kbds": {
              "name": "kbds",
              "global": false,
              "description": "The keyboard keys to display in the tooltip.",
              "tags": [],
              "required": false,
              "type": "(string | undefined)[] | PKbdProps[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "array",
                    "type": "(string | undefined)[]",
                    "schema": [
                      "string | undefined"
                    ]
                  },
                  "2": {
                    "kind": "array",
                    "type": "PKbdProps[]",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "PKbdProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'kbd'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'a'",
                                "2": "'button'",
                                "3": "'div'",
                                "4": "'form'",
                                "5": "'h2'",
                                "6": "'h3'",
                                "7": "'img'",
                                "8": "'input'",
                                "9": "'label'",
                                "10": "'li'",
                                "11": "'nav'",
                                "12": "'ol'",
                                "13": "'p'",
                                "14": "'span'",
                                "15": "'svg'",
                                "16": "'template'",
                                "17": "'ul'",
                                "18": {
                                  "kind": "object",
                                  "type": "string & {}",
                                  "schema": {}
                                },
                                "19": {
                                  "kind": "object",
                                  "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                  "schema": {
                                    "beforeRouteEnter": {
                                      "name": "beforeRouteEnter",
                                      "global": false,
                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteUpdate": {
                                      "name": "beforeRouteUpdate",
                                      "global": false,
                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteLeave": {
                                      "name": "beforeRouteLeave",
                                      "global": false,
                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": "NavigationGuard | undefined"
                                    },
                                    "head": {
                                      "name": "head",
                                      "global": false,
                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                      "tags": [],
                                      "required": false,
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "20": {
                                  "kind": "event",
                                  "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                  "schema": []
                                },
                                "21": {
                                  "kind": "object",
                                  "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "value": {
                            "name": "value",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "color": {
                            "name": "color",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'neutral'"
                              }
                            ],
                            "required": false,
                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'error'",
                                "2": "'primary'",
                                "3": "'secondary'",
                                "4": "'success'",
                                "5": "'info'",
                                "6": "'warning'",
                                "7": "'neutral'"
                              }
                            }
                          },
                          "variant": {
                            "name": "variant",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'outline'"
                              }
                            ],
                            "required": false,
                            "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'solid'",
                                "2": "'outline'",
                                "3": "'soft'",
                                "4": "'subtle'"
                              }
                            }
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | 'sm' | 'lg' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'sm'",
                                "3": "'lg'"
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                }
              ],
              "required": false,
              "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>",
                    "schema": {
                      "sticky": {
                        "name": "sticky",
                        "global": false,
                        "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'partial'"
                          }
                        ],
                        "required": false,
                        "type": "'partial' | 'always' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'partial'",
                            "2": "'always'"
                          }
                        }
                      },
                      "forceMount": {
                        "name": "forceMount",
                        "global": false,
                        "description": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "side": {
                        "name": "side",
                        "global": false,
                        "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top'"
                          }
                        ],
                        "required": false,
                        "type": "Side | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Side | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top'",
                            "2": "'bottom'",
                            "3": "'left'",
                            "4": "'right'"
                          }
                        }
                      },
                      "sideOffset": {
                        "name": "sideOffset",
                        "global": false,
                        "description": "The distance in pixels from the trigger.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number"
                          }
                        }
                      },
                      "align": {
                        "name": "align",
                        "global": false,
                        "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'center'"
                          }
                        ],
                        "required": false,
                        "type": "Align | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Align | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'center'",
                            "2": "'start'",
                            "3": "'end'"
                          }
                        }
                      },
                      "alignOffset": {
                        "name": "alignOffset",
                        "global": false,
                        "description": "An offset in pixels from the `start` or `end` alignment options.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "avoidCollisions": {
                        "name": "avoidCollisions",
                        "global": false,
                        "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "collisionBoundary": {
                        "name": "collisionBoundary",
                        "global": false,
                        "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "Array"
                          }
                        ],
                        "required": false,
                        "type": "Element | (Element | null)[] | null | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "null",
                            "2": {
                              "kind": "object",
                              "type": "Element",
                              "schema": {}
                            },
                            "3": {
                              "kind": "array",
                              "type": "(Element | null)[]",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "Element | null",
                                  "schema": [
                                    "null",
                                    "Element"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "collisionPadding": {
                        "name": "collisionPadding",
                        "global": false,
                        "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | Partial<Record<Side, number>> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number",
                            "2": "Partial<Record<Side, number>>"
                          }
                        }
                      },
                      "arrowPadding": {
                        "name": "arrowPadding",
                        "global": false,
                        "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "hideWhenDetached": {
                        "name": "hideWhenDetached",
                        "global": false,
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "positionStrategy": {
                        "name": "positionStrategy",
                        "global": false,
                        "description": "The type of CSS position property to use.",
                        "tags": [],
                        "required": false,
                        "type": "'fixed' | 'absolute' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'fixed'",
                            "2": "'absolute'"
                          }
                        }
                      },
                      "updatePositionStrategy": {
                        "name": "updatePositionStrategy",
                        "global": false,
                        "description": "Strategy to update the position of the floating element on every animation frame.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'optimized'"
                          }
                        ],
                        "required": false,
                        "type": "'always' | 'optimized' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'always'",
                            "2": "'optimized'"
                          }
                        }
                      },
                      "ariaLabel": {
                        "name": "ariaLabel",
                        "global": false,
                        "description": "By default, screenreaders will announce the content inside\nthe component. If this is not descriptive enough, or you have\ncontent that cannot be announced, use aria-label as a more\ndescriptive label.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "String"
                          }
                        ],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "onEscapeKeyDown": {
                        "name": "onEscapeKeyDown",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: KeyboardEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: KeyboardEvent): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "KeyboardEvent",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onPointerDownOutside": {
                        "name": "onPointerDownOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "Event",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "arrow": {
              "name": "arrow",
              "global": false,
              "description": "Display an arrow alongside the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "Omit<ATooltipArrowProps, 'as' | 'asChild'>"
                }
              }
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the tooltip in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | boolean | HTMLElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "false",
                  "3": "true",
                  "4": {
                    "kind": "object",
                    "type": "HTMLElement",
                    "schema": {}
                  }
                }
              }
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; }"
                }
              }
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the tooltip when it is initially rendered.\nUse when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the tooltip.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "delayDuration": {
              "name": "delayDuration",
              "global": false,
              "description": "Override the duration given to the `Provider` to customise\nthe open delay for a specific tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "700"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "disableHoverableContent": {
              "name": "disableHoverableContent",
              "global": false,
              "description": "Prevents Tooltip.Content from remaining open when hovering.\nDisabling this has accessibility consequences. Inherits\nfrom Tooltip.Provider.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disableClosingTrigger": {
              "name": "disableClosingTrigger",
              "global": false,
              "description": "When `true`, clicking on trigger will not close the content.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "When `true`, disable tooltip",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "ignoreNonKeyboardFocus": {
              "name": "ignoreNonKeyboardFocus",
              "global": false,
              "description": "Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the `:focus-visible` selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "kbds",
    "type": "(string | undefined)[] | PKbdProps[]",
    "description": "The keyboard keys to display in the button.\n`{ variant: 'subtle' }`{lang='ts-type'}",
    "schema": {
      "kind": "enum",
      "type": "(string | undefined)[] | PKbdProps[]",
      "schema": {
        "0": {
          "kind": "array",
          "type": "(string | undefined)[]",
          "schema": [
            {
              "kind": "enum",
              "type": "string | undefined",
              "schema": [
                "undefined",
                "string"
              ]
            }
          ]
        },
        "1": {
          "kind": "array",
          "type": "PKbdProps[]",
          "schema": [
            {
              "kind": "object",
              "type": "PKbdProps",
              "schema": {
                "as": {
                  "name": "as",
                  "global": false,
                  "description": "The element or component this component should render as.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'kbd'"
                    }
                  ],
                  "required": false,
                  "type": "APrimitiveAsTag | Component | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "APrimitiveAsTag | Component | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'a'",
                      "2": "'button'",
                      "3": "'div'",
                      "4": "'form'",
                      "5": "'h2'",
                      "6": "'h3'",
                      "7": "'img'",
                      "8": "'input'",
                      "9": "'label'",
                      "10": "'li'",
                      "11": "'nav'",
                      "12": "'ol'",
                      "13": "'p'",
                      "14": "'span'",
                      "15": "'svg'",
                      "16": "'template'",
                      "17": "'ul'",
                      "18": {
                        "kind": "object",
                        "type": "string & {}",
                        "schema": {}
                      },
                      "19": {
                        "kind": "object",
                        "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                        "schema": {
                          "beforeRouteEnter": {
                            "name": "beforeRouteEnter",
                            "global": false,
                            "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuardWithThis<undefined> | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "NavigationGuardWithThis<undefined> | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "beforeRouteUpdate": {
                            "name": "beforeRouteUpdate",
                            "global": false,
                            "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuard | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "NavigationGuard | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                  "schema": []
                                }
                              }
                            }
                          },
                          "beforeRouteLeave": {
                            "name": "beforeRouteLeave",
                            "global": false,
                            "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                            "tags": [
                              {
                                "name": "param",
                                "text": "to - RouteLocationRaw we are navigating to"
                              },
                              {
                                "name": "param",
                                "text": "from - RouteLocationRaw we are navigating from"
                              },
                              {
                                "name": "param",
                                "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                              }
                            ],
                            "required": false,
                            "type": "NavigationGuard | undefined",
                            "schema": "NavigationGuard | undefined"
                          },
                          "head": {
                            "name": "head",
                            "global": false,
                            "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                            "tags": [],
                            "required": false,
                            "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                  "schema": []
                                }
                              }
                            }
                          }
                        }
                      },
                      "20": {
                        "kind": "event",
                        "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                        "schema": []
                      },
                      "21": {
                        "kind": "object",
                        "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                        "schema": {}
                      }
                    }
                  }
                },
                "value": {
                  "name": "value",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "color": {
                  "name": "color",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'neutral'"
                    }
                  ],
                  "required": false,
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'error'",
                      "2": "'primary'",
                      "3": "'secondary'",
                      "4": "'success'",
                      "5": "'info'",
                      "6": "'warning'",
                      "7": "'neutral'"
                    }
                  }
                },
                "variant": {
                  "name": "variant",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'outline'"
                    }
                  ],
                  "required": false,
                  "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'solid'",
                      "2": "'outline'",
                      "3": "'soft'",
                      "4": "'subtle'"
                    }
                  }
                },
                "size": {
                  "name": "size",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'md'"
                    }
                  ],
                  "required": false,
                  "type": "'md' | 'sm' | 'lg' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'md' | 'sm' | 'lg' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'md'",
                      "2": "'sm'",
                      "3": "'lg'"
                    }
                  }
                },
                "class": {
                  "name": "class",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "any",
                  "schema": "any"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "name": "collapsed",
    "type": "boolean",
    "description": "Whether the button is collapsed.",
    "schema": {
      "kind": "enum",
      "type": "boolean",
      "schema": {
        "0": "false",
        "1": "true"
      }
    }
  },
  {
    "name": "class",
    "type": "any",
    "description": "",
    "schema": "any"
  },
  {
    "name": "pohon",
    "type": "({ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }) | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "({ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "{ base?: ClassValue; trailing?: ClassValue; } & { base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }",
          "schema": {
            "base": {
              "name": "base",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": {
                "kind": "enum",
                "type": "ClassValue",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string",
                  "3": "false",
                  "4": "0",
                  "5": "0n",
                  "6": {
                    "kind": "array",
                    "type": "ClassNameArray",
                    "schema": [
                      "ClassValue"
                    ]
                  }
                }
              }
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingAvatar": {
              "name": "leadingAvatar",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "leadingAvatarSize": {
              "name": "leadingAvatarSize",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "ClassValue",
              "schema": "ClassValue"
            }
          }
        }
      }
    }
  },
  {
    "name": "label",
    "type": "string | undefined",
    "description": "The label displayed in the button.",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "icon",
    "type": "string | object | undefined",
    "description": "The icon displayed in the button.",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "size",
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "variant",
    "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
    "description": "The variant of the button.\nDefaults to 'outline' when not collapsed, 'ghost' when collapsed.",
    "schema": {
      "kind": "enum",
      "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'link'",
        "2": "'solid'",
        "3": "'outline'",
        "4": "'soft'",
        "5": "'subtle'",
        "6": "'ghost'"
      }
    }
  }
]
}
