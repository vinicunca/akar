{
  "props": [
  {
    "name": "arrow",
    "global": false,
    "description": "Display an arrow alongside the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Omit<AComboboxArrowProps, 'as' | 'asChild'>"
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "content",
    "global": false,
    "description": "The content of the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8, position: 'popper' }"
      }
    ],
    "required": false,
    "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>",
          "schema": {
            "position": {
              "name": "position",
              "global": false,
              "description": "The positioning mode to use, <br>\n`inline` is the default and you can control the position using CSS. <br>\n`popper` positions content in the same way as our other primitives, for example `Popover` or `DropdownMenu`.",
              "tags": [],
              "required": false,
              "type": "'inline' | 'popper' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'inline' | 'popper' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'inline'",
                  "2": "'popper'"
                }
              }
            },
            "sticky": {
              "name": "sticky",
              "global": false,
              "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'partial'"
                }
              ],
              "required": false,
              "type": "'partial' | 'always' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'partial' | 'always' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'partial'",
                  "2": "'always'"
                }
              }
            },
            "bodyLock": {
              "name": "bodyLock",
              "global": false,
              "description": "The document.body will be lock, and scrolling will be disabled.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "side": {
              "name": "side",
              "global": false,
              "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'top'"
                }
              ],
              "required": false,
              "type": "Side | undefined",
              "schema": {
                "kind": "enum",
                "type": "Side | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "sideOffset": {
              "name": "sideOffset",
              "global": false,
              "description": "The distance in pixels from the trigger.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number"
                }
              }
            },
            "sideFlip": {
              "name": "sideFlip",
              "global": false,
              "description": "Flip to the opposite side when colliding with boundary.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "align": {
              "name": "align",
              "global": false,
              "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'center'"
                }
              ],
              "required": false,
              "type": "Align | undefined",
              "schema": {
                "kind": "enum",
                "type": "Align | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'center'",
                  "2": "'start'",
                  "3": "'end'"
                }
              }
            },
            "alignOffset": {
              "name": "alignOffset",
              "global": false,
              "description": "An offset in pixels from the `start` or `end` alignment options.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "alignFlip": {
              "name": "alignFlip",
              "global": false,
              "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "avoidCollisions": {
              "name": "avoidCollisions",
              "global": false,
              "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "collisionBoundary": {
              "name": "collisionBoundary",
              "global": false,
              "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "Array"
                }
              ],
              "required": false,
              "type": "Element | (Element | null)[] | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "Element | (Element | null)[] | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": {
                    "kind": "object",
                    "type": "Element",
                    "schema": {}
                  },
                  "3": {
                    "kind": "array",
                    "type": "(Element | null)[]",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "Element | null",
                        "schema": [
                          "null",
                          "Element"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "collisionPadding": {
              "name": "collisionPadding",
              "global": false,
              "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | Partial<Record<Side, number>> | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | Partial<Record<Side, number>> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number",
                  "2": "Partial<Record<Side, number>>"
                }
              }
            },
            "arrowPadding": {
              "name": "arrowPadding",
              "global": false,
              "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "hideWhenDetached": {
              "name": "hideWhenDetached",
              "global": false,
              "description": "Whether to hide the content when the trigger becomes fully occluded.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "positionStrategy": {
              "name": "positionStrategy",
              "global": false,
              "description": "The type of CSS position property to use.",
              "tags": [],
              "required": false,
              "type": "'fixed' | 'absolute' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'fixed' | 'absolute' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'fixed'",
                  "2": "'absolute'"
                }
              }
            },
            "updatePositionStrategy": {
              "name": "updatePositionStrategy",
              "global": false,
              "description": "Strategy to update the position of the floating element on every animation frame.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'optimized'"
                }
              ],
              "required": false,
              "type": "'always' | 'optimized' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'optimized' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'optimized'"
                }
              }
            },
            "disableUpdateOnLayoutShift": {
              "name": "disableUpdateOnLayoutShift",
              "global": false,
              "description": "Whether to disable the update position for the content when the layout shifted.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prioritizePosition": {
              "name": "prioritizePosition",
              "global": false,
              "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "disableOutsidePointerEvents": {
              "name": "disableOutsidePointerEvents",
              "global": false,
              "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onEscapeKeyDown": {
              "name": "onEscapeKeyDown",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: KeyboardEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: KeyboardEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: KeyboardEvent): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "KeyboardEvent",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            },
            "onPointerDownOutside": {
              "name": "onPointerDownOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent): void",
                    "schema": [
                      "PointerDownOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onFocusOutside": {
              "name": "onFocusOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: FocusOutsideEvent): void",
                    "schema": [
                      "FocusOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onInteractOutside": {
              "name": "onInteractOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                        "schema": [
                          "PointerDownOutsideEvent",
                          "FocusOutsideEvent"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with listbox",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "portal",
    "global": false,
    "description": "Render the menu in a portal.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "string | boolean | HTMLElement | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | HTMLElement | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": {
          "kind": "object",
          "type": "HTMLElement",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "selectedIcon",
    "global": false,
    "description": "The icon displayed when an item is selected.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.check"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "trailingIcon",
    "global": false,
    "description": "The icon displayed to open the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDown"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "variant",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'outline'"
      }
    ],
    "required": false,
    "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'outline'",
        "2": "'soft'",
        "3": "'subtle'",
        "4": "'ghost'",
        "5": "'none'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }"
      }
    }
  }
]
}
