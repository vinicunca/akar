{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "animation",
    "global": false,
    "description": "The animation of the progress bar.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'carousel'"
      }
    ],
    "required": false,
    "type": "'carousel' | 'carousel-inverse' | 'swing' | 'elastic' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'carousel' | 'carousel-inverse' | 'swing' | 'elastic' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'carousel'",
        "2": "'carousel-inverse'",
        "3": "'swing'",
        "4": "'elastic'"
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "getValueLabel",
    "global": false,
    "description": "A function to get the accessible label text in a human-readable format.\n\n If not provided, the value label will be read as the numeric value as a percentage of the max value.",
    "tags": [],
    "required": false,
    "type": "((value: number | null | undefined, max: number) => string | undefined) | undefined",
    "schema": {
      "kind": "enum",
      "type": "((value: number | null | undefined, max: number) => string | undefined) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(value: number | null | undefined, max: number): string | undefined",
          "schema": []
        }
      }
    }
  },
  {
    "name": "getValueText",
    "global": false,
    "description": "A function to get the accessible value text representing the current value in a human-readable format.",
    "tags": [],
    "required": false,
    "type": "((value: number | null | undefined, max: number) => string | undefined) | undefined",
    "schema": {
      "kind": "enum",
      "type": "((value: number | null | undefined, max: number) => string | undefined) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(value: number | null | undefined, max: number): string | undefined",
          "schema": []
        }
      }
    }
  },
  {
    "name": "inverted",
    "global": false,
    "description": "Whether the progress is visually inverted.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "max",
    "global": false,
    "description": "The maximum progress value.",
    "tags": [],
    "required": false,
    "type": "number | any[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | any[] | undefined",
      "schema": {
        "0": "undefined",
        "1": "number",
        "2": {
          "kind": "array",
          "type": "any[]",
          "schema": [
            "any"
          ]
        }
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The progress value. Can be bind as `v-model`.",
    "tags": [],
    "required": false,
    "type": "number | null | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | null | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": "number"
      }
    },
    "default": "null"
  },
  {
    "name": "orientation",
    "global": false,
    "description": "The orientation of the progress bar.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'horizontal'"
      }
    ],
    "required": false,
    "type": "'vertical' | 'horizontal' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'vertical' | 'horizontal' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'vertical'",
        "2": "'horizontal'"
      }
    },
    "default": "'horizontal'"
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'2xs'",
        "3": "'xs'",
        "4": "'sm'",
        "5": "'lg'",
        "6": "'xl'",
        "7": "'2xl'"
      }
    }
  },
  {
    "name": "status",
    "global": false,
    "description": "Display the current progress value.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; base?: ClassValue; indicator?: ClassValue; status?: ClassValue; steps?: ClassValue; step?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; base?: ClassValue; indicator?: ClassValue; status?: ClassValue; steps?: ClassValue; step?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; base?: ClassValue; indicator?: ClassValue; status?: ClassValue; steps?: ClassValue; step?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "update:max",
    "description": "",
    "type": "[value: number]"
  },
  {
    "name": "update:modelValue",
    "description": "",
    "type": "[value: string[]]"
  }
],
  "slots": [
  {
    "name": "percent",
    "description": "",
    "type": "number | undefined"
  }
]
}
