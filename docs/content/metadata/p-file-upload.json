{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "accept",
    "global": false,
    "description": "Specifies the allowed file types for the input. Provide a comma-separated list of MIME types or file extensions (e.g., 'image/png,application/pdf,.jpg').",
    "tags": [
      {
        "name": "see",
        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/accept"
      },
      {
        "name": "defaultValue",
        "text": "'*'"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "'*'"
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "description",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "dropzone",
    "global": false,
    "description": "Create a zone that allows the user to drop files onto it.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "fileDelete",
    "global": false,
    "description": "Configure the delete button for the file.\nWhen `layout` is `grid`, the default is `{ color: 'neutral', variant: 'solid', size: 'xs' }`{lang='ts-type'}\nWhen `layout` is `list`, the default is `{ color: 'neutral', variant: 'link' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "boolean | Partial<PButtonProps> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<PButtonProps> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<PButtonProps>"
      }
    }
  },
  {
    "name": "fileDeleteIcon",
    "global": false,
    "description": "The icon displayed to delete a file.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.close"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "fileIcon",
    "global": false,
    "description": "The icon to display for the file.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.file"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "highlight",
    "global": false,
    "description": "Highlight the ring color like a focus state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "icon",
    "global": false,
    "description": "The icon to display.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.upload"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "id",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "interactive",
    "global": false,
    "description": "Make the dropzone interactive when the user is clicking on it.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "label",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "layout",
    "global": false,
    "description": "The layout of how files are displayed.\nOnly works when `variant` is `area`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'list'"
      }
    ],
    "required": false,
    "type": "'list' | 'grid' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'list' | 'grid' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'list'",
        "2": "'grid'"
      }
    },
    "default": "'grid'"
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "File | File[] | null | undefined",
    "schema": {
      "kind": "enum",
      "type": "File | File[] | null | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": {
          "kind": "object",
          "type": "File",
          "schema": {}
        },
        "3": {
          "kind": "array",
          "type": "File[]",
          "schema": [
            "File"
          ]
        }
      }
    }
  },
  {
    "name": "multiple",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false as never"
  },
  {
    "name": "name",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "position",
    "global": false,
    "description": "The position of the files.\nOnly works when `variant` is `area` and when `layout` is `list`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'outside'"
      }
    ],
    "required": false,
    "type": "'inside' | 'outside' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'inside' | 'outside' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'inside'",
        "2": "'outside'"
      }
    },
    "default": "'outside'"
  },
  {
    "name": "required",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "reset",
    "global": false,
    "description": "Reset the file input when the dialog is opened.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "variant",
    "global": false,
    "description": "The `button` variant is only available when `multiple` is `false`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'area'"
      }
    ],
    "required": false,
    "type": "'button' | 'area' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'button' | 'area' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'button'",
        "2": "'area'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; base?: ClassValue; wrapper?: ClassValue; icon?: ClassValue; avatar?: ClassValue; label?: ClassValue; description?: ClassValue; actions?: ClassValue; files?: ClassValue; file?: ClassValue; fileLeadingAvatar?: ClassValue; fileWrapper?: ClassValue; fileName?: ClassValue; fileSize?: ClassValue; fileTrailingButton?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; base?: ClassValue; wrapper?: ClassValue; icon?: ClassValue; avatar?: ClassValue; label?: ClassValue; description?: ClassValue; actions?: ClassValue; files?: ClassValue; file?: ClassValue; fileLeadingAvatar?: ClassValue; fileWrapper?: ClassValue; fileName?: ClassValue; fileSize?: ClassValue; fileTrailingButton?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; base?: ClassValue; wrapper?: ClassValue; icon?: ClassValue; avatar?: ClassValue; label?: ClassValue; description?: ClassValue; actions?: ClassValue; files?: ClassValue; file?: ClassValue; fileLeadingAvatar?: ClassValue; fileWrapper?: ClassValue; fileName?: ClassValue; fileSize?: ClassValue; fileTrailingButton?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "change",
    "description": "",
    "type": "[event: Event]"
  },
  {
    "name": "update:modelValue",
    "description": "",
    "type": "[value: File | File[] | null]"
  }
],
  "slots": [
  {
    "name": "open",
    "description": "",
    "type": "(localOptions?: Partial<UseFileDialogOptions> | undefined): void"
  },
  {
    "name": "removeFile",
    "description": "",
    "type": "(index?: number | undefined): void"
  }
]
}
