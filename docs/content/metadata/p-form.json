{
  "props": [
  {
    "name": "disabled",
    "global": false,
    "description": "Disable all inputs inside the form.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "id",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | number | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | number | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    }
  },
  {
    "name": "loadingAuto",
    "global": false,
    "description": "When `true`, all form elements will be disabled on `@submit` event.\nThis will cause any focused input elements to lose their focus state.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "name",
    "global": false,
    "description": "Path of the form's state within it's parent form.\nUsed for nesting forms. Only available if `nested` is true.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "nested",
    "global": false,
    "description": "If true, this form will attach to its parent Form and validate at the same time.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`false`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "schema",
    "global": false,
    "description": "Schema to validate the form state. Supports Standard Schema objects, Yup, Joi, and Superstructs.",
    "tags": [],
    "required": false,
    "type": "FormSchema | undefined",
    "schema": {
      "kind": "enum",
      "type": "FormSchema | undefined",
      "schema": {
        "0": "undefined",
        "1": "Struct<any, any>",
        "2": "StandardSchemaV1<object, object>"
      }
    }
  },
  {
    "name": "state",
    "global": false,
    "description": "An object representing the current state of the form.",
    "tags": [],
    "required": false,
    "type": "Partial<any> | undefined",
    "schema": {
      "kind": "enum",
      "type": "Partial<any> | undefined",
      "schema": {
        "0": "undefined",
        "1": "Partial<any>"
      }
    }
  },
  {
    "name": "transform",
    "global": false,
    "description": "If true, applies schema transformations on submit.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true as T"
  },
  {
    "name": "validate",
    "global": false,
    "description": "Custom validation function to validate the form state.",
    "tags": [
      {
        "name": "param",
        "text": "state - The current state of the form."
      },
      {
        "name": "returns",
        "text": "A promise that resolves to an array of FormError objects, or an array of FormError objects directly."
      }
    ],
    "required": false,
    "type": "((state: Partial<any>) => FormError<string>[] | Promise<FormError<string>[]>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "((state: Partial<any>) => FormError<string>[] | Promise<FormError<string>[]>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "event",
          "type": "(state: Partial<any>): FormError<string>[] | Promise<FormError<string>[]>",
          "schema": []
        }
      }
    }
  },
  {
    "name": "validateOn",
    "global": false,
    "description": "The list of input events that trigger the form validation.",
    "tags": [
      {
        "name": "remarks",
        "text": "The form always validates on submit."
      },
      {
        "name": "defaultValue",
        "text": "`['blur', 'change', 'input']`"
      }
    ],
    "required": false,
    "type": "FormInputEvents[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "FormInputEvents[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "FormInputEvents[]",
          "schema": [
            {
              "kind": "enum",
              "type": "FormInputEvents",
              "schema": [
                "'input'",
                "'blur'",
                "'change'",
                "'focus'"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "validateOnInputDelay",
    "global": false,
    "description": "Delay in milliseconds before validating the form on input events.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`300`"
      }
    ],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "300"
  }
],
  "emits": [
  {
    "name": "error",
    "description": "",
    "type": "[event: FormErrorEvent]"
  },
  {
    "name": "submit",
    "description": "",
    "type": "[event: FormSubmitEvent<any>]"
  }
],
  "slots": [
  {
    "name": "errors",
    "description": "",
    "type": "FormError<string>"
  },
  {
    "name": "loading",
    "description": "",
    "type": "boolean"
  }
],
  "exposed": [
  {
    "name": "setErrors",
    "description": "",
    "type": "(errs: FormError<string>[], name?: string | number | symbol | RegExp | undefined) => void"
  },
  {
    "name": "submit",
    "description": "",
    "type": "() => Promise<void>"
  },
  {
    "name": "getErrors",
    "description": "",
    "type": "(name?: string | number | symbol | RegExp | undefined) => { id?: string | undefined; name?: string | undefined; message: string; }[]"
  },
  {
    "name": "clear",
    "description": "",
    "type": "(name?: string | number | symbol | RegExp | undefined) => void"
  }
]
}
