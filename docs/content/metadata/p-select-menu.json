{
  "props": [
  {
    "name": "arrow",
    "global": false,
    "description": "Display an arrow alongside the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Omit<AComboboxArrowProps, 'as' | 'asChild'>"
      }
    }
  },
  {
    "name": "autofocus",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "autofocusDelay",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "0"
  },
  {
    "name": "avatar",
    "global": false,
    "description": "Display an avatar on the left side.",
    "tags": [],
    "required": false,
    "type": "PAvatarProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PAvatarProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PAvatarProps",
          "schema": {
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'span'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": {
                "kind": "enum",
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'a'",
                  "2": "'button'",
                  "3": "'div'",
                  "4": "'form'",
                  "5": "'h2'",
                  "6": "'h3'",
                  "7": "'img'",
                  "8": "'input'",
                  "9": "'label'",
                  "10": "'li'",
                  "11": "'nav'",
                  "12": "'ol'",
                  "13": "'p'",
                  "14": "'span'",
                  "15": "'svg'",
                  "16": "'template'",
                  "17": "'ul'",
                  "18": {
                    "kind": "object",
                    "type": "string & {}",
                    "schema": {}
                  },
                  "19": {
                    "kind": "object",
                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                    "schema": {
                      "beforeRouteEnter": {
                        "name": "beforeRouteEnter",
                        "global": false,
                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuardWithThis<undefined> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuardWithThis<undefined> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteUpdate": {
                        "name": "beforeRouteUpdate",
                        "global": false,
                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuard | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteLeave": {
                        "name": "beforeRouteLeave",
                        "global": false,
                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": "NavigationGuard | undefined"
                      },
                      "head": {
                        "name": "head",
                        "global": false,
                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                        "tags": [],
                        "required": false,
                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                              "schema": []
                            }
                          }
                        }
                      }
                    }
                  },
                  "20": {
                    "kind": "event",
                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                    "schema": []
                  },
                  "21": {
                    "kind": "object",
                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                    "schema": {}
                  }
                }
              }
            },
            "src": {
              "name": "src",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "alt": {
              "name": "alt",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "text": {
              "name": "text",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'3xs'",
                  "3": "'2xs'",
                  "4": "'xs'",
                  "5": "'sm'",
                  "6": "'lg'",
                  "7": "'xl'",
                  "8": "'2xl'",
                  "9": "'3xl'"
                }
              }
            },
            "chip": {
              "name": "chip",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | PChipProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | PChipProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": {
                    "kind": "object",
                    "type": "PChipProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'div'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": "APrimitiveAsTag | Component | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "Display some text inside the chip.",
                        "tags": [],
                        "required": false,
                        "type": "string | number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "string | number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "number"
                          }
                        }
                      },
                      "color": {
                        "name": "color",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'primary'"
                          }
                        ],
                        "required": false,
                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'error'",
                            "2": "'primary'",
                            "3": "'secondary'",
                            "4": "'success'",
                            "5": "'info'",
                            "6": "'warning'",
                            "7": "'neutral'"
                          }
                        }
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                        "schema": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
                      },
                      "position": {
                        "name": "position",
                        "global": false,
                        "description": "The position of the chip.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top-right'"
                          }
                        ],
                        "required": false,
                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top-right'",
                            "2": "'bottom-right'",
                            "3": "'top-left'",
                            "4": "'bottom-left'"
                          }
                        }
                      },
                      "inset": {
                        "name": "inset",
                        "global": false,
                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "standalone": {
                        "name": "standalone",
                        "global": false,
                        "description": "When `true`, render the chip relatively to the parent.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "style": {
              "name": "style",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "content",
    "global": false,
    "description": "The content of the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8, position: 'popper' }"
      }
    ],
    "required": false,
    "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>",
          "schema": {
            "position": {
              "name": "position",
              "global": false,
              "description": "The positioning mode to use, <br>\n`inline` is the default and you can control the position using CSS. <br>\n`popper` positions content in the same way as our other primitives, for example `Popover` or `DropdownMenu`.",
              "tags": [],
              "required": false,
              "type": "'inline' | 'popper' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'inline' | 'popper' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'inline'",
                  "2": "'popper'"
                }
              }
            },
            "sticky": {
              "name": "sticky",
              "global": false,
              "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'partial'"
                }
              ],
              "required": false,
              "type": "'partial' | 'always' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'partial' | 'always' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'partial'",
                  "2": "'always'"
                }
              }
            },
            "bodyLock": {
              "name": "bodyLock",
              "global": false,
              "description": "The document.body will be lock, and scrolling will be disabled.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "side": {
              "name": "side",
              "global": false,
              "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'top'"
                }
              ],
              "required": false,
              "type": "Side | undefined",
              "schema": {
                "kind": "enum",
                "type": "Side | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "sideOffset": {
              "name": "sideOffset",
              "global": false,
              "description": "The distance in pixels from the trigger.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number"
                }
              }
            },
            "sideFlip": {
              "name": "sideFlip",
              "global": false,
              "description": "Flip to the opposite side when colliding with boundary.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "align": {
              "name": "align",
              "global": false,
              "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'center'"
                }
              ],
              "required": false,
              "type": "Align | undefined",
              "schema": {
                "kind": "enum",
                "type": "Align | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'center'",
                  "2": "'start'",
                  "3": "'end'"
                }
              }
            },
            "alignOffset": {
              "name": "alignOffset",
              "global": false,
              "description": "An offset in pixels from the `start` or `end` alignment options.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "alignFlip": {
              "name": "alignFlip",
              "global": false,
              "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "avoidCollisions": {
              "name": "avoidCollisions",
              "global": false,
              "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "collisionBoundary": {
              "name": "collisionBoundary",
              "global": false,
              "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "Array"
                }
              ],
              "required": false,
              "type": "Element | (Element | null)[] | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "Element | (Element | null)[] | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": {
                    "kind": "object",
                    "type": "Element",
                    "schema": {}
                  },
                  "3": {
                    "kind": "array",
                    "type": "(Element | null)[]",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "Element | null",
                        "schema": [
                          "null",
                          "Element"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "collisionPadding": {
              "name": "collisionPadding",
              "global": false,
              "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | Partial<Record<Side, number>> | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | Partial<Record<Side, number>> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number",
                  "2": "Partial<Record<Side, number>>"
                }
              }
            },
            "arrowPadding": {
              "name": "arrowPadding",
              "global": false,
              "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "hideWhenDetached": {
              "name": "hideWhenDetached",
              "global": false,
              "description": "Whether to hide the content when the trigger becomes fully occluded.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "positionStrategy": {
              "name": "positionStrategy",
              "global": false,
              "description": "The type of CSS position property to use.",
              "tags": [],
              "required": false,
              "type": "'fixed' | 'absolute' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'fixed' | 'absolute' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'fixed'",
                  "2": "'absolute'"
                }
              }
            },
            "updatePositionStrategy": {
              "name": "updatePositionStrategy",
              "global": false,
              "description": "Strategy to update the position of the floating element on every animation frame.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'optimized'"
                }
              ],
              "required": false,
              "type": "'always' | 'optimized' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'optimized' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'optimized'"
                }
              }
            },
            "disableUpdateOnLayoutShift": {
              "name": "disableUpdateOnLayoutShift",
              "global": false,
              "description": "Whether to disable the update position for the content when the layout shifted.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prioritizePosition": {
              "name": "prioritizePosition",
              "global": false,
              "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "disableOutsidePointerEvents": {
              "name": "disableOutsidePointerEvents",
              "global": false,
              "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onEscapeKeyDown": {
              "name": "onEscapeKeyDown",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: KeyboardEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: KeyboardEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: KeyboardEvent): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "KeyboardEvent",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            },
            "onPointerDownOutside": {
              "name": "onPointerDownOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent): void",
                    "schema": [
                      "PointerDownOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onFocusOutside": {
              "name": "onFocusOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: FocusOutsideEvent): void",
                    "schema": [
                      "FocusOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onInteractOutside": {
              "name": "onInteractOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                        "schema": [
                          "PointerDownOutsideEvent",
                          "FocusOutsideEvent"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "createItem",
    "global": false,
    "description": "Determines if custom user input that does not exist in options can be added.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | 'always' | { position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | 'always' | { position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "'always'",
        "4": {
          "kind": "object",
          "type": "{ position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; }",
          "schema": {
            "position": {
              "name": "position",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'top' | 'bottom' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'top' | 'bottom' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'"
                }
              }
            },
            "when": {
              "name": "when",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'always' | 'empty' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'empty' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'empty'"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "defaultOpen",
    "global": false,
    "description": "The open state of the combobox when it is initially rendered. <br> Use when you do not need to control its open state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "The value of the SelectMenu when initially rendered. Use when you do not need to control the state of the SelectMenu.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with listbox",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "filterFields",
    "global": false,
    "description": "Fields to filter items by.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "[labelKey]"
      }
    ],
    "required": false,
    "type": "string[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "string[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "string[]",
          "schema": [
            "string"
          ]
        }
      }
    }
  },
  {
    "name": "highlight",
    "global": false,
    "description": "Highlight the ring color like a focus state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "highlightOnHover",
    "global": false,
    "description": "When `true`, hover over item will trigger highlight",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "icon",
    "global": false,
    "description": "Display an icon based on the `leading` and `trailing` props.",
    "tags": [
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "id",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "ignoreFilter",
    "global": false,
    "description": "When `true`, disable the default filters, useful for custom filtering (useAsyncData, useFetch, etc.).",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ArrayOrNested<PSelectMenuItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "ArrayOrNested<PSelectMenuItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PSelectMenuItem[]",
          "schema": [
            {
              "kind": "enum",
              "type": "PSelectMenuItem",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "false",
                "true",
                {
                  "kind": "object",
                  "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel'> | undefined; }",
                  "schema": {
                    "label": {
                      "name": "label",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string"
                        }
                      }
                    },
                    "icon": {
                      "name": "icon",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "IconifyIcon"
                        }
                      ],
                      "required": false,
                      "type": "string | object | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | object | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string",
                          "2": "object"
                        }
                      }
                    },
                    "avatar": {
                      "name": "avatar",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PAvatarProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "object",
                            "type": "PAvatarProps",
                            "schema": {
                              "as": {
                                "name": "as",
                                "global": false,
                                "description": "The element or component this component should render as.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'span'"
                                  }
                                ],
                                "required": false,
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'a'",
                                    "2": "'button'",
                                    "3": "'div'",
                                    "4": "'form'",
                                    "5": "'h2'",
                                    "6": "'h3'",
                                    "7": "'img'",
                                    "8": "'input'",
                                    "9": "'label'",
                                    "10": "'li'",
                                    "11": "'nav'",
                                    "12": "'ol'",
                                    "13": "'p'",
                                    "14": "'span'",
                                    "15": "'svg'",
                                    "16": "'template'",
                                    "17": "'ul'",
                                    "18": {
                                      "kind": "object",
                                      "type": "string & {}",
                                      "schema": {}
                                    },
                                    "19": {
                                      "kind": "object",
                                      "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                      "schema": {
                                        "beforeRouteEnter": {
                                          "name": "beforeRouteEnter",
                                          "global": false,
                                          "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuardWithThis<undefined> | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteUpdate": {
                                          "name": "beforeRouteUpdate",
                                          "global": false,
                                          "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuard | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteLeave": {
                                          "name": "beforeRouteLeave",
                                          "global": false,
                                          "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": "NavigationGuard | undefined"
                                        },
                                        "head": {
                                          "name": "head",
                                          "global": false,
                                          "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                          "tags": [],
                                          "required": false,
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "20": {
                                      "kind": "event",
                                      "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                      "schema": []
                                    },
                                    "21": {
                                      "kind": "object",
                                      "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                      "schema": {}
                                    }
                                  }
                                }
                              },
                              "src": {
                                "name": "src",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "alt": {
                                "name": "alt",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "icon": {
                                "name": "icon",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "IconifyIcon"
                                  }
                                ],
                                "required": false,
                                "type": "string | object | undefined",
                                "schema": "string | object | undefined"
                              },
                              "text": {
                                "name": "text",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'md'"
                                  }
                                ],
                                "required": false,
                                "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'md'",
                                    "2": "'3xs'",
                                    "3": "'2xs'",
                                    "4": "'xs'",
                                    "5": "'sm'",
                                    "6": "'lg'",
                                    "7": "'xl'",
                                    "8": "'2xl'",
                                    "9": "'3xl'"
                                  }
                                }
                              },
                              "chip": {
                                "name": "chip",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "boolean | PChipProps | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "false",
                                    "2": "true",
                                    "3": {
                                      "kind": "object",
                                      "type": "PChipProps",
                                      "schema": {
                                        "as": {
                                          "name": "as",
                                          "global": false,
                                          "description": "The element or component this component should render as.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'div'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "APrimitiveAsTag | Component | undefined",
                                          "schema": "APrimitiveAsTag | Component | undefined"
                                        },
                                        "text": {
                                          "name": "text",
                                          "global": false,
                                          "description": "Display some text inside the chip.",
                                          "tags": [],
                                          "required": false,
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "string | number | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "string",
                                              "2": "number"
                                            }
                                          }
                                        },
                                        "color": {
                                          "name": "color",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'primary'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'error'",
                                              "2": "'primary'",
                                              "3": "'secondary'",
                                              "4": "'success'",
                                              "5": "'info'",
                                              "6": "'warning'",
                                              "7": "'neutral'"
                                            }
                                          }
                                        },
                                        "size": {
                                          "name": "size",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'md'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                          "schema": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
                                        },
                                        "position": {
                                          "name": "position",
                                          "global": false,
                                          "description": "The position of the chip.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'top-right'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'top-right'",
                                              "2": "'bottom-right'",
                                              "3": "'top-left'",
                                              "4": "'bottom-left'"
                                            }
                                          }
                                        },
                                        "inset": {
                                          "name": "inset",
                                          "global": false,
                                          "description": "When `true`, keep the chip inside the component for rounded elements.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "boolean | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "false",
                                              "2": "true"
                                            }
                                          }
                                        },
                                        "standalone": {
                                          "name": "standalone",
                                          "global": false,
                                          "description": "When `true`, render the chip relatively to the parent.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": "boolean | undefined"
                                        },
                                        "class": {
                                          "name": "class",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "any",
                                          "schema": "any"
                                        },
                                        "pohon": {
                                          "name": "pohon",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "{ root?: ClassValue; base?: ClassValue; }"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "style": {
                                "name": "style",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "pohon": {
                                "name": "pohon",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "chip": {
                      "name": "chip",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PChipProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PChipProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "PChipProps"
                        }
                      }
                    },
                    "type": {
                      "name": "type",
                      "global": false,
                      "description": "The item type.",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "'item'"
                        }
                      ],
                      "required": false,
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "'label' | 'item' | 'separator' | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'label'",
                          "2": "'item'",
                          "3": "'separator'"
                        }
                      }
                    },
                    "disabled": {
                      "name": "disabled",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "onSelect": {
                      "name": "onSelect",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((event?: Event | undefined) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(event?: Event | undefined): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel'> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel'> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel'>"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        },
        "2": {
          "kind": "array",
          "type": "PSelectMenuItem[][]",
          "schema": [
            "PSelectMenuItem[]"
          ]
        }
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the label.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PSelectMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PSelectMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "leading",
    "global": false,
    "description": "When `true`, the icon will be displayed on the left side.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "leadingIcon",
    "global": false,
    "description": "Display an icon on the left side.",
    "tags": [
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "loading",
    "global": false,
    "description": "When `true`, the loading icon will be displayed.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "loadingIcon",
    "global": false,
    "description": "The icon when the `loading` prop is `true`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.loading"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The controlled value of the SelectMenu. Can be binded-with with `v-model`.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "multiple",
    "global": false,
    "description": "Whether multiple options can be selected or not.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "name",
    "global": false,
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "open",
    "global": false,
    "description": "The controlled open state of the Combobox. Can be binded with with `v-model:open`.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "placeholder",
    "global": false,
    "description": "The placeholder text when the select is empty.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "portal",
    "global": false,
    "description": "Render the menu in a portal.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "string | boolean | HTMLElement | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | HTMLElement | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": {
          "kind": "object",
          "type": "HTMLElement",
          "schema": {}
        }
      }
    },
    "default": "true"
  },
  {
    "name": "required",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "resetSearchTermOnBlur",
    "global": false,
    "description": "Whether to reset the searchTerm when the Combobox input blurred",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "resetSearchTermOnSelect",
    "global": false,
    "description": "Whether to reset the searchTerm when the Combobox value is selected",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "searchInput",
    "global": false,
    "description": "Whether to display the search input or not.\nCan be an object to pass additional props to the input.\n`{ placeholder: 'Search...', variant: 'none' }`{lang='ts-type'}",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | PInputProps<AcceptableValue> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | PInputProps<AcceptableValue> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "PInputProps<AcceptableValue>"
      }
    },
    "default": "true"
  },
  {
    "name": "searchTerm",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "''"
  },
  {
    "name": "selectedIcon",
    "global": false,
    "description": "The icon displayed when an item is selected.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.check"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "trailing",
    "global": false,
    "description": "When `true`, the icon will be displayed on the right side.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "trailingIcon",
    "global": false,
    "description": "The icon displayed to open the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDown"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "valueKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the value instead of the object itself.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "undefined"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PSelectMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PSelectMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    }
  },
  {
    "name": "variant",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'outline'"
      }
    ],
    "required": false,
    "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'outline'",
        "2": "'soft'",
        "3": "'subtle'",
        "4": "'ghost'",
        "5": "'none'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; value?: ClassValue; placeholder?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; input?: ClassValue; focusScope?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "blur",
    "description": "",
    "type": "[event: FocusEvent]"
  },
  {
    "name": "change",
    "description": "",
    "type": "[event: Event]"
  },
  {
    "name": "create",
    "description": "",
    "type": "[item: string]"
  },
  {
    "name": "focus",
    "description": "",
    "type": "[event: FocusEvent]"
  },
  {
    "name": "highlight",
    "description": "",
    "type": "[payload: { ref: HTMLElement; value: any; }]"
  },
  {
    "name": "update:modelValue",
    "description": "",
    "type": "[value: any]"
  },
  {
    "name": "update:open",
    "description": "",
    "type": "[value: boolean]"
  },
  {
    "name": "update:searchTerm",
    "description": "",
    "type": "[value: string]"
  }
],
  "slots": [
  {
    "name": "modelValue",
    "description": "",
    "type": "any"
  },
  {
    "name": "open",
    "description": "",
    "type": "boolean"
  },
  {
    "name": "pohon",
    "description": "",
    "type": "{ root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; value: (props?: Record<string, any> | undefined) => string; placeholder: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; focusScope: (props?: Record<string, any> | undefined) => string; }"
  }
]
}
