{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "arrow",
    "global": false,
    "description": "Display an arrow alongside the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "collapsed",
    "global": false,
    "description": "Collapse the navigation menu to only show icons.\nOnly works when `orientation` is `vertical`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "collapsible",
    "global": false,
    "description": "When type is 'single', allows closing content when clicking trigger for an open item.\nWhen type is 'multiple', this prop has no effect.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "content",
    "global": false,
    "description": "The content of the menu.",
    "tags": [],
    "required": false,
    "type": "(Omit<ANavigationMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "(Omit<ANavigationMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "Omit<ANavigationMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>",
          "schema": {
            "disableOutsidePointerEvents": {
              "name": "disableOutsidePointerEvents",
              "global": false,
              "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "onEscapeKeyDown": {
              "name": "onEscapeKeyDown",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: KeyboardEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: KeyboardEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: KeyboardEvent): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "KeyboardEvent",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            },
            "onPointerDownOutside": {
              "name": "onPointerDownOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent): void",
                    "schema": [
                      "PointerDownOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onFocusOutside": {
              "name": "onFocusOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: FocusOutsideEvent): void",
                    "schema": [
                      "FocusOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onInteractOutside": {
              "name": "onInteractOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                        "schema": [
                          "PointerDownOutsideEvent",
                          "FocusOutsideEvent"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "contentOrientation",
    "global": false,
    "description": "The orientation of the content.\nOnly works when `orientation` is `horizontal`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'horizontal'"
      }
    ],
    "required": false,
    "type": "'vertical' | 'horizontal' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'vertical' | 'horizontal' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'vertical'",
        "2": "'horizontal'"
      }
    },
    "default": "'horizontal'"
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "The value of the menu item that should be active when initially rendered.\n\nUse when you do not need to control the value state.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "delayDuration",
    "global": false,
    "description": "The duration from when the pointer enters the trigger until the tooltip gets opened.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "200"
      }
    ],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "0"
  },
  {
    "name": "disableClickTrigger",
    "global": false,
    "description": "If `true`, menu cannot be open by click on trigger",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with the accordion and all its items",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disableHoverTrigger",
    "global": false,
    "description": "If `true`, menu cannot be open by hover on trigger",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disablePointerLeaveClose",
    "global": false,
    "description": "If `true`, menu will not close during pointer leave event",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "externalIcon",
    "global": false,
    "description": "The icon displayed when the item is an external link.\nSet to `false` to hide the external icon.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.external"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | boolean | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": "object"
      }
    },
    "default": "true"
  },
  {
    "name": "highlight",
    "global": false,
    "description": "Display a line next to the active item.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "highlightColor",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ArrayOrNested<PNavigationMenuItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "ArrayOrNested<PNavigationMenuItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PNavigationMenuItem[]",
          "schema": [
            {
              "kind": "object",
              "type": "PNavigationMenuItem",
              "schema": {
                "label": {
                  "name": "label",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string"
                    }
                  }
                },
                "icon": {
                  "name": "icon",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "IconifyIcon"
                    }
                  ],
                  "required": false,
                  "type": "string | object | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | object | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string",
                      "2": "object"
                    }
                  }
                },
                "avatar": {
                  "name": "avatar",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "object",
                        "type": "PAvatarProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'span'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'a'",
                                "2": "'button'",
                                "3": "'div'",
                                "4": "'form'",
                                "5": "'h2'",
                                "6": "'h3'",
                                "7": "'img'",
                                "8": "'input'",
                                "9": "'label'",
                                "10": "'li'",
                                "11": "'nav'",
                                "12": "'ol'",
                                "13": "'p'",
                                "14": "'span'",
                                "15": "'svg'",
                                "16": "'template'",
                                "17": "'ul'",
                                "18": {
                                  "kind": "object",
                                  "type": "string & {}",
                                  "schema": {}
                                },
                                "19": {
                                  "kind": "object",
                                  "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                  "schema": {
                                    "beforeRouteEnter": {
                                      "name": "beforeRouteEnter",
                                      "global": false,
                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteUpdate": {
                                      "name": "beforeRouteUpdate",
                                      "global": false,
                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteLeave": {
                                      "name": "beforeRouteLeave",
                                      "global": false,
                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": "NavigationGuard | undefined"
                                    },
                                    "head": {
                                      "name": "head",
                                      "global": false,
                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                      "tags": [],
                                      "required": false,
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "20": {
                                  "kind": "event",
                                  "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                  "schema": []
                                },
                                "21": {
                                  "kind": "object",
                                  "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "src": {
                            "name": "src",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "alt": {
                            "name": "alt",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "icon": {
                            "name": "icon",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "IconifyIcon"
                              }
                            ],
                            "required": false,
                            "type": "string | object | undefined",
                            "schema": "string | object | undefined"
                          },
                          "text": {
                            "name": "text",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'3xs'",
                                "3": "'2xs'",
                                "4": "'xs'",
                                "5": "'sm'",
                                "6": "'lg'",
                                "7": "'xl'",
                                "8": "'2xl'",
                                "9": "'3xl'"
                              }
                            }
                          },
                          "chip": {
                            "name": "chip",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "false",
                                "2": "true",
                                "3": {
                                  "kind": "object",
                                  "type": "PChipProps",
                                  "schema": {
                                    "as": {
                                      "name": "as",
                                      "global": false,
                                      "description": "The element or component this component should render as.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'div'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "APrimitiveAsTag | Component | undefined",
                                      "schema": "APrimitiveAsTag | Component | undefined"
                                    },
                                    "text": {
                                      "name": "text",
                                      "global": false,
                                      "description": "Display some text inside the chip.",
                                      "tags": [],
                                      "required": false,
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "string",
                                          "2": "number"
                                        }
                                      }
                                    },
                                    "color": {
                                      "name": "color",
                                      "global": false,
                                      "description": "",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'primary'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'error'",
                                          "2": "'primary'",
                                          "3": "'secondary'",
                                          "4": "'success'",
                                          "5": "'info'",
                                          "6": "'warning'",
                                          "7": "'neutral'"
                                        }
                                      }
                                    },
                                    "size": {
                                      "name": "size",
                                      "global": false,
                                      "description": "",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'md'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                      "schema": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
                                    },
                                    "position": {
                                      "name": "position",
                                      "global": false,
                                      "description": "The position of the chip.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'top-right'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'top-right'",
                                          "2": "'bottom-right'",
                                          "3": "'top-left'",
                                          "4": "'bottom-left'"
                                        }
                                      }
                                    },
                                    "inset": {
                                      "name": "inset",
                                      "global": false,
                                      "description": "When `true`, keep the chip inside the component for rounded elements.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "false",
                                          "2": "true"
                                        }
                                      }
                                    },
                                    "standalone": {
                                      "name": "standalone",
                                      "global": false,
                                      "description": "When `true`, render the chip relatively to the parent.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "class": {
                                      "name": "class",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "any",
                                      "schema": "any"
                                    },
                                    "pohon": {
                                      "name": "pohon",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "{ root?: ClassValue; base?: ClassValue; }"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "style": {
                            "name": "style",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "pohon": {
                            "name": "pohon",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "badge": {
                  "name": "badge",
                  "global": false,
                  "description": "Display a badge on the item.\n`{ size: 'sm', color: 'neutral', variant: 'outline' }`{lang='ts-type'}",
                  "tags": [],
                  "required": false,
                  "type": "string | number | PBadgeProps | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | number | PBadgeProps | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string",
                      "2": "number",
                      "3": {
                        "kind": "object",
                        "type": "PBadgeProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'span'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": "APrimitiveAsTag | Component | undefined"
                          },
                          "label": {
                            "name": "label",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | number | undefined",
                            "schema": "string | number | undefined"
                          },
                          "color": {
                            "name": "color",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'primary'"
                              }
                            ],
                            "required": false,
                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                            "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                          },
                          "variant": {
                            "name": "variant",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'solid'"
                              }
                            ],
                            "required": false,
                            "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'solid'",
                                "2": "'outline'",
                                "3": "'soft'",
                                "4": "'subtle'"
                              }
                            }
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'xs'",
                                "3": "'sm'",
                                "4": "'lg'",
                                "5": "'xl'"
                              }
                            }
                          },
                          "square": {
                            "name": "square",
                            "global": false,
                            "description": "Render the badge with equal padding on all sides.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "pohon": {
                            "name": "pohon",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                              }
                            }
                          },
                          "trailingIcon": {
                            "name": "trailingIcon",
                            "global": false,
                            "description": "Display an icon on the right side.",
                            "tags": [
                              {
                                "name": "IconifyIcon"
                              }
                            ],
                            "required": false,
                            "type": "string | object | undefined",
                            "schema": "string | object | undefined"
                          },
                          "leadingIcon": {
                            "name": "leadingIcon",
                            "global": false,
                            "description": "Display an icon on the left side.",
                            "tags": [
                              {
                                "name": "IconifyIcon"
                              }
                            ],
                            "required": false,
                            "type": "string | object | undefined",
                            "schema": "string | object | undefined"
                          },
                          "leading": {
                            "name": "leading",
                            "global": false,
                            "description": "When `true`, the icon will be displayed on the left side.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "trailing": {
                            "name": "trailing",
                            "global": false,
                            "description": "When `true`, the icon will be displayed on the right side.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "icon": {
                            "name": "icon",
                            "global": false,
                            "description": "Display an icon based on the `leading` and `trailing` props.",
                            "tags": [
                              {
                                "name": "IconifyIcon"
                              }
                            ],
                            "required": false,
                            "type": "string | object | undefined",
                            "schema": "string | object | undefined"
                          },
                          "avatar": {
                            "name": "avatar",
                            "global": false,
                            "description": "Display an avatar on the left side.",
                            "tags": [],
                            "required": false,
                            "type": "PAvatarProps | undefined",
                            "schema": "PAvatarProps | undefined"
                          }
                        }
                      }
                    }
                  }
                },
                "tooltip": {
                  "name": "tooltip",
                  "global": false,
                  "description": "Display a tooltip on the item when the menu is collapsed with the label of the item.\nThis has priority over the global `tooltip` prop.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | PTooltipProps | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "boolean | PTooltipProps | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "false",
                      "2": "true",
                      "3": {
                        "kind": "object",
                        "type": "PTooltipProps",
                        "schema": {
                          "text": {
                            "name": "text",
                            "global": false,
                            "description": "The text content of the tooltip.",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "kbds": {
                            "name": "kbds",
                            "global": false,
                            "description": "The keyboard keys to display in the tooltip.",
                            "tags": [],
                            "required": false,
                            "type": "(string | undefined)[] | PKbdProps[] | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "(string | undefined)[] | PKbdProps[] | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "array",
                                  "type": "(string | undefined)[]",
                                  "schema": [
                                    "string | undefined"
                                  ]
                                },
                                "2": {
                                  "kind": "array",
                                  "type": "PKbdProps[]",
                                  "schema": [
                                    {
                                      "kind": "object",
                                      "type": "PKbdProps",
                                      "schema": {
                                        "as": {
                                          "name": "as",
                                          "global": false,
                                          "description": "The element or component this component should render as.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'kbd'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "APrimitiveAsTag | Component | undefined",
                                          "schema": "APrimitiveAsTag | Component | undefined"
                                        },
                                        "value": {
                                          "name": "value",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "string | undefined",
                                          "schema": "string | undefined"
                                        },
                                        "color": {
                                          "name": "color",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'neutral'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                        },
                                        "variant": {
                                          "name": "variant",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'outline'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                          "schema": "'solid' | 'outline' | 'soft' | 'subtle' | undefined"
                                        },
                                        "size": {
                                          "name": "size",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'md'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'md' | 'sm' | 'lg' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'md' | 'sm' | 'lg' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'md'",
                                              "2": "'sm'",
                                              "3": "'lg'"
                                            }
                                          }
                                        },
                                        "class": {
                                          "name": "class",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "any",
                                          "schema": "any"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "content": {
                            "name": "content",
                            "global": false,
                            "description": "The content of the tooltip.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                              }
                            ],
                            "required": false,
                            "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "object",
                                  "type": "Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>",
                                  "schema": {
                                    "sticky": {
                                      "name": "sticky",
                                      "global": false,
                                      "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'partial'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'partial' | 'always' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'partial' | 'always' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'partial'",
                                          "2": "'always'"
                                        }
                                      }
                                    },
                                    "forceMount": {
                                      "name": "forceMount",
                                      "global": false,
                                      "description": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "side": {
                                      "name": "side",
                                      "global": false,
                                      "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'top'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Side | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "Side | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'top'",
                                          "2": "'bottom'",
                                          "3": "'left'",
                                          "4": "'right'"
                                        }
                                      }
                                    },
                                    "sideOffset": {
                                      "name": "sideOffset",
                                      "global": false,
                                      "description": "The distance in pixels from the trigger.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "number | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "number"
                                        }
                                      }
                                    },
                                    "align": {
                                      "name": "align",
                                      "global": false,
                                      "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'center'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Align | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "Align | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'center'",
                                          "2": "'start'",
                                          "3": "'end'"
                                        }
                                      }
                                    },
                                    "alignOffset": {
                                      "name": "alignOffset",
                                      "global": false,
                                      "description": "An offset in pixels from the `start` or `end` alignment options.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": "number | undefined"
                                    },
                                    "avoidCollisions": {
                                      "name": "avoidCollisions",
                                      "global": false,
                                      "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "true"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "collisionBoundary": {
                                      "name": "collisionBoundary",
                                      "global": false,
                                      "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "Array"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Element | (Element | null)[] | null | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "Element | (Element | null)[] | null | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "null",
                                          "2": {
                                            "kind": "object",
                                            "type": "Element",
                                            "schema": {}
                                          },
                                          "3": {
                                            "kind": "array",
                                            "type": "(Element | null)[]",
                                            "schema": [
                                              {
                                                "kind": "enum",
                                                "type": "Element | null",
                                                "schema": [
                                                  "null",
                                                  "Element"
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "collisionPadding": {
                                      "name": "collisionPadding",
                                      "global": false,
                                      "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | Partial<Record<Side, number>> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "number | Partial<Record<Side, number>> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "number",
                                          "2": "Partial<Record<Side, number>>"
                                        }
                                      }
                                    },
                                    "arrowPadding": {
                                      "name": "arrowPadding",
                                      "global": false,
                                      "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": "number | undefined"
                                    },
                                    "hideWhenDetached": {
                                      "name": "hideWhenDetached",
                                      "global": false,
                                      "description": "Whether to hide the content when the trigger becomes fully occluded.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "false"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "positionStrategy": {
                                      "name": "positionStrategy",
                                      "global": false,
                                      "description": "The type of CSS position property to use.",
                                      "tags": [],
                                      "required": false,
                                      "type": "'fixed' | 'absolute' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'fixed' | 'absolute' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'fixed'",
                                          "2": "'absolute'"
                                        }
                                      }
                                    },
                                    "updatePositionStrategy": {
                                      "name": "updatePositionStrategy",
                                      "global": false,
                                      "description": "Strategy to update the position of the floating element on every animation frame.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'optimized'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'always' | 'optimized' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'always' | 'optimized' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'always'",
                                          "2": "'optimized'"
                                        }
                                      }
                                    },
                                    "ariaLabel": {
                                      "name": "ariaLabel",
                                      "global": false,
                                      "description": "By default, screenreaders will announce the content inside\nthe component. If this is not descriptive enough, or you have\ncontent that cannot be announced, use aria-label as a more\ndescriptive label.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "String"
                                        }
                                      ],
                                      "required": false,
                                      "type": "string | undefined",
                                      "schema": "string | undefined"
                                    },
                                    "onEscapeKeyDown": {
                                      "name": "onEscapeKeyDown",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: KeyboardEvent) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: KeyboardEvent) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: KeyboardEvent): void",
                                            "schema": [
                                              {
                                                "kind": "object",
                                                "type": "KeyboardEvent",
                                                "schema": {}
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onPointerDownOutside": {
                                      "name": "onPointerDownOutside",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: Event) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: Event) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: Event): void",
                                            "schema": [
                                              {
                                                "kind": "object",
                                                "type": "Event",
                                                "schema": {}
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "arrow": {
                            "name": "arrow",
                            "global": false,
                            "description": "Display an arrow alongside the tooltip.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "false",
                                "2": "true",
                                "3": "Omit<ATooltipArrowProps, 'as' | 'asChild'>"
                              }
                            }
                          },
                          "portal": {
                            "name": "portal",
                            "global": false,
                            "description": "Render the tooltip in a portal.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true"
                              }
                            ],
                            "required": false,
                            "type": "string | boolean | HTMLElement | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "string | boolean | HTMLElement | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "string",
                                "2": "false",
                                "3": "true",
                                "4": {
                                  "kind": "object",
                                  "type": "HTMLElement",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "reference": {
                            "name": "reference",
                            "global": false,
                            "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
                            "tags": [],
                            "required": false,
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "ReferenceElement | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "Element",
                                "2": {
                                  "kind": "object",
                                  "type": "VirtualElement",
                                  "schema": {
                                    "getBoundingClientRect": {
                                      "name": "getBoundingClientRect",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                      "schema": {
                                        "kind": "event",
                                        "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                      }
                                    },
                                    "getClientRects": {
                                      "name": "getClientRects",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                          }
                                        }
                                      }
                                    },
                                    "contextElement": {
                                      "name": "contextElement",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "Element | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "Element | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "Element"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "pohon": {
                            "name": "pohon",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; }"
                              }
                            }
                          },
                          "defaultOpen": {
                            "name": "defaultOpen",
                            "global": false,
                            "description": "The open state of the tooltip when it is initially rendered.\nUse when you do not need to control its open state.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "open": {
                            "name": "open",
                            "global": false,
                            "description": "The controlled open state of the tooltip.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "delayDuration": {
                            "name": "delayDuration",
                            "global": false,
                            "description": "Override the duration given to the `Provider` to customise\nthe open delay for a specific tooltip.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "700"
                              }
                            ],
                            "required": false,
                            "type": "number | undefined",
                            "schema": "number | undefined"
                          },
                          "disableHoverableContent": {
                            "name": "disableHoverableContent",
                            "global": false,
                            "description": "Prevents Tooltip.Content from remaining open when hovering.\nDisabling this has accessibility consequences. Inherits\nfrom Tooltip.Provider.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "disableClosingTrigger": {
                            "name": "disableClosingTrigger",
                            "global": false,
                            "description": "When `true`, clicking on trigger will not close the content.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "disabled": {
                            "name": "disabled",
                            "global": false,
                            "description": "When `true`, disable tooltip",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "ignoreNonKeyboardFocus": {
                            "name": "ignoreNonKeyboardFocus",
                            "global": false,
                            "description": "Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the `:focus-visible` selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          }
                        }
                      }
                    }
                  }
                },
                "popover": {
                  "name": "popover",
                  "global": false,
                  "description": "Display a popover on the item when the menu is collapsed with the children list.\nThis has priority over the global `popover` prop.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | PPopoverProps | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "boolean | PPopoverProps | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "false",
                      "2": "true",
                      "3": {
                        "kind": "object",
                        "type": "PPopoverProps",
                        "schema": {
                          "mode": {
                            "name": "mode",
                            "global": false,
                            "description": "The display mode of the popover.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'click'"
                              }
                            ],
                            "required": false,
                            "type": "'click' | 'hover' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'click' | 'hover' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'click'",
                                "2": "'hover'"
                              }
                            }
                          },
                          "content": {
                            "name": "content",
                            "global": false,
                            "description": "The content of the popover.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                              }
                            ],
                            "required": false,
                            "type": "(Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "(Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "object",
                                  "type": "Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>",
                                  "schema": {
                                    "sticky": {
                                      "name": "sticky",
                                      "global": false,
                                      "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'partial'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'partial' | 'always' | undefined",
                                      "schema": "'partial' | 'always' | undefined"
                                    },
                                    "side": {
                                      "name": "side",
                                      "global": false,
                                      "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'top'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Side | undefined",
                                      "schema": "Side | undefined"
                                    },
                                    "sideOffset": {
                                      "name": "sideOffset",
                                      "global": false,
                                      "description": "The distance in pixels from the trigger.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": "number | undefined"
                                    },
                                    "sideFlip": {
                                      "name": "sideFlip",
                                      "global": false,
                                      "description": "Flip to the opposite side when colliding with boundary.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "true"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "align": {
                                      "name": "align",
                                      "global": false,
                                      "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'center'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Align | undefined",
                                      "schema": "Align | undefined"
                                    },
                                    "alignOffset": {
                                      "name": "alignOffset",
                                      "global": false,
                                      "description": "An offset in pixels from the `start` or `end` alignment options.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": "number | undefined"
                                    },
                                    "alignFlip": {
                                      "name": "alignFlip",
                                      "global": false,
                                      "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "true"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "avoidCollisions": {
                                      "name": "avoidCollisions",
                                      "global": false,
                                      "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "true"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "collisionBoundary": {
                                      "name": "collisionBoundary",
                                      "global": false,
                                      "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "Array"
                                        }
                                      ],
                                      "required": false,
                                      "type": "Element | (Element | null)[] | null | undefined",
                                      "schema": "Element | (Element | null)[] | null | undefined"
                                    },
                                    "collisionPadding": {
                                      "name": "collisionPadding",
                                      "global": false,
                                      "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | Partial<Record<Side, number>> | undefined",
                                      "schema": "number | Partial<Record<Side, number>> | undefined"
                                    },
                                    "arrowPadding": {
                                      "name": "arrowPadding",
                                      "global": false,
                                      "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "0"
                                        }
                                      ],
                                      "required": false,
                                      "type": "number | undefined",
                                      "schema": "number | undefined"
                                    },
                                    "hideWhenDetached": {
                                      "name": "hideWhenDetached",
                                      "global": false,
                                      "description": "Whether to hide the content when the trigger becomes fully occluded.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "false"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "positionStrategy": {
                                      "name": "positionStrategy",
                                      "global": false,
                                      "description": "The type of CSS position property to use.",
                                      "tags": [],
                                      "required": false,
                                      "type": "'fixed' | 'absolute' | undefined",
                                      "schema": "'fixed' | 'absolute' | undefined"
                                    },
                                    "updatePositionStrategy": {
                                      "name": "updatePositionStrategy",
                                      "global": false,
                                      "description": "Strategy to update the position of the floating element on every animation frame.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'optimized'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'always' | 'optimized' | undefined",
                                      "schema": "'always' | 'optimized' | undefined"
                                    },
                                    "disableUpdateOnLayoutShift": {
                                      "name": "disableUpdateOnLayoutShift",
                                      "global": false,
                                      "description": "Whether to disable the update position for the content when the layout shifted.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "false"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "prioritizePosition": {
                                      "name": "prioritizePosition",
                                      "global": false,
                                      "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "false"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "reference": {
                                      "name": "reference",
                                      "global": false,
                                      "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                                      "tags": [],
                                      "required": false,
                                      "type": "ReferenceElement | undefined",
                                      "schema": "ReferenceElement | undefined"
                                    },
                                    "disableOutsidePointerEvents": {
                                      "name": "disableOutsidePointerEvents",
                                      "global": false,
                                      "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "trapFocus": {
                                      "name": "trapFocus",
                                      "global": false,
                                      "description": "Whether focus should be trapped within the `AMenuContent`",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "false"
                                        }
                                      ],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "onEscapeKeyDown": {
                                      "name": "onEscapeKeyDown",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: KeyboardEvent) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: KeyboardEvent) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: KeyboardEvent): void",
                                            "schema": [
                                              "KeyboardEvent"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onPointerDownOutside": {
                                      "name": "onPointerDownOutside",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: PointerDownOutsideEvent): void",
                                            "schema": [
                                              "PointerDownOutsideEvent"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onFocusOutside": {
                                      "name": "onFocusOutside",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: FocusOutsideEvent) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: FocusOutsideEvent) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: FocusOutsideEvent): void",
                                            "schema": [
                                              "FocusOutsideEvent"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onInteractOutside": {
                                      "name": "onInteractOutside",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                            "schema": [
                                              {
                                                "kind": "enum",
                                                "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                                "schema": [
                                                  "PointerDownOutsideEvent",
                                                  "FocusOutsideEvent"
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onOpenAutoFocus": {
                                      "name": "onOpenAutoFocus",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: Event) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: Event) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: Event): void",
                                            "schema": [
                                              "Event"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "onCloseAutoFocus": {
                                      "name": "onCloseAutoFocus",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "((event: Event) => void) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((event: Event) => void) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(event: Event): void",
                                            "schema": [
                                              "Event"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "arrow": {
                            "name": "arrow",
                            "global": false,
                            "description": "Display an arrow alongside the popover.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | Omit<APopoverArrowProps, 'as' | 'asChild'> | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "boolean | Omit<APopoverArrowProps, 'as' | 'asChild'> | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "false",
                                "2": "true",
                                "3": "Omit<APopoverArrowProps, 'as' | 'asChild'>"
                              }
                            }
                          },
                          "portal": {
                            "name": "portal",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true\nRender the popover in a portal."
                              }
                            ],
                            "required": false,
                            "type": "string | boolean | HTMLElement | undefined",
                            "schema": "string | boolean | HTMLElement | undefined"
                          },
                          "reference": {
                            "name": "reference",
                            "global": false,
                            "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
                            "tags": [],
                            "required": false,
                            "type": "ReferenceElement | undefined",
                            "schema": "ReferenceElement | undefined"
                          },
                          "dismissible": {
                            "name": "dismissible",
                            "global": false,
                            "description": "When `false`, the popover will not close when clicking outside or pressing escape.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "pohon": {
                            "name": "pohon",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "{ content?: ClassValue; arrow?: ClassValue; } | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "{ content?: ClassValue; arrow?: ClassValue; } | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "{ content?: ClassValue; arrow?: ClassValue; }"
                              }
                            }
                          },
                          "defaultOpen": {
                            "name": "defaultOpen",
                            "global": false,
                            "description": "The open state of the popover when it is initially rendered. Use when you do not need to control its open state.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "open": {
                            "name": "open",
                            "global": false,
                            "description": "The controlled open state of the popover.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "modal": {
                            "name": "modal",
                            "global": false,
                            "description": "The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "openDelay": {
                            "name": "openDelay",
                            "global": false,
                            "description": "The duration from when the mouse enters the trigger until the hover card opens.",
                            "tags": [],
                            "required": false,
                            "type": "number | undefined",
                            "schema": "number | undefined"
                          },
                          "closeDelay": {
                            "name": "closeDelay",
                            "global": false,
                            "description": "The duration from when the mouse leaves the trigger or content until the hover card closes.",
                            "tags": [],
                            "required": false,
                            "type": "number | undefined",
                            "schema": "number | undefined"
                          }
                        }
                      }
                    }
                  }
                },
                "trailingIcon": {
                  "name": "trailingIcon",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "IconifyIcon"
                    }
                  ],
                  "required": false,
                  "type": "string | object | undefined",
                  "schema": "string | object | undefined"
                },
                "type": {
                  "name": "type",
                  "global": false,
                  "description": "The type of the item.\nThe `label` type is only displayed in `vertical` orientation.\nThe `trigger` type is used to force the item to be collapsible when its a link in `vertical` orientation.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'link'"
                    }
                  ],
                  "required": false,
                  "type": "'label' | 'link' | 'trigger' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'label' | 'link' | 'trigger' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'label'",
                      "2": "'link'",
                      "3": "'trigger'"
                    }
                  }
                },
                "slot": {
                  "name": "slot",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "value": {
                  "name": "value",
                  "global": false,
                  "description": "The value of the item. Avoid using `index` as the value to prevent conflicts in horizontal orientation with Reka pohon.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "`item-${index}`"
                    }
                  ],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "children": {
                  "name": "children",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "PNavigationMenuChildItem[] | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "PNavigationMenuChildItem[] | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "array",
                        "type": "PNavigationMenuChildItem[]",
                        "schema": [
                          {
                            "kind": "object",
                            "type": "PNavigationMenuChildItem",
                            "schema": {
                              "description": {
                                "name": "description",
                                "global": false,
                                "description": "Description is only used when `orientation` is `horizontal`.",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "defaultOpen": {
                  "name": "defaultOpen",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "open": {
                  "name": "open",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "onSelect": {
                  "name": "onSelect",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "((event: Event) => void) | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "event",
                        "type": "(event: Event): void",
                        "schema": []
                      }
                    }
                  }
                },
                "class": {
                  "name": "class",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "any",
                  "schema": "any"
                },
                "pohon": {
                  "name": "pohon",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "Pick<{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; }, 'label' | 'link' | 'item' | 'content' | 'linkLeadingIcon' | 'linkLeadingAvatar' | 'linkLeadingAvatarSize' | 'linkLabel' | 'linkLabelExternalIcon' | 'linkTrailing' | 'linkTrailingBadge' | 'linkTrailingBadgeSize' | 'linkTrailingIcon' | 'childList' | 'childLabel' | 'childItem' | 'childLink' | 'childLinkWrapper' | 'childLinkIcon' | 'childLinkLabel' | 'childLinkLabelExternalIcon' | 'childLinkDescription'> | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "Pick<{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; }, 'label' | 'link' | 'item' | 'content' | 'linkLeadingIcon' | 'linkLeadingAvatar' | 'linkLeadingAvatarSize' | 'linkLabel' | 'linkLabelExternalIcon' | 'linkTrailing' | 'linkTrailingBadge' | 'linkTrailingBadgeSize' | 'linkTrailingIcon' | 'childList' | 'childLabel' | 'childItem' | 'childLink' | 'childLinkWrapper' | 'childLinkIcon' | 'childLinkLabel' | 'childLinkLabelExternalIcon' | 'childLinkDescription'> | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "Pick<{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; }, 'label' | 'link' | 'item' | 'content' | 'linkLeadingIcon' | 'linkLeadingAvatar' | 'linkLeadingAvatarSize' | 'linkLabel' | 'linkLabelExternalIcon' | 'linkTrailing' | 'linkTrailingBadge' | 'linkTrailingBadgeSize' | 'linkTrailingIcon' | 'childList' | 'childLabel' | 'childItem' | 'childLink' | 'childLinkWrapper' | 'childLinkIcon' | 'childLinkLabel' | 'childLinkLabelExternalIcon' | 'childLinkDescription'>"
                    }
                  }
                },
                "disabled": {
                  "name": "disabled",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "as": {
                  "name": "as",
                  "global": false,
                  "description": "The element or component this component should render as when not a link.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'button'"
                    }
                  ],
                  "required": false,
                  "type": "APrimitiveAsTag | Component | undefined",
                  "schema": "APrimitiveAsTag | Component | undefined"
                },
                "replace": {
                  "name": "replace",
                  "global": false,
                  "description": "Calls `router.replace` instead of `router.push`.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "to": {
                  "name": "to",
                  "global": false,
                  "description": "Route Location the link should navigate to when clicked on.",
                  "tags": [],
                  "required": false,
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string",
                      "2": {
                        "kind": "object",
                        "type": "RouteLocationAsRelativeGeneric",
                        "schema": {
                          "name": {
                            "name": "name",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "kind": "enum",
                              "type": "RouteRecordNameGeneric",
                              "schema": {
                                "0": "undefined",
                                "1": "string",
                                "2": "symbol"
                              }
                            }
                          },
                          "params": {
                            "name": "params",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "RouteParamsRawGeneric | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "RouteParamsRawGeneric"
                              }
                            }
                          },
                          "path": {
                            "name": "path",
                            "global": false,
                            "description": "A relative path to the current location. This property should be removed",
                            "tags": [],
                            "required": false,
                            "type": "undefined",
                            "schema": "undefined"
                          },
                          "query": {
                            "name": "query",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "LocationQueryRaw | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "LocationQueryRaw"
                              }
                            }
                          },
                          "hash": {
                            "name": "hash",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "replace": {
                            "name": "replace",
                            "global": false,
                            "description": "Replace the entry in the history instead of pushing a new entry",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "force": {
                            "name": "force",
                            "global": false,
                            "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "state": {
                            "name": "state",
                            "global": false,
                            "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                            "tags": [],
                            "required": false,
                            "type": "HistoryState | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "HistoryState | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "object",
                                  "type": "HistoryState",
                                  "schema": {}
                                }
                              }
                            }
                          }
                        }
                      },
                      "3": {
                        "kind": "object",
                        "type": "RouteLocationAsPathGeneric",
                        "schema": {
                          "path": {
                            "name": "path",
                            "global": false,
                            "description": "Percentage encoded pathname section of the URL.",
                            "tags": [],
                            "required": true,
                            "type": "string",
                            "schema": "string"
                          },
                          "query": {
                            "name": "query",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "LocationQueryRaw | undefined",
                            "schema": "LocationQueryRaw | undefined"
                          },
                          "hash": {
                            "name": "hash",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "replace": {
                            "name": "replace",
                            "global": false,
                            "description": "Replace the entry in the history instead of pushing a new entry",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "force": {
                            "name": "force",
                            "global": false,
                            "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "state": {
                            "name": "state",
                            "global": false,
                            "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                            "tags": [],
                            "required": false,
                            "type": "HistoryState | undefined",
                            "schema": "HistoryState | undefined"
                          }
                        }
                      }
                    }
                  }
                },
                "activeClass": {
                  "name": "activeClass",
                  "global": false,
                  "description": "Class to apply when the link is active",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "exactActiveClass": {
                  "name": "exactActiveClass",
                  "global": false,
                  "description": "Class to apply when the link is exact active",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "ariaCurrentValue": {
                  "name": "ariaCurrentValue",
                  "global": false,
                  "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "`'page'`"
                    }
                  ],
                  "required": false,
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'page'",
                      "2": "'step'",
                      "3": "'location'",
                      "4": "'date'",
                      "5": "'time'",
                      "6": "'true'",
                      "7": "'false'"
                    }
                  }
                },
                "viewTransition": {
                  "name": "viewTransition",
                  "global": false,
                  "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "active": {
                  "name": "active",
                  "global": false,
                  "description": "Force the link to be active independent of the current route.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "exact": {
                  "name": "exact",
                  "global": false,
                  "description": "Will only be active if the current route is an exact match.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "exactQuery": {
                  "name": "exactQuery",
                  "global": false,
                  "description": "Allows controlling how the current route query sets the link as active.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "boolean | 'partial' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "false",
                      "2": "true",
                      "3": "'partial'"
                    }
                  }
                },
                "exactHash": {
                  "name": "exactHash",
                  "global": false,
                  "description": "Will only be active if the current route hash is an exact match.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "inactiveClass": {
                  "name": "inactiveClass",
                  "global": false,
                  "description": "The class to apply when the link is inactive.",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "href": {
                  "name": "href",
                  "global": false,
                  "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                  "tags": [],
                  "required": false,
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
                },
                "external": {
                  "name": "external",
                  "global": false,
                  "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "target": {
                  "name": "target",
                  "global": false,
                  "description": "Where to display the linked URL, as the name for a browsing context.",
                  "tags": [],
                  "required": false,
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "null",
                      "2": "string & {}",
                      "3": "'_blank'",
                      "4": "'_parent'",
                      "5": "'_self'",
                      "6": "'_top'"
                    }
                  }
                },
                "rel": {
                  "name": "rel",
                  "global": false,
                  "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                  "tags": [],
                  "required": false,
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "null",
                      "2": "string & {}",
                      "3": "'noopener'",
                      "4": "'noreferrer'",
                      "5": "'nofollow'",
                      "6": "'sponsored'",
                      "7": "'ugc'"
                    }
                  }
                },
                "noRel": {
                  "name": "noRel",
                  "global": false,
                  "description": "If set to true, no rel attribute will be added to the link",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "prefetchedClass": {
                  "name": "prefetchedClass",
                  "global": false,
                  "description": "A class to apply to links that have been prefetched.",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "prefetch": {
                  "name": "prefetch",
                  "global": false,
                  "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "prefetchOn": {
                  "name": "prefetchOn",
                  "global": false,
                  "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                  "tags": [],
                  "required": false,
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'visibility'",
                      "2": "'interaction'",
                      "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                    }
                  }
                },
                "noPrefetch": {
                  "name": "noPrefetch",
                  "global": false,
                  "description": "Escape hatch to disable `prefetch` attribute.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                }
              }
            }
          ]
        },
        "2": {
          "kind": "array",
          "type": "PNavigationMenuItem[][]",
          "schema": [
            "PNavigationMenuItem[]"
          ]
        }
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "The key used to get the label from the item.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PNavigationMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PNavigationMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The controlled value of the menu item to activate. Can be used as `v-model`.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "orientation",
    "global": false,
    "description": "The orientation of the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'horizontal'"
      }
    ],
    "required": false,
    "type": "Orientation | undefined",
    "schema": {
      "kind": "enum",
      "type": "Orientation | undefined",
      "schema": {
        "0": "undefined",
        "1": "'vertical'",
        "2": "'horizontal'"
      }
    },
    "default": "'horizontal'"
  },
  {
    "name": "popover",
    "global": false,
    "description": "Display a popover on the items when the menu is collapsed with the children list.\n`{ mode: 'hover', content: { side: 'right', align: 'start', alignOffset: 2 } }`{lang='ts-type'}",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | PPopoverProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | PPopoverProps | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "object",
          "type": "PPopoverProps",
          "schema": {
            "mode": {
              "name": "mode",
              "global": false,
              "description": "The display mode of the popover.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'click'"
                }
              ],
              "required": false,
              "type": "'click' | 'hover' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'click' | 'hover' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'click'",
                  "2": "'hover'"
                }
              }
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the popover.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                }
              ],
              "required": false,
              "type": "(Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "(Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Omit<APopoverContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<PopoverContentImplEmits>>",
                    "schema": {
                      "sticky": {
                        "name": "sticky",
                        "global": false,
                        "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'partial'"
                          }
                        ],
                        "required": false,
                        "type": "'partial' | 'always' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'partial'",
                            "2": "'always'"
                          }
                        }
                      },
                      "side": {
                        "name": "side",
                        "global": false,
                        "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top'"
                          }
                        ],
                        "required": false,
                        "type": "Side | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Side | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top'",
                            "2": "'bottom'",
                            "3": "'left'",
                            "4": "'right'"
                          }
                        }
                      },
                      "sideOffset": {
                        "name": "sideOffset",
                        "global": false,
                        "description": "The distance in pixels from the trigger.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number"
                          }
                        }
                      },
                      "sideFlip": {
                        "name": "sideFlip",
                        "global": false,
                        "description": "Flip to the opposite side when colliding with boundary.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "align": {
                        "name": "align",
                        "global": false,
                        "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'center'"
                          }
                        ],
                        "required": false,
                        "type": "Align | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Align | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'center'",
                            "2": "'start'",
                            "3": "'end'"
                          }
                        }
                      },
                      "alignOffset": {
                        "name": "alignOffset",
                        "global": false,
                        "description": "An offset in pixels from the `start` or `end` alignment options.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "alignFlip": {
                        "name": "alignFlip",
                        "global": false,
                        "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "avoidCollisions": {
                        "name": "avoidCollisions",
                        "global": false,
                        "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "collisionBoundary": {
                        "name": "collisionBoundary",
                        "global": false,
                        "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "Array"
                          }
                        ],
                        "required": false,
                        "type": "Element | (Element | null)[] | null | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "null",
                            "2": {
                              "kind": "object",
                              "type": "Element",
                              "schema": {}
                            },
                            "3": {
                              "kind": "array",
                              "type": "(Element | null)[]",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "Element | null",
                                  "schema": [
                                    "null",
                                    "Element"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "collisionPadding": {
                        "name": "collisionPadding",
                        "global": false,
                        "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | Partial<Record<Side, number>> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number",
                            "2": "Partial<Record<Side, number>>"
                          }
                        }
                      },
                      "arrowPadding": {
                        "name": "arrowPadding",
                        "global": false,
                        "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "hideWhenDetached": {
                        "name": "hideWhenDetached",
                        "global": false,
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "positionStrategy": {
                        "name": "positionStrategy",
                        "global": false,
                        "description": "The type of CSS position property to use.",
                        "tags": [],
                        "required": false,
                        "type": "'fixed' | 'absolute' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'fixed'",
                            "2": "'absolute'"
                          }
                        }
                      },
                      "updatePositionStrategy": {
                        "name": "updatePositionStrategy",
                        "global": false,
                        "description": "Strategy to update the position of the floating element on every animation frame.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'optimized'"
                          }
                        ],
                        "required": false,
                        "type": "'always' | 'optimized' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'always'",
                            "2": "'optimized'"
                          }
                        }
                      },
                      "disableUpdateOnLayoutShift": {
                        "name": "disableUpdateOnLayoutShift",
                        "global": false,
                        "description": "Whether to disable the update position for the content when the layout shifted.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "prioritizePosition": {
                        "name": "prioritizePosition",
                        "global": false,
                        "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "reference": {
                        "name": "reference",
                        "global": false,
                        "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                        "tags": [],
                        "required": false,
                        "type": "ReferenceElement | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "ReferenceElement | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element",
                            "2": {
                              "kind": "object",
                              "type": "VirtualElement",
                              "schema": {
                                "getBoundingClientRect": {
                                  "name": "getBoundingClientRect",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": true,
                                  "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                  "schema": {
                                    "kind": "event",
                                    "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                  }
                                },
                                "getClientRects": {
                                  "name": "getClientRects",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                      }
                                    }
                                  }
                                },
                                "contextElement": {
                                  "name": "contextElement",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "Element | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "Element | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "Element"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "disableOutsidePointerEvents": {
                        "name": "disableOutsidePointerEvents",
                        "global": false,
                        "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "trapFocus": {
                        "name": "trapFocus",
                        "global": false,
                        "description": "Whether focus should be trapped within the `AMenuContent`",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "onEscapeKeyDown": {
                        "name": "onEscapeKeyDown",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: KeyboardEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: KeyboardEvent): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "KeyboardEvent",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onPointerDownOutside": {
                        "name": "onPointerDownOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: PointerDownOutsideEvent): void",
                              "schema": [
                                "PointerDownOutsideEvent"
                              ]
                            }
                          }
                        }
                      },
                      "onFocusOutside": {
                        "name": "onFocusOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: FocusOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: FocusOutsideEvent): void",
                              "schema": [
                                "FocusOutsideEvent"
                              ]
                            }
                          }
                        }
                      },
                      "onInteractOutside": {
                        "name": "onInteractOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                  "schema": [
                                    "PointerDownOutsideEvent",
                                    "FocusOutsideEvent"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onOpenAutoFocus": {
                        "name": "onOpenAutoFocus",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "Event",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onCloseAutoFocus": {
                        "name": "onCloseAutoFocus",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                "Event"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "arrow": {
              "name": "arrow",
              "global": false,
              "description": "Display an arrow alongside the popover.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | Omit<APopoverArrowProps, 'as' | 'asChild'> | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | Omit<APopoverArrowProps, 'as' | 'asChild'> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "Omit<APopoverArrowProps, 'as' | 'asChild'>"
                }
              }
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true\nRender the popover in a portal."
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | boolean | HTMLElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "false",
                  "3": "true",
                  "4": {
                    "kind": "object",
                    "type": "HTMLElement",
                    "schema": {}
                  }
                }
              }
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": "ReferenceElement | undefined"
            },
            "dismissible": {
              "name": "dismissible",
              "global": false,
              "description": "When `false`, the popover will not close when clicking outside or pressing escape.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ content?: ClassValue; arrow?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ content?: ClassValue; arrow?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ content?: ClassValue; arrow?: ClassValue; }"
                }
              }
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the popover when it is initially rendered. Use when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the popover.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "modal": {
              "name": "modal",
              "global": false,
              "description": "The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "openDelay": {
              "name": "openDelay",
              "global": false,
              "description": "The duration from when the mouse enters the trigger until the hover card opens.",
              "tags": [],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "closeDelay": {
              "name": "closeDelay",
              "global": false,
              "description": "The duration from when the mouse leaves the trigger or content until the hover card closes.",
              "tags": [],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "skipDelayDuration",
    "global": false,
    "description": "How much time a user has to enter another trigger without incurring a delay again.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "300"
      }
    ],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    }
  },
  {
    "name": "tooltip",
    "global": false,
    "description": "Display a tooltip on the items when the menu is collapsed with the label of the item.\n`{ delayDuration: 0, content: { side: 'right' } }`{lang='ts-type'}",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | PTooltipProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | PTooltipProps | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "object",
          "type": "PTooltipProps",
          "schema": {
            "text": {
              "name": "text",
              "global": false,
              "description": "The text content of the tooltip.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "kbds": {
              "name": "kbds",
              "global": false,
              "description": "The keyboard keys to display in the tooltip.",
              "tags": [],
              "required": false,
              "type": "(string | undefined)[] | PKbdProps[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "array",
                    "type": "(string | undefined)[]",
                    "schema": [
                      "string | undefined"
                    ]
                  },
                  "2": {
                    "kind": "array",
                    "type": "PKbdProps[]",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "PKbdProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'kbd'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'a'",
                                "2": "'button'",
                                "3": "'div'",
                                "4": "'form'",
                                "5": "'h2'",
                                "6": "'h3'",
                                "7": "'img'",
                                "8": "'input'",
                                "9": "'label'",
                                "10": "'li'",
                                "11": "'nav'",
                                "12": "'ol'",
                                "13": "'p'",
                                "14": "'span'",
                                "15": "'svg'",
                                "16": "'template'",
                                "17": "'ul'",
                                "18": {
                                  "kind": "object",
                                  "type": "string & {}",
                                  "schema": {}
                                },
                                "19": {
                                  "kind": "object",
                                  "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                  "schema": {
                                    "beforeRouteEnter": {
                                      "name": "beforeRouteEnter",
                                      "global": false,
                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteUpdate": {
                                      "name": "beforeRouteUpdate",
                                      "global": false,
                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteLeave": {
                                      "name": "beforeRouteLeave",
                                      "global": false,
                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": "NavigationGuard | undefined"
                                    },
                                    "head": {
                                      "name": "head",
                                      "global": false,
                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                      "tags": [],
                                      "required": false,
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "20": {
                                  "kind": "event",
                                  "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                  "schema": []
                                },
                                "21": {
                                  "kind": "object",
                                  "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "value": {
                            "name": "value",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "color": {
                            "name": "color",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'neutral'"
                              }
                            ],
                            "required": false,
                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'error'",
                                "2": "'primary'",
                                "3": "'secondary'",
                                "4": "'success'",
                                "5": "'info'",
                                "6": "'warning'",
                                "7": "'neutral'"
                              }
                            }
                          },
                          "variant": {
                            "name": "variant",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'outline'"
                              }
                            ],
                            "required": false,
                            "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'solid'",
                                "2": "'outline'",
                                "3": "'soft'",
                                "4": "'subtle'"
                              }
                            }
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | 'sm' | 'lg' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'sm'",
                                "3": "'lg'"
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
                }
              ],
              "required": false,
              "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "(Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Omit<ATooltipContentProps, 'as' | 'asChild'> & Partial<EmitsToProps<TooltipContentImplEmits>>",
                    "schema": {
                      "sticky": {
                        "name": "sticky",
                        "global": false,
                        "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'partial'"
                          }
                        ],
                        "required": false,
                        "type": "'partial' | 'always' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'partial'",
                            "2": "'always'"
                          }
                        }
                      },
                      "forceMount": {
                        "name": "forceMount",
                        "global": false,
                        "description": "Used to force mounting when more control is needed. Useful when\ncontrolling animation with Vue animation libraries.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "side": {
                        "name": "side",
                        "global": false,
                        "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top'"
                          }
                        ],
                        "required": false,
                        "type": "Side | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Side | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top'",
                            "2": "'bottom'",
                            "3": "'left'",
                            "4": "'right'"
                          }
                        }
                      },
                      "sideOffset": {
                        "name": "sideOffset",
                        "global": false,
                        "description": "The distance in pixels from the trigger.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number"
                          }
                        }
                      },
                      "align": {
                        "name": "align",
                        "global": false,
                        "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'center'"
                          }
                        ],
                        "required": false,
                        "type": "Align | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Align | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'center'",
                            "2": "'start'",
                            "3": "'end'"
                          }
                        }
                      },
                      "alignOffset": {
                        "name": "alignOffset",
                        "global": false,
                        "description": "An offset in pixels from the `start` or `end` alignment options.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "avoidCollisions": {
                        "name": "avoidCollisions",
                        "global": false,
                        "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "true"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "collisionBoundary": {
                        "name": "collisionBoundary",
                        "global": false,
                        "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "Array"
                          }
                        ],
                        "required": false,
                        "type": "Element | (Element | null)[] | null | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "null",
                            "2": {
                              "kind": "object",
                              "type": "Element",
                              "schema": {}
                            },
                            "3": {
                              "kind": "array",
                              "type": "(Element | null)[]",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "Element | null",
                                  "schema": [
                                    "null",
                                    "Element"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "collisionPadding": {
                        "name": "collisionPadding",
                        "global": false,
                        "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | Partial<Record<Side, number>> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "number",
                            "2": "Partial<Record<Side, number>>"
                          }
                        }
                      },
                      "arrowPadding": {
                        "name": "arrowPadding",
                        "global": false,
                        "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "0"
                          }
                        ],
                        "required": false,
                        "type": "number | undefined",
                        "schema": "number | undefined"
                      },
                      "hideWhenDetached": {
                        "name": "hideWhenDetached",
                        "global": false,
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "false"
                          }
                        ],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "positionStrategy": {
                        "name": "positionStrategy",
                        "global": false,
                        "description": "The type of CSS position property to use.",
                        "tags": [],
                        "required": false,
                        "type": "'fixed' | 'absolute' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'fixed'",
                            "2": "'absolute'"
                          }
                        }
                      },
                      "updatePositionStrategy": {
                        "name": "updatePositionStrategy",
                        "global": false,
                        "description": "Strategy to update the position of the floating element on every animation frame.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'optimized'"
                          }
                        ],
                        "required": false,
                        "type": "'always' | 'optimized' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'always'",
                            "2": "'optimized'"
                          }
                        }
                      },
                      "ariaLabel": {
                        "name": "ariaLabel",
                        "global": false,
                        "description": "By default, screenreaders will announce the content inside\nthe component. If this is not descriptive enough, or you have\ncontent that cannot be announced, use aria-label as a more\ndescriptive label.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "String"
                          }
                        ],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "onEscapeKeyDown": {
                        "name": "onEscapeKeyDown",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: KeyboardEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: KeyboardEvent): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "KeyboardEvent",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onPointerDownOutside": {
                        "name": "onPointerDownOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "Event",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "arrow": {
              "name": "arrow",
              "global": false,
              "description": "Display an arrow alongside the tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | Omit<ATooltipArrowProps, 'as' | 'asChild'> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "Omit<ATooltipArrowProps, 'as' | 'asChild'>"
                }
              }
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the tooltip in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | boolean | HTMLElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "false",
                  "3": "true",
                  "4": {
                    "kind": "object",
                    "type": "HTMLElement",
                    "schema": {}
                  }
                }
              }
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The reference (or anchor) element that is being referred to for positioning.\n\nIf not provided will use the current component as anchor.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ content?: ClassValue; arrow?: ClassValue; text?: ClassValue; kbds?: ClassValue; kbdsSize?: ClassValue; }"
                }
              }
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the tooltip when it is initially rendered.\nUse when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the tooltip.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "delayDuration": {
              "name": "delayDuration",
              "global": false,
              "description": "Override the duration given to the `Provider` to customise\nthe open delay for a specific tooltip.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "700"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "disableHoverableContent": {
              "name": "disableHoverableContent",
              "global": false,
              "description": "Prevents Tooltip.Content from remaining open when hovering.\nDisabling this has accessibility consequences. Inherits\nfrom Tooltip.Provider.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disableClosingTrigger": {
              "name": "disableClosingTrigger",
              "global": false,
              "description": "When `true`, clicking on trigger will not close the content.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "When `true`, disable tooltip",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "ignoreNonKeyboardFocus": {
              "name": "ignoreNonKeyboardFocus",
              "global": false,
              "description": "Prevent the tooltip from opening if the focus did not come from\nthe keyboard by matching against the `:focus-visible` selector.\nThis is useful if you want to avoid opening it when switching\nbrowser tabs or closing a dialog.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "trailingIcon",
    "global": false,
    "description": "The icon displayed to open the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDown"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "type",
    "global": false,
    "description": "Determines whether a 'single' or 'multiple' items can be pressed at a time.\n\nThis prop will overwrite the inferred type from `modelValue` and `defaultValue`.",
    "tags": [],
    "required": false,
    "type": "SingleOrMultipleType | undefined",
    "schema": {
      "kind": "enum",
      "type": "SingleOrMultipleType | undefined",
      "schema": {
        "0": "undefined",
        "1": "'multiple'",
        "2": "'single'"
      }
    },
    "default": "'multiple'"
  },
  {
    "name": "unmountOnHide",
    "global": false,
    "description": "When `true`, the element will be unmounted on closed state.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "variant",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'pill'"
      }
    ],
    "required": false,
    "type": "'link' | 'pill' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'link' | 'pill' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'link'",
        "2": "'pill'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; list?: ClassValue; label?: ClassValue; item?: ClassValue; link?: ClassValue; linkLeadingIcon?: ClassValue; linkLeadingAvatar?: ClassValue; linkLeadingAvatarSize?: ClassValue; linkTrailing?: ClassValue; linkTrailingBadge?: ClassValue; linkTrailingBadgeSize?: ClassValue; linkTrailingIcon?: ClassValue; linkLabel?: ClassValue; linkLabelExternalIcon?: ClassValue; childList?: ClassValue; childLabel?: ClassValue; childItem?: ClassValue; childLink?: ClassValue; childLinkWrapper?: ClassValue; childLinkIcon?: ClassValue; childLinkLabel?: ClassValue; childLinkLabelExternalIcon?: ClassValue; childLinkDescription?: ClassValue; separator?: ClassValue; viewportWrapper?: ClassValue; viewport?: ClassValue; content?: ClassValue; indicator?: ClassValue; arrow?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "update:modelValue",
    "description": "",
    "type": "[value: string]"
  }
],
  "slots": [
  {
    "name": "item",
    "description": "",
    "type": "PNavigationMenuItem"
  },
  {
    "name": "index",
    "description": "",
    "type": "number"
  },
  {
    "name": "active",
    "description": "",
    "type": "boolean | undefined"
  }
]
}
