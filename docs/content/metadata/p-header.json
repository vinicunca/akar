{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'header'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    },
    "default": "'header'"
  },
  {
    "name": "menu",
    "global": false,
    "description": "The props for the header menu component.",
    "tags": [],
    "required": false,
    "type": "PDialogProps | PDrawerProps | PSlideoverProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PDialogProps | PDrawerProps | PSlideoverProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PDialogProps",
          "schema": {
            "title": {
              "name": "title",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "description": {
              "name": "description",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the dialog.",
              "tags": [],
              "required": false,
              "type": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>",
                    "schema": {
                      "disableOutsidePointerEvents": {
                        "name": "disableOutsidePointerEvents",
                        "global": false,
                        "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "onEscapeKeyDown": {
                        "name": "onEscapeKeyDown",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: KeyboardEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: KeyboardEvent): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "KeyboardEvent",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onPointerDownOutside": {
                        "name": "onPointerDownOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: PointerDownOutsideEvent): void",
                              "schema": [
                                "PointerDownOutsideEvent"
                              ]
                            }
                          }
                        }
                      },
                      "onFocusOutside": {
                        "name": "onFocusOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: FocusOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: FocusOutsideEvent): void",
                              "schema": [
                                "FocusOutsideEvent"
                              ]
                            }
                          }
                        }
                      },
                      "onInteractOutside": {
                        "name": "onInteractOutside",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                              "schema": [
                                {
                                  "kind": "enum",
                                  "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                  "schema": [
                                    "PointerDownOutsideEvent",
                                    "FocusOutsideEvent"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onOpenAutoFocus": {
                        "name": "onOpenAutoFocus",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                {
                                  "kind": "object",
                                  "type": "Event",
                                  "schema": {}
                                }
                              ]
                            }
                          }
                        }
                      },
                      "onCloseAutoFocus": {
                        "name": "onCloseAutoFocus",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "((event: Event) => void) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(event: Event): void",
                              "schema": [
                                "Event"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "overlay": {
              "name": "overlay",
              "global": false,
              "description": "Render an overlay behind the dialog.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "transition": {
              "name": "transition",
              "global": false,
              "description": "Animate the dialog when opening or closing.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "fullscreen": {
              "name": "fullscreen",
              "global": false,
              "description": "When `true`, the dialog will take up the full screen.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the dialog in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | boolean | HTMLElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "false",
                  "3": "true",
                  "4": {
                    "kind": "object",
                    "type": "HTMLElement",
                    "schema": {}
                  }
                }
              }
            },
            "close": {
              "name": "close",
              "global": false,
              "description": "Display a close button to dismiss the dialog.\n`{ size: 'md', color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | Partial<PButtonProps> | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | Partial<PButtonProps> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "Partial<PButtonProps>"
                }
              }
            },
            "closeIcon": {
              "name": "closeIcon",
              "global": false,
              "description": "The icon displayed in the close button.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.close"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "dismissible": {
              "name": "dismissible",
              "global": false,
              "description": "When `false`, the dialog will not close when clicking outside or pressing escape.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; }"
                }
              }
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the dialog. Can be binded as `v-model:open`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "modal": {
              "name": "modal",
              "global": false,
              "description": "The modality of the dialog When set to `true`, <br>\ninteraction with outside elements will be disabled and only dialog content will be visible to screen readers.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        },
        "2": {
          "kind": "object",
          "type": "PDrawerProps",
          "schema": {
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'div'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": {
                "kind": "enum",
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'a'",
                  "2": "'button'",
                  "3": "'div'",
                  "4": "'form'",
                  "5": "'h2'",
                  "6": "'h3'",
                  "7": "'img'",
                  "8": "'input'",
                  "9": "'label'",
                  "10": "'li'",
                  "11": "'nav'",
                  "12": "'ol'",
                  "13": "'p'",
                  "14": "'span'",
                  "15": "'svg'",
                  "16": "'template'",
                  "17": "'ul'",
                  "18": {
                    "kind": "object",
                    "type": "string & {}",
                    "schema": {}
                  },
                  "19": {
                    "kind": "object",
                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                    "schema": {
                      "beforeRouteEnter": {
                        "name": "beforeRouteEnter",
                        "global": false,
                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuardWithThis<undefined> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuardWithThis<undefined> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteUpdate": {
                        "name": "beforeRouteUpdate",
                        "global": false,
                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuard | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteLeave": {
                        "name": "beforeRouteLeave",
                        "global": false,
                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": "NavigationGuard | undefined"
                      },
                      "head": {
                        "name": "head",
                        "global": false,
                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                        "tags": [],
                        "required": false,
                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                              "schema": []
                            }
                          }
                        }
                      }
                    }
                  },
                  "20": {
                    "kind": "event",
                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                    "schema": []
                  },
                  "21": {
                    "kind": "object",
                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                    "schema": {}
                  }
                }
              }
            },
            "title": {
              "name": "title",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "description": {
              "name": "description",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "inset": {
              "name": "inset",
              "global": false,
              "description": "Whether to inset the drawer from the edges.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the drawer.",
              "tags": [],
              "required": false,
              "type": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined",
              "schema": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined"
            },
            "overlay": {
              "name": "overlay",
              "global": false,
              "description": "Render an overlay behind the drawer.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "handle": {
              "name": "handle",
              "global": false,
              "description": "Render a handle on the drawer.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the drawer in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": "string | boolean | HTMLElement | undefined"
            },
            "nested": {
              "name": "nested",
              "global": false,
              "description": "Whether the drawer is nested in another drawer.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ overlay?: ClassValue; content?: ClassValue; handle?: ClassValue; container?: ClassValue; header?: ClassValue; title?: ClassValue; description?: ClassValue; body?: ClassValue; footer?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ overlay?: ClassValue; content?: ClassValue; handle?: ClassValue; container?: ClassValue; header?: ClassValue; title?: ClassValue; description?: ClassValue; body?: ClassValue; footer?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ overlay?: ClassValue; content?: ClassValue; handle?: ClassValue; container?: ClassValue; header?: ClassValue; title?: ClassValue; description?: ClassValue; body?: ClassValue; footer?: ClassValue; }"
                }
              }
            },
            "fixed": {
              "name": "fixed",
              "global": false,
              "description": "When `true`, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "Opened by default, skips initial enter animation. Still reacts to `open` state changes",
              "tags": [
                {
                  "name": "default",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "modal": {
              "name": "modal",
              "global": false,
              "description": "When `false` it allows to interact with elements outside of the drawer without closing it.",
              "tags": [
                {
                  "name": "default",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "direction": {
              "name": "direction",
              "global": false,
              "description": "Direction of the drawer. Can be `top` or `bottom`, `left`, `right`.",
              "tags": [
                {
                  "name": "default",
                  "text": "'bottom'"
                }
              ],
              "required": false,
              "type": "ADrawerDirection | undefined",
              "schema": {
                "kind": "enum",
                "type": "ADrawerDirection | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "dismissible": {
              "name": "dismissible",
              "global": false,
              "description": "When `false` dragging, clicking outside, pressing esc, etc. will not close the drawer.\nUse this in combination with the `open` prop, otherwise you won't be able to open/close the drawer.",
              "tags": [
                {
                  "name": "default",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "activeSnapPoint": {
              "name": "activeSnapPoint",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | number | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | number | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string",
                  "3": "number"
                }
              }
            },
            "closeThreshold": {
              "name": "closeThreshold",
              "global": false,
              "description": "Number between 0 and 1 that determines when the drawer should be closed.\nExample: threshold of 0.5 would close the drawer if the user swiped for 50% of the height of the drawer or more.",
              "tags": [
                {
                  "name": "default",
                  "text": "0.25"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number"
                }
              }
            },
            "shouldScaleBackground": {
              "name": "shouldScaleBackground",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "setBackgroundColorOnScale": {
              "name": "setBackgroundColorOnScale",
              "global": false,
              "description": "When `false` we don't change body's background color when the drawer is open.",
              "tags": [
                {
                  "name": "default",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "scrollLockTimeout": {
              "name": "scrollLockTimeout",
              "global": false,
              "description": "Duration for which the drawer is not draggable after scrolling content inside of the drawer.",
              "tags": [
                {
                  "name": "default",
                  "text": "500ms"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "noBodyStyles": {
              "name": "noBodyStyles",
              "global": false,
              "description": "When `true` the `body` doesn't get any styles assigned.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "handleOnly": {
              "name": "handleOnly",
              "global": false,
              "description": "When `true` only allows the drawer to be dragged by the `<ADrawer.Handle />` component.",
              "tags": [
                {
                  "name": "default",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "preventScrollRestoration": {
              "name": "preventScrollRestoration",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "snapPoints": {
              "name": "snapPoints",
              "global": false,
              "description": "Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.\nShould go from least visible. Example `[0.2, 0.5, 0.8]`.\nYou can also use px values, which doesn't take screen height into account.",
              "tags": [],
              "required": false,
              "type": "(string | number)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string | number)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "array",
                    "type": "(string | number)[]",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "string | number",
                        "schema": [
                          "string",
                          "number"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "PSlideoverProps",
          "schema": {
            "title": {
              "name": "title",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "description": {
              "name": "description",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "content": {
              "name": "content",
              "global": false,
              "description": "The content of the slideover.",
              "tags": [],
              "required": false,
              "type": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined",
              "schema": "(Omit<ADialogContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DialogContentImplEmits>>) | undefined"
            },
            "overlay": {
              "name": "overlay",
              "global": false,
              "description": "Render an overlay behind the slideover.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "transition": {
              "name": "transition",
              "global": false,
              "description": "Animate the slideover when opening or closing.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "side": {
              "name": "side",
              "global": false,
              "description": "The side of the slideover.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'right'"
                }
              ],
              "required": false,
              "type": "'top' | 'bottom' | 'left' | 'right' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'top' | 'bottom' | 'left' | 'right' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "portal": {
              "name": "portal",
              "global": false,
              "description": "Render the slideover in a portal.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "string | boolean | HTMLElement | undefined",
              "schema": "string | boolean | HTMLElement | undefined"
            },
            "close": {
              "name": "close",
              "global": false,
              "description": "Display a close button to dismiss the slideover.\n`{ size: 'md', color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | Partial<PButtonProps> | undefined",
              "schema": "boolean | Partial<PButtonProps> | undefined"
            },
            "closeIcon": {
              "name": "closeIcon",
              "global": false,
              "description": "The icon displayed in the close button.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.close"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "dismissible": {
              "name": "dismissible",
              "global": false,
              "description": "When `false`, the slideover will not close when clicking outside or pressing escape.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ overlay?: ClassValue; content?: ClassValue; header?: ClassValue; wrapper?: ClassValue; body?: ClassValue; footer?: ClassValue; title?: ClassValue; description?: ClassValue; close?: ClassValue; }"
                }
              }
            },
            "open": {
              "name": "open",
              "global": false,
              "description": "The controlled open state of the dialog. Can be binded as `v-model:open`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "defaultOpen": {
              "name": "defaultOpen",
              "global": false,
              "description": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "modal": {
              "name": "modal",
              "global": false,
              "description": "The modality of the dialog When set to `true`, <br>\ninteraction with outside elements will be disabled and only dialog content will be visible to screen readers.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "mode",
    "global": false,
    "description": "The mode of the header menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'dialog'"
      }
    ],
    "required": false,
    "type": "HeaderMode | undefined",
    "schema": {
      "kind": "enum",
      "type": "HeaderMode | undefined",
      "schema": {
        "0": "undefined",
        "1": "'dialog'",
        "2": "'slideover'",
        "3": "'drawer'"
      }
    },
    "default": "'dialog' as never"
  },
  {
    "name": "open",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "title",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "'Pohon'"
  },
  {
    "name": "to",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "'/'"
  },
  {
    "name": "toggle",
    "global": false,
    "description": "Customize the toggle button to open the header menu displayed when the `content` slot is used.\n`{ color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [],
    "required": false,
    "type": "boolean | Partial<PButtonProps> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<PButtonProps> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<PButtonProps>"
      }
    },
    "default": "true"
  },
  {
    "name": "toggleSide",
    "global": false,
    "description": "The side to render the toggle button on.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'right'"
      }
    ],
    "required": false,
    "type": "'left' | 'right' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'left' | 'right' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'left'",
        "2": "'right'"
      }
    },
    "default": "'right'"
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; container?: ClassValue; left?: ClassValue; center?: ClassValue; right?: ClassValue; title?: ClassValue; toggle?: ClassValue; content?: ClassValue; overlay?: ClassValue; header?: ClassValue; body?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; container?: ClassValue; left?: ClassValue; center?: ClassValue; right?: ClassValue; title?: ClassValue; toggle?: ClassValue; content?: ClassValue; overlay?: ClassValue; header?: ClassValue; body?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; container?: ClassValue; left?: ClassValue; center?: ClassValue; right?: ClassValue; title?: ClassValue; toggle?: ClassValue; content?: ClassValue; overlay?: ClassValue; header?: ClassValue; body?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "update:open",
    "description": "",
    "type": "[value: boolean]"
  }
],
  "slots": [
  {
    "description": "",
    "type": ""
  },
  {
    "description": "",
    "type": ""
  }
]
}
