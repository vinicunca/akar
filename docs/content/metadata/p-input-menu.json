{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.\n\nRead our [primitive tag](https://akar.vinicunca.dev/core/guides/primitive-tag) guide for more details.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": "any"
  },
  {
    "name": "arrow",
    "global": false,
    "description": "Display an arrow alongside the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Omit<AComboboxArrowProps, 'as' | 'asChild'> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Omit<AComboboxArrowProps, 'as' | 'asChild'>"
      }
    }
  },
  {
    "name": "autofocus",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "autofocusDelay",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "0"
  },
  {
    "name": "avatar",
    "global": false,
    "description": "Display an avatar on the left side.",
    "tags": [],
    "required": false,
    "type": "PAvatarProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PAvatarProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PAvatarProps",
          "schema": {
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'span'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": {
                "kind": "enum",
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'a'",
                  "2": "'button'",
                  "3": "'div'",
                  "4": "'form'",
                  "5": "'h2'",
                  "6": "'h3'",
                  "7": "'img'",
                  "8": "'input'",
                  "9": "'label'",
                  "10": "'li'",
                  "11": "'nav'",
                  "12": "'ol'",
                  "13": "'p'",
                  "14": "'span'",
                  "15": "'svg'",
                  "16": "'template'",
                  "17": "'ul'",
                  "18": {
                    "kind": "object",
                    "type": "string & {}",
                    "schema": {}
                  },
                  "19": {
                    "kind": "object",
                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                    "schema": {
                      "beforeRouteEnter": {
                        "name": "beforeRouteEnter",
                        "global": false,
                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuardWithThis<undefined> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuardWithThis<undefined> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteUpdate": {
                        "name": "beforeRouteUpdate",
                        "global": false,
                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuard | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteLeave": {
                        "name": "beforeRouteLeave",
                        "global": false,
                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": "NavigationGuard | undefined"
                      },
                      "head": {
                        "name": "head",
                        "global": false,
                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                        "tags": [],
                        "required": false,
                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                              "schema": []
                            }
                          }
                        }
                      }
                    }
                  },
                  "20": {
                    "kind": "event",
                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                    "schema": []
                  },
                  "21": {
                    "kind": "object",
                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                    "schema": {}
                  }
                }
              }
            },
            "src": {
              "name": "src",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "alt": {
              "name": "alt",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "text": {
              "name": "text",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'",
                  "6": "'3xs'",
                  "7": "'2xs'",
                  "8": "'2xl'",
                  "9": "'3xl'"
                }
              }
            },
            "chip": {
              "name": "chip",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | PChipProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | PChipProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": {
                    "kind": "object",
                    "type": "PChipProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'div'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": "APrimitiveAsTag | Component | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "Display some text inside the chip.",
                        "tags": [],
                        "required": false,
                        "type": "string | number | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "string | number | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "number"
                          }
                        }
                      },
                      "color": {
                        "name": "color",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'primary'"
                          }
                        ],
                        "required": false,
                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'error'",
                            "2": "'primary'",
                            "3": "'secondary'",
                            "4": "'success'",
                            "5": "'info'",
                            "6": "'warning'",
                            "7": "'neutral'"
                          }
                        }
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                      },
                      "position": {
                        "name": "position",
                        "global": false,
                        "description": "The position of the chip.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'top-right'"
                          }
                        ],
                        "required": false,
                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'top-right'",
                            "2": "'bottom-right'",
                            "3": "'top-left'",
                            "4": "'bottom-left'"
                          }
                        }
                      },
                      "inset": {
                        "name": "inset",
                        "global": false,
                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true"
                          }
                        }
                      },
                      "standalone": {
                        "name": "standalone",
                        "global": false,
                        "description": "When `true`, render the chip relatively to the parent.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "style": {
              "name": "style",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "color",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'primary'"
      }
    ],
    "required": false,
    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'error'",
        "2": "'primary'",
        "3": "'secondary'",
        "4": "'success'",
        "5": "'info'",
        "6": "'warning'",
        "7": "'neutral'"
      }
    }
  },
  {
    "name": "content",
    "global": false,
    "description": "The content of the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8, position: 'popper' }"
      }
    ],
    "required": false,
    "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "(Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "Omit<AComboboxContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<DismissableLayerEmits>>",
          "schema": {
            "position": {
              "name": "position",
              "global": false,
              "description": "The positioning mode to use, <br>\n`inline` is the default and you can control the position using CSS. <br>\n`popper` positions content in the same way as our other primitives, for example `Popover` or `DropdownMenu`.",
              "tags": [],
              "required": false,
              "type": "'inline' | 'popper' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'inline' | 'popper' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'inline'",
                  "2": "'popper'"
                }
              }
            },
            "sticky": {
              "name": "sticky",
              "global": false,
              "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'partial'"
                }
              ],
              "required": false,
              "type": "'partial' | 'always' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'partial' | 'always' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'partial'",
                  "2": "'always'"
                }
              }
            },
            "bodyLock": {
              "name": "bodyLock",
              "global": false,
              "description": "The document.body will be lock, and scrolling will be disabled.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "side": {
              "name": "side",
              "global": false,
              "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'top'"
                }
              ],
              "required": false,
              "type": "Side | undefined",
              "schema": {
                "kind": "enum",
                "type": "Side | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "sideOffset": {
              "name": "sideOffset",
              "global": false,
              "description": "The distance in pixels from the trigger.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number"
                }
              }
            },
            "sideFlip": {
              "name": "sideFlip",
              "global": false,
              "description": "Flip to the opposite side when colliding with boundary.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "align": {
              "name": "align",
              "global": false,
              "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'center'"
                }
              ],
              "required": false,
              "type": "Align | undefined",
              "schema": {
                "kind": "enum",
                "type": "Align | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'center'",
                  "2": "'start'",
                  "3": "'end'"
                }
              }
            },
            "alignOffset": {
              "name": "alignOffset",
              "global": false,
              "description": "An offset in pixels from the `start` or `end` alignment options.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "alignFlip": {
              "name": "alignFlip",
              "global": false,
              "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "avoidCollisions": {
              "name": "avoidCollisions",
              "global": false,
              "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "collisionBoundary": {
              "name": "collisionBoundary",
              "global": false,
              "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "Array"
                }
              ],
              "required": false,
              "type": "Element | (Element | null)[] | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "Element | (Element | null)[] | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": {
                    "kind": "object",
                    "type": "Element",
                    "schema": {}
                  },
                  "3": {
                    "kind": "array",
                    "type": "(Element | null)[]",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "Element | null",
                        "schema": [
                          "null",
                          "Element"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "collisionPadding": {
              "name": "collisionPadding",
              "global": false,
              "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | Partial<Record<Side, number>> | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | Partial<Record<Side, number>> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number",
                  "2": "Partial<Record<Side, number>>"
                }
              }
            },
            "arrowPadding": {
              "name": "arrowPadding",
              "global": false,
              "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "hideWhenDetached": {
              "name": "hideWhenDetached",
              "global": false,
              "description": "Whether to hide the content when the trigger becomes fully occluded.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "positionStrategy": {
              "name": "positionStrategy",
              "global": false,
              "description": "The type of CSS position property to use.",
              "tags": [],
              "required": false,
              "type": "'fixed' | 'absolute' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'fixed' | 'absolute' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'fixed'",
                  "2": "'absolute'"
                }
              }
            },
            "updatePositionStrategy": {
              "name": "updatePositionStrategy",
              "global": false,
              "description": "Strategy to update the position of the floating element on every animation frame.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'optimized'"
                }
              ],
              "required": false,
              "type": "'always' | 'optimized' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'optimized' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'optimized'"
                }
              }
            },
            "disableUpdateOnLayoutShift": {
              "name": "disableUpdateOnLayoutShift",
              "global": false,
              "description": "Whether to disable the update position for the content when the layout shifted.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prioritizePosition": {
              "name": "prioritizePosition",
              "global": false,
              "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "disableOutsidePointerEvents": {
              "name": "disableOutsidePointerEvents",
              "global": false,
              "description": "When `true`, hover/focus/click interactions will be disabled on elements outside\nthe `DismissableLayer`. Users will need to click twice on outside elements to\ninteract with them: once to close the `DismissableLayer`, and again to trigger the element.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onEscapeKeyDown": {
              "name": "onEscapeKeyDown",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: KeyboardEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: KeyboardEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: KeyboardEvent): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "KeyboardEvent",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            },
            "onPointerDownOutside": {
              "name": "onPointerDownOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent): void",
                    "schema": [
                      "PointerDownOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onFocusOutside": {
              "name": "onFocusOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: FocusOutsideEvent): void",
                    "schema": [
                      "FocusOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onInteractOutside": {
              "name": "onInteractOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                        "schema": [
                          "PointerDownOutsideEvent",
                          "FocusOutsideEvent"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "createItem",
    "global": false,
    "description": "Determines if custom user input that does not exist in options can be added.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | 'always' | { position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | 'always' | { position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "'always'",
        "4": {
          "kind": "object",
          "type": "{ position?: 'top' | 'bottom' | undefined; when?: 'always' | 'empty' | undefined; }",
          "schema": {
            "position": {
              "name": "position",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'top' | 'bottom' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'top' | 'bottom' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'"
                }
              }
            },
            "when": {
              "name": "when",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'always' | 'empty' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'empty' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'empty'"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "defaultOpen",
    "global": false,
    "description": "The open state of the combobox when it is initially rendered. <br> Use when you do not need to control its open state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "The value of the InputMenu when initially rendered. Use when you do not need to control the state of the InputMenu.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "deleteIcon",
    "global": false,
    "description": "The icon displayed to delete a tag.\nWorks only when `multiple` is `true`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.close"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with listbox",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "filterFields",
    "global": false,
    "description": "Fields to filter items by.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "[labelKey]"
      }
    ],
    "required": false,
    "type": "string[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "string[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "string[]",
          "schema": [
            "string"
          ]
        }
      }
    }
  },
  {
    "name": "highlight",
    "global": false,
    "description": "Highlight the ring color like a focus state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "highlightOnHover",
    "global": false,
    "description": "When `true`, hover over item will trigger highlight",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "icon",
    "global": false,
    "description": "Display an icon based on the `leading` and `trailing` props.",
    "tags": [
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "id",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "ignoreFilter",
    "global": false,
    "description": "When `true`, disable the default filters, useful for custom filtering (useAsyncData, useFetch, etc.).",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ArrayOrNested<PInputMenuItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "ArrayOrNested<PInputMenuItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PInputMenuItem[]",
          "schema": [
            {
              "kind": "enum",
              "type": "PInputMenuItem",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "false",
                "true",
                {
                  "kind": "object",
                  "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                  "schema": {
                    "label": {
                      "name": "label",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string"
                        }
                      }
                    },
                    "icon": {
                      "name": "icon",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "IconifyIcon"
                        }
                      ],
                      "required": false,
                      "type": "string | object | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | object | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string",
                          "2": "object"
                        }
                      }
                    },
                    "avatar": {
                      "name": "avatar",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PAvatarProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "object",
                            "type": "PAvatarProps",
                            "schema": {
                              "as": {
                                "name": "as",
                                "global": false,
                                "description": "The element or component this component should render as.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'span'"
                                  }
                                ],
                                "required": false,
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'a'",
                                    "2": "'button'",
                                    "3": "'div'",
                                    "4": "'form'",
                                    "5": "'h2'",
                                    "6": "'h3'",
                                    "7": "'img'",
                                    "8": "'input'",
                                    "9": "'label'",
                                    "10": "'li'",
                                    "11": "'nav'",
                                    "12": "'ol'",
                                    "13": "'p'",
                                    "14": "'span'",
                                    "15": "'svg'",
                                    "16": "'template'",
                                    "17": "'ul'",
                                    "18": {
                                      "kind": "object",
                                      "type": "string & {}",
                                      "schema": {}
                                    },
                                    "19": {
                                      "kind": "object",
                                      "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                      "schema": {
                                        "beforeRouteEnter": {
                                          "name": "beforeRouteEnter",
                                          "global": false,
                                          "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuardWithThis<undefined> | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteUpdate": {
                                          "name": "beforeRouteUpdate",
                                          "global": false,
                                          "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuard | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteLeave": {
                                          "name": "beforeRouteLeave",
                                          "global": false,
                                          "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": "NavigationGuard | undefined"
                                        },
                                        "head": {
                                          "name": "head",
                                          "global": false,
                                          "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                          "tags": [],
                                          "required": false,
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "20": {
                                      "kind": "event",
                                      "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                      "schema": []
                                    },
                                    "21": {
                                      "kind": "object",
                                      "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                      "schema": {}
                                    }
                                  }
                                }
                              },
                              "src": {
                                "name": "src",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "alt": {
                                "name": "alt",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "icon": {
                                "name": "icon",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "IconifyIcon"
                                  }
                                ],
                                "required": false,
                                "type": "string | object | undefined",
                                "schema": "string | object | undefined"
                              },
                              "text": {
                                "name": "text",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'md'"
                                  }
                                ],
                                "required": false,
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'md'",
                                    "2": "'xs'",
                                    "3": "'sm'",
                                    "4": "'lg'",
                                    "5": "'xl'",
                                    "6": "'3xs'",
                                    "7": "'2xs'",
                                    "8": "'2xl'",
                                    "9": "'3xl'"
                                  }
                                }
                              },
                              "chip": {
                                "name": "chip",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "boolean | PChipProps | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "false",
                                    "2": "true",
                                    "3": {
                                      "kind": "object",
                                      "type": "PChipProps",
                                      "schema": {
                                        "as": {
                                          "name": "as",
                                          "global": false,
                                          "description": "The element or component this component should render as.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'div'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "APrimitiveAsTag | Component | undefined",
                                          "schema": "APrimitiveAsTag | Component | undefined"
                                        },
                                        "text": {
                                          "name": "text",
                                          "global": false,
                                          "description": "Display some text inside the chip.",
                                          "tags": [],
                                          "required": false,
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "string | number | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "string",
                                              "2": "number"
                                            }
                                          }
                                        },
                                        "color": {
                                          "name": "color",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'primary'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'error'",
                                              "2": "'primary'",
                                              "3": "'secondary'",
                                              "4": "'success'",
                                              "5": "'info'",
                                              "6": "'warning'",
                                              "7": "'neutral'"
                                            }
                                          }
                                        },
                                        "size": {
                                          "name": "size",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'md'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                          "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                        },
                                        "position": {
                                          "name": "position",
                                          "global": false,
                                          "description": "The position of the chip.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'top-right'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'top-right'",
                                              "2": "'bottom-right'",
                                              "3": "'top-left'",
                                              "4": "'bottom-left'"
                                            }
                                          }
                                        },
                                        "inset": {
                                          "name": "inset",
                                          "global": false,
                                          "description": "When `true`, keep the chip inside the component for rounded elements.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "boolean | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "false",
                                              "2": "true"
                                            }
                                          }
                                        },
                                        "standalone": {
                                          "name": "standalone",
                                          "global": false,
                                          "description": "When `true`, render the chip relatively to the parent.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": "boolean | undefined"
                                        },
                                        "class": {
                                          "name": "class",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "any",
                                          "schema": "any"
                                        },
                                        "pohon": {
                                          "name": "pohon",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "{ root?: ClassValue; base?: ClassValue; }"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "style": {
                                "name": "style",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "pohon": {
                                "name": "pohon",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "chip": {
                      "name": "chip",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PChipProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PChipProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "PChipProps"
                        }
                      }
                    },
                    "type": {
                      "name": "type",
                      "global": false,
                      "description": "The item type.",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "'item'"
                        }
                      ],
                      "required": false,
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "'label' | 'item' | 'separator' | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'label'",
                          "2": "'item'",
                          "3": "'separator'"
                        }
                      }
                    },
                    "disabled": {
                      "name": "disabled",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "onSelect": {
                      "name": "onSelect",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((event?: Event | undefined) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(event?: Event | undefined): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        },
        "2": {
          "kind": "array",
          "type": "PInputMenuItem[][]",
          "schema": [
            "PInputMenuItem[]"
          ]
        }
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the label.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PInputMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PInputMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "leading",
    "global": false,
    "description": "When `true`, the icon will be displayed on the left side.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "leadingIcon",
    "global": false,
    "description": "Display an icon on the left side.",
    "tags": [
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "loading",
    "global": false,
    "description": "When `true`, the loading icon will be displayed.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "loadingIcon",
    "global": false,
    "description": "The icon when the `loading` prop is `true`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.loading"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The controlled value of the InputMenu. Can be binded-with with `v-model`.",
    "tags": [],
    "required": false,
    "type": "any",
    "schema": "any"
  },
  {
    "name": "multiple",
    "global": false,
    "description": "Whether multiple options can be selected or not.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "name",
    "global": false,
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "open",
    "global": false,
    "description": "The controlled open state of the Combobox. Can be binded with with `v-model:open`.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "openOnClick",
    "global": false,
    "description": "Whether to open the combobox when the input is clicked",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`false`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "openOnFocus",
    "global": false,
    "description": "Whether to open the combobox when the input is focused",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`false`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "placeholder",
    "global": false,
    "description": "The placeholder text when the input is empty.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "portal",
    "global": false,
    "description": "Render the menu in a portal.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "string | boolean | HTMLElement | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | HTMLElement | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": {
          "kind": "object",
          "type": "HTMLElement",
          "schema": {}
        }
      }
    },
    "default": "true"
  },
  {
    "name": "required",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "resetSearchTermOnBlur",
    "global": false,
    "description": "Whether to reset the searchTerm when the Combobox input blurred",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "resetSearchTermOnSelect",
    "global": false,
    "description": "Whether to reset the searchTerm when the Combobox value is selected",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`true`"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "searchTerm",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "''"
  },
  {
    "name": "selectedIcon",
    "global": false,
    "description": "The icon displayed when an item is selected.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.check"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "trailing",
    "global": false,
    "description": "When `true`, the icon will be displayed on the right side.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "trailingIcon",
    "global": false,
    "description": "The icon displayed to open the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronDown"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "type",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "InputTypeHTMLAttribute | undefined",
    "schema": {
      "kind": "enum",
      "type": "InputTypeHTMLAttribute | undefined",
      "schema": {
        "0": "undefined",
        "1": "'number'",
        "2": "'button'",
        "3": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "4": "'search'",
        "5": "'reset'",
        "6": "'submit'",
        "7": "'color'",
        "8": "'date'",
        "9": "'time'",
        "10": "'image'",
        "11": "'text'",
        "12": "'checkbox'",
        "13": "'password'",
        "14": "'datetime-local'",
        "15": "'email'",
        "16": "'file'",
        "17": "'hidden'",
        "18": "'month'",
        "19": "'radio'",
        "20": "'range'",
        "21": "'tel'",
        "22": "'url'",
        "23": "'week'"
      }
    },
    "default": "'text'"
  },
  {
    "name": "valueKey",
    "global": false,
    "description": "When `items` is an array of objects, select the field to use as the value instead of the object itself.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "undefined"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PInputMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PInputMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    }
  },
  {
    "name": "variant",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'outline'"
      }
    ],
    "required": false,
    "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'outline' | 'soft' | 'subtle' | 'ghost' | 'none' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'outline'",
        "2": "'soft'",
        "3": "'subtle'",
        "4": "'ghost'",
        "5": "'none'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }"
      }
    }
  }
],
  "slots": [
  {
    "name": "leading",
    "type": "{ modelValue?: any; open: boolean; pohon: { root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ modelValue?: any; open: boolean; pohon: { root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }; }",
      "schema": {
        "modelValue": {
          "name": "modelValue",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "any",
          "schema": "any"
        },
        "open": {
          "name": "open",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "boolean",
          "schema": {
            "kind": "enum",
            "type": "boolean",
            "schema": {
              "0": "false",
              "1": "true"
            }
          }
        },
        "pohon": {
          "name": "pohon",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "{ root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }",
          "schema": "{ root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }"
        }
      }
    }
  },
  {
    "name": "trailing",
    "type": "{ modelValue?: any; open: boolean; pohon: { root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ modelValue?: any; open: boolean; pohon: { root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }; }",
      "schema": {
        "modelValue": {
          "name": "modelValue",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "any",
          "schema": "any"
        },
        "open": {
          "name": "open",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "boolean",
          "schema": {
            "kind": "enum",
            "type": "boolean",
            "schema": {
              "0": "false",
              "1": "true"
            }
          }
        },
        "pohon": {
          "name": "pohon",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "{ root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }",
          "schema": "{ root: (props?: Record<string, any> | undefined) => string; base: (props?: Record<string, any> | undefined) => string; leading: (props?: Record<string, any> | undefined) => string; leadingIcon: (props?: Record<string, any> | undefined) => string; leadingAvatar: (props?: Record<string, any> | undefined) => string; leadingAvatarSize: (props?: Record<string, any> | undefined) => string; trailing: (props?: Record<string, any> | undefined) => string; trailingIcon: (props?: Record<string, any> | undefined) => string; arrow: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; separator: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; tagsItem: (props?: Record<string, any> | undefined) => string; tagsItemText: (props?: Record<string, any> | undefined) => string; tagsItemDelete: (props?: Record<string, any> | undefined) => string; tagsItemDeleteIcon: (props?: Record<string, any> | undefined) => string; tagsInput: (props?: Record<string, any> | undefined) => string; }"
        }
      }
    }
  },
  {
    "name": "empty",
    "type": "{ searchTerm?: string | undefined; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ searchTerm?: string | undefined; }",
      "schema": {
        "searchTerm": {
          "name": "searchTerm",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "string | undefined",
          "schema": {
            "kind": "enum",
            "type": "string | undefined",
            "schema": {
              "0": "undefined",
              "1": "string"
            }
          }
        }
      }
    }
  },
  {
    "name": "item",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-leading",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-label",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-trailing",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "tags-item-text",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "tags-item-delete",
    "type": "{ item: PInputMenuItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PInputMenuItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PInputMenuItem",
          "schema": {
            "kind": "enum",
            "type": "PInputMenuItem",
            "schema": {
              "0": "null",
              "1": "string",
              "2": "number",
              "3": "bigint",
              "4": "false",
              "5": "true",
              "6": {
                "kind": "object",
                "type": "{ [key: string]: any; label?: string | undefined; icon?: string | object | undefined; avatar?: PAvatarProps | undefined; chip?: PChipProps | undefined; type?: 'label' | 'item' | 'separator' | undefined; disabled?: boolean | undefined; onSelect?: ((event?: Event | undefined) => void) | undefined; class?: any; pohon?: Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined; }",
                "schema": {
                  "label": {
                    "name": "label",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "string | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string"
                      }
                    }
                  },
                  "icon": {
                    "name": "icon",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "IconifyIcon"
                      }
                    ],
                    "required": false,
                    "type": "string | object | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | object | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "object"
                      }
                    }
                  },
                  "avatar": {
                    "name": "avatar",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "PAvatarProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'span'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'a'",
                                  "2": "'button'",
                                  "3": "'div'",
                                  "4": "'form'",
                                  "5": "'h2'",
                                  "6": "'h3'",
                                  "7": "'img'",
                                  "8": "'input'",
                                  "9": "'label'",
                                  "10": "'li'",
                                  "11": "'nav'",
                                  "12": "'ol'",
                                  "13": "'p'",
                                  "14": "'span'",
                                  "15": "'svg'",
                                  "16": "'template'",
                                  "17": "'ul'",
                                  "18": {
                                    "kind": "object",
                                    "type": "string & {}",
                                    "schema": {}
                                  },
                                  "19": {
                                    "kind": "object",
                                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                    "schema": {
                                      "beforeRouteEnter": {
                                        "name": "beforeRouteEnter",
                                        "global": false,
                                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteUpdate": {
                                        "name": "beforeRouteUpdate",
                                        "global": false,
                                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      },
                                      "beforeRouteLeave": {
                                        "name": "beforeRouteLeave",
                                        "global": false,
                                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                        "tags": [
                                          {
                                            "name": "param",
                                            "text": "to - RouteLocationRaw we are navigating to"
                                          },
                                          {
                                            "name": "param",
                                            "text": "from - RouteLocationRaw we are navigating from"
                                          },
                                          {
                                            "name": "param",
                                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                          }
                                        ],
                                        "required": false,
                                        "type": "NavigationGuard | undefined",
                                        "schema": "NavigationGuard | undefined"
                                      },
                                      "head": {
                                        "name": "head",
                                        "global": false,
                                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                        "tags": [],
                                        "required": false,
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "event",
                                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                              "schema": []
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "20": {
                                    "kind": "event",
                                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                    "schema": []
                                  },
                                  "21": {
                                    "kind": "object",
                                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                    "schema": {}
                                  }
                                }
                              }
                            },
                            "src": {
                              "name": "src",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "alt": {
                              "name": "alt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "icon": {
                              "name": "icon",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "IconifyIcon"
                                }
                              ],
                              "required": false,
                              "type": "string | object | undefined",
                              "schema": "string | object | undefined"
                            },
                            "text": {
                              "name": "text",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'xs'",
                                  "3": "'sm'",
                                  "4": "'lg'",
                                  "5": "'xl'",
                                  "6": "'3xs'",
                                  "7": "'2xs'",
                                  "8": "'2xl'",
                                  "9": "'3xl'"
                                }
                              }
                            },
                            "chip": {
                              "name": "chip",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "false",
                                  "2": "true",
                                  "3": {
                                    "kind": "object",
                                    "type": "PChipProps",
                                    "schema": {
                                      "as": {
                                        "name": "as",
                                        "global": false,
                                        "description": "The element or component this component should render as.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'div'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "APrimitiveAsTag | Component | undefined",
                                        "schema": "APrimitiveAsTag | Component | undefined"
                                      },
                                      "text": {
                                        "name": "text",
                                        "global": false,
                                        "description": "Display some text inside the chip.",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "number"
                                          }
                                        }
                                      },
                                      "color": {
                                        "name": "color",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'primary'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'error'",
                                            "2": "'primary'",
                                            "3": "'secondary'",
                                            "4": "'success'",
                                            "5": "'info'",
                                            "6": "'warning'",
                                            "7": "'neutral'"
                                          }
                                        }
                                      },
                                      "size": {
                                        "name": "size",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'md'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                        "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                      },
                                      "position": {
                                        "name": "position",
                                        "global": false,
                                        "description": "The position of the chip.",
                                        "tags": [
                                          {
                                            "name": "defaultValue",
                                            "text": "'top-right'"
                                          }
                                        ],
                                        "required": false,
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "'top-right'",
                                            "2": "'bottom-right'",
                                            "3": "'top-left'",
                                            "4": "'bottom-left'"
                                          }
                                        }
                                      },
                                      "inset": {
                                        "name": "inset",
                                        "global": false,
                                        "description": "When `true`, keep the chip inside the component for rounded elements.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "false",
                                            "2": "true"
                                          }
                                        }
                                      },
                                      "standalone": {
                                        "name": "standalone",
                                        "global": false,
                                        "description": "When `true`, render the chip relatively to the parent.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "class": {
                                        "name": "class",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "any",
                                        "schema": "any"
                                      },
                                      "pohon": {
                                        "name": "pohon",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "{ root?: ClassValue; base?: ClassValue; }"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "style": {
                              "name": "style",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            },
                            "pohon": {
                              "name": "pohon",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "chip": {
                    "name": "chip",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "PChipProps | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "PChipProps | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "PChipProps"
                      }
                    }
                  },
                  "type": {
                    "name": "type",
                    "global": false,
                    "description": "The item type.",
                    "tags": [
                      {
                        "name": "defaultValue",
                        "text": "'item'"
                      }
                    ],
                    "required": false,
                    "type": "'label' | 'item' | 'separator' | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "'label' | 'item' | 'separator' | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "'label'",
                        "2": "'item'",
                        "3": "'separator'"
                      }
                    }
                  },
                  "disabled": {
                    "name": "disabled",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "onSelect": {
                    "name": "onSelect",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "((event?: Event | undefined) => void) | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "event",
                          "type": "(event?: Event | undefined): void",
                          "schema": []
                        }
                      }
                    }
                  },
                  "class": {
                    "name": "class",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "any",
                    "schema": "any"
                  },
                  "pohon": {
                    "name": "pohon",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Pick<{ root?: ClassValue; base?: ClassValue; leading?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailing?: ClassValue; trailingIcon?: ClassValue; arrow?: ClassValue; content?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemLabel?: ClassValue; tagsItem?: ClassValue; tagsItemText?: ClassValue; tagsItemDelete?: ClassValue; tagsItemDeleteIcon?: ClassValue; tagsInput?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'tagsItem' | 'tagsItemText' | 'tagsItemDelete' | 'tagsItemDeleteIcon'>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "content-top",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  },
  {
    "name": "content-bottom",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  },
  {
    "name": "create-item-label",
    "type": "{ item: string; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: string; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "string",
          "schema": "string"
        }
      }
    }
  }
],
  "events": [
  {
    "name": "update:modelValue",
    "description": "",
    "tags": [],
    "type": "[value: any]",
    "signature": "(evt: 'update:modelValue', value: any): void",
    "schema": [
      "any"
    ]
  },
  {
    "name": "blur",
    "description": "",
    "tags": [],
    "type": "[event: FocusEvent]",
    "signature": "(evt: 'blur', event: FocusEvent): void",
    "schema": [
      {
        "kind": "object",
        "type": "FocusEvent",
        "schema": {}
      }
    ]
  },
  {
    "name": "change",
    "description": "",
    "tags": [],
    "type": "[event: Event]",
    "signature": "(evt: 'change', event: Event): void",
    "schema": [
      {
        "kind": "object",
        "type": "Event",
        "schema": {}
      }
    ]
  },
  {
    "name": "focus",
    "description": "",
    "tags": [],
    "type": "[event: FocusEvent]",
    "signature": "(evt: 'focus', event: FocusEvent): void",
    "schema": [
      {
        "kind": "object",
        "type": "FocusEvent",
        "schema": {}
      }
    ]
  },
  {
    "name": "update:open",
    "description": "",
    "tags": [],
    "type": "[value: boolean]",
    "signature": "(evt: 'update:open', value: boolean): void",
    "schema": [
      {
        "kind": "enum",
        "type": "boolean",
        "schema": [
          "false",
          "true"
        ]
      }
    ]
  },
  {
    "name": "create",
    "description": "",
    "tags": [],
    "type": "[item: string]",
    "signature": "(evt: 'create', item: string): void",
    "schema": [
      "string"
    ]
  },
  {
    "name": "highlight",
    "description": "",
    "tags": [],
    "type": "[payload: { ref: HTMLElement; value: any; } | undefined]",
    "signature": "(evt: 'highlight', payload: { ref: HTMLElement; value: any; } | undefined): void",
    "schema": [
      {
        "kind": "enum",
        "type": "{ ref: HTMLElement; value: any; } | undefined",
        "schema": [
          "undefined",
          {
            "kind": "object",
            "type": "{ ref: HTMLElement; value: any; }",
            "schema": {
              "ref": {
                "name": "ref",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "HTMLElement",
                "schema": {
                  "kind": "object",
                  "type": "HTMLElement",
                  "schema": {}
                }
              },
              "value": {
                "name": "value",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "any",
                "schema": "any"
              }
            }
          }
        ]
      }
    ]
  },
  {
    "name": "removeTag",
    "description": "",
    "tags": [],
    "type": "[item: any]",
    "signature": "(evt: 'removeTag', item: any): void",
    "schema": [
      "any"
    ]
  },
  {
    "name": "update:searchTerm",
    "description": "",
    "tags": [],
    "type": "[value: string]",
    "signature": "(evt: 'update:searchTerm', value: string): void",
    "schema": [
      "string"
    ]
  }
],
  "exposed": [
  {
    "name": "inputRef",
    "type": "({ $: ComponentInternalInstance; $data: {}; $props: { readonly displayValue?: ((val: any) => string) | undefined; readonly modelValue?: string | undefined; readonly autoFocus?: boolean | undefined; readonly disabled?: boolean | undefined; readonly asChild?: boolean | undefined; readonly as?: APrimitiveAsTag | Component | undefined; readonly 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; } & VNodeProps & AllowedComponentProps & ComponentCustomProps; $attrs: Data; $refs: Data; $slots: Readonly<InternalSlots>; $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $host: Element | null; $emit: (event: 'update:modelValue', args_0: string) => void; $el: any; $options: ComponentOptionsBase<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, { 'update:modelValue': (args_0: string) => any; }, string, { as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & MergedComponentOptionsOverride; $forceUpdate: () => void; $nextTick: { (): Promise<void>; <T, R>(this: T, fn: (this: T) => R | Promise<R>): Promise<R>; }; $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: OnCleanup) => any : (args_0: any, args_1: any, args_2: OnCleanup) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle; } & Readonly<{ as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }> & Omit<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, 'as'> & ShallowUnwrapRef<{}> & ExtractComputedReturns<{}> & ComponentCustomProperties & {} & { $slots: { default?: ((props: {}) => any) | undefined; }; }) | null",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "({ $: ComponentInternalInstance; $data: {}; $props: { readonly displayValue?: ((val: any) => string) | undefined; readonly modelValue?: string | undefined; readonly autoFocus?: boolean | undefined; readonly disabled?: boolean | undefined; readonly asChild?: boolean | undefined; readonly as?: APrimitiveAsTag | Component | undefined; readonly 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; } & VNodeProps & AllowedComponentProps & ComponentCustomProps; $attrs: Data; $refs: Data; $slots: Readonly<InternalSlots>; $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $host: Element | null; $emit: (event: 'update:modelValue', args_0: string) => void; $el: any; $options: ComponentOptionsBase<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, { 'update:modelValue': (args_0: string) => any; }, string, { as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & MergedComponentOptionsOverride; $forceUpdate: () => void; $nextTick: { (): Promise<void>; <T, R>(this: T, fn: (this: T) => R | Promise<R>): Promise<R>; }; $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: OnCleanup) => any : (args_0: any, args_1: any, args_2: OnCleanup) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle; } & Readonly<{ as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }> & Omit<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, 'as'> & ShallowUnwrapRef<{}> & ExtractComputedReturns<{}> & ComponentCustomProperties & {} & { $slots: { default?: ((props: {}) => any) | undefined; }; }) | null",
      "schema": {
        "0": "null",
        "1": {
          "kind": "object",
          "type": "{ $: ComponentInternalInstance; $data: {}; $props: { readonly displayValue?: ((val: any) => string) | undefined; readonly modelValue?: string | undefined; readonly autoFocus?: boolean | undefined; readonly disabled?: boolean | undefined; readonly asChild?: boolean | undefined; readonly as?: APrimitiveAsTag | Component | undefined; readonly 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; } & VNodeProps & AllowedComponentProps & ComponentCustomProps; $attrs: Data; $refs: Data; $slots: Readonly<InternalSlots>; $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>, {}, {}, '', {}, any> | null; $host: Element | null; $emit: (event: 'update:modelValue', args_0: string) => void; $el: any; $options: ComponentOptionsBase<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, { 'update:modelValue': (args_0: string) => any; }, string, { as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & MergedComponentOptionsOverride; $forceUpdate: () => void; $nextTick: { (): Promise<void>; <T, R>(this: T, fn: (this: T) => R | Promise<R>): Promise<R>; }; $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: OnCleanup) => any : (args_0: any, args_1: any, args_2: OnCleanup) => any, options?: WatchOptions<boolean> | undefined): WatchStopHandle; } & Readonly<{ as: APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>; }> & Omit<Readonly<AComboboxInputProps> & Readonly<{ 'onUpdate:modelValue'?: ((args_0: string) => any) | undefined; }>, 'as'> & ShallowUnwrapRef<{}> & ExtractComputedReturns<{}> & ComponentCustomProperties & {} & { $slots: { default?: ((props: {}) => any) | undefined; }; }",
          "schema": {
            "as": {
              "name": "as",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>",
              "schema": {
                "kind": "enum",
                "type": "APrimitiveAsTag | Component<any, any, any, ComputedOptions, MethodOptions, {}, any>",
                "schema": {
                  "0": "'a'",
                  "1": "'button'",
                  "2": "'div'",
                  "3": "'form'",
                  "4": "'h2'",
                  "5": "'h3'",
                  "6": "'img'",
                  "7": "'input'",
                  "8": "'label'",
                  "9": "'li'",
                  "10": "'nav'",
                  "11": "'ol'",
                  "12": "'p'",
                  "13": "'span'",
                  "14": "'svg'",
                  "15": "'template'",
                  "16": "'ul'",
                  "17": {
                    "kind": "object",
                    "type": "string & {}",
                    "schema": {}
                  },
                  "18": {
                    "kind": "object",
                    "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                    "schema": {
                      "beforeRouteEnter": {
                        "name": "beforeRouteEnter",
                        "global": false,
                        "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuardWithThis<undefined> | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuardWithThis<undefined> | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteUpdate": {
                        "name": "beforeRouteUpdate",
                        "global": false,
                        "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "NavigationGuard | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                              "schema": []
                            }
                          }
                        }
                      },
                      "beforeRouteLeave": {
                        "name": "beforeRouteLeave",
                        "global": false,
                        "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                        "tags": [
                          {
                            "name": "param",
                            "text": "to - RouteLocationRaw we are navigating to"
                          },
                          {
                            "name": "param",
                            "text": "from - RouteLocationRaw we are navigating from"
                          },
                          {
                            "name": "param",
                            "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                          }
                        ],
                        "required": false,
                        "type": "NavigationGuard | undefined",
                        "schema": "NavigationGuard | undefined"
                      },
                      "head": {
                        "name": "head",
                        "global": false,
                        "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                        "tags": [],
                        "required": false,
                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                              "schema": []
                            }
                          }
                        }
                      }
                    }
                  },
                  "19": {
                    "kind": "event",
                    "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                    "schema": []
                  },
                  "20": {
                    "kind": "object",
                    "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                    "schema": {}
                  }
                }
              }
            },
            "modelValue": {
              "name": "modelValue",
              "global": false,
              "description": "The controlled value of the filter. Can be binded with with v-model.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "When `true`, prevents the user from interacting with item",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "onUpdate:modelValue": {
              "name": "onUpdate:modelValue",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((args_0: string) => any) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((args_0: string) => any) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(args_0: string): any",
                    "schema": []
                  }
                }
              }
            },
            "asChild": {
              "name": "asChild",
              "global": false,
              "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.\n\nRead our [Composition](https://akar.vinicunca.dev/core/guides/composition) guide for more details.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "displayValue": {
              "name": "displayValue",
              "global": false,
              "description": "The display value of input for selected item. Does not work with `multiple`.",
              "tags": [],
              "required": false,
              "type": "((val: any) => string) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((val: any) => string) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(val: any): string",
                    "schema": []
                  }
                }
              }
            },
            "autoFocus": {
              "name": "autoFocus",
              "global": false,
              "description": "Focus on element when mounted.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "$route": {
              "name": "$route",
              "global": false,
              "description": "Normalized current location. See {@link RouteLocationNormalizedLoaded}.",
              "tags": [],
              "required": true,
              "type": "RouteLocationNormalizedLoadedGeneric",
              "schema": {
                "kind": "object",
                "type": "RouteLocationNormalizedLoadedGeneric",
                "schema": {
                  "matched": {
                    "name": "matched",
                    "global": false,
                    "description": "Array of {@link RouteLocationMatched} containing only plain components (any\r\nlazy-loaded components have been loaded and were replaced inside the\r\n`components` object) so it can be directly used to display routes. It\r\ncannot contain redirect records either. **This property is non-enumerable**.",
                    "tags": [],
                    "required": true,
                    "type": "RouteLocationMatched[]",
                    "schema": {
                      "kind": "array",
                      "type": "RouteLocationMatched[]",
                      "schema": {
                        "0": {
                          "kind": "object",
                          "type": "RouteLocationMatched",
                          "schema": {
                            "components": {
                              "name": "components",
                              "global": false,
                              "description": "{@inheritDoc RouteRecordMultipleViews.components}",
                              "tags": [],
                              "required": true,
                              "type": "Record<string, RouteComponent> | null | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "Record<string, RouteComponent> | null | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "null",
                                  "2": "Record<string, RouteComponent>"
                                }
                              }
                            },
                            "path": {
                              "name": "path",
                              "global": false,
                              "description": "{@inheritDoc _RouteRecordBase.path}",
                              "tags": [],
                              "required": true,
                              "type": "string",
                              "schema": "string"
                            },
                            "redirect": {
                              "name": "redirect",
                              "global": false,
                              "description": "{@inheritDoc _RouteRecordBase.redirect}",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordRedirectOption | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "RouteRecordRedirectOption | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "string",
                                  "2": {
                                    "kind": "object",
                                    "type": "RouteLocationAsRelativeGeneric",
                                    "schema": {
                                      "name": {
                                        "name": "name",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "RouteRecordNameGeneric",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "RouteRecordNameGeneric",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "string",
                                            "2": "symbol"
                                          }
                                        }
                                      },
                                      "params": {
                                        "name": "params",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "RouteParamsRawGeneric | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "RouteParamsRawGeneric | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "RouteParamsRawGeneric"
                                          }
                                        }
                                      },
                                      "path": {
                                        "name": "path",
                                        "global": false,
                                        "description": "A relative path to the current location. This property should be removed",
                                        "tags": [],
                                        "required": false,
                                        "type": "undefined",
                                        "schema": "undefined"
                                      },
                                      "query": {
                                        "name": "query",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "LocationQueryRaw | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "LocationQueryRaw | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "LocationQueryRaw"
                                          }
                                        }
                                      },
                                      "hash": {
                                        "name": "hash",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "replace": {
                                        "name": "replace",
                                        "global": false,
                                        "description": "Replace the entry in the history instead of pushing a new entry",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "force": {
                                        "name": "force",
                                        "global": false,
                                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "state": {
                                        "name": "state",
                                        "global": false,
                                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                                        "tags": [],
                                        "required": false,
                                        "type": "HistoryState | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "HistoryState | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "object",
                                              "type": "HistoryState",
                                              "schema": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "3": {
                                    "kind": "object",
                                    "type": "RouteLocationAsPathGeneric",
                                    "schema": {
                                      "path": {
                                        "name": "path",
                                        "global": false,
                                        "description": "Percentage encoded pathname section of the URL.",
                                        "tags": [],
                                        "required": true,
                                        "type": "string",
                                        "schema": "string"
                                      },
                                      "query": {
                                        "name": "query",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "LocationQueryRaw | undefined",
                                        "schema": "LocationQueryRaw | undefined"
                                      },
                                      "hash": {
                                        "name": "hash",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "replace": {
                                        "name": "replace",
                                        "global": false,
                                        "description": "Replace the entry in the history instead of pushing a new entry",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "force": {
                                        "name": "force",
                                        "global": false,
                                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                                        "tags": [],
                                        "required": false,
                                        "type": "boolean | undefined",
                                        "schema": "boolean | undefined"
                                      },
                                      "state": {
                                        "name": "state",
                                        "global": false,
                                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                                        "tags": [],
                                        "required": false,
                                        "type": "HistoryState | undefined",
                                        "schema": "HistoryState | undefined"
                                      }
                                    }
                                  },
                                  "4": {
                                    "kind": "event",
                                    "type": "(to: RouteLocationGeneric): string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric",
                                    "schema": []
                                  }
                                }
                              }
                            },
                            "name": {
                              "name": "name",
                              "global": false,
                              "description": "{@inheritDoc _RouteRecordBase.name}",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordNameGeneric",
                              "schema": "RouteRecordNameGeneric"
                            },
                            "mods": {
                              "name": "mods",
                              "global": false,
                              "description": "Contains the original modules for lazy loaded components.",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": true,
                              "type": "Record<string, unknown>",
                              "schema": "Record<string, unknown>"
                            },
                            "children": {
                              "name": "children",
                              "global": false,
                              "description": "Nested route records.",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordRaw[]",
                              "schema": {
                                "kind": "array",
                                "type": "RouteRecordRaw[]",
                                "schema": {
                                  "0": {
                                    "kind": "enum",
                                    "type": "RouteRecordRaw",
                                    "schema": [
                                      {
                                        "kind": "object",
                                        "type": "RouteRecordSingleView",
                                        "schema": {
                                          "component": {
                                            "name": "component",
                                            "global": false,
                                            "description": "Component to display when the URL matches this route.",
                                            "tags": [],
                                            "required": true,
                                            "type": "RawRouteComponent",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "RawRouteComponent",
                                              "schema": {
                                                "0": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                                "1": "FunctionalComponent<any, {}, any, {}>",
                                                "2": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                                "3": {
                                                  "kind": "object",
                                                  "type": "DefineComponent",
                                                  "schema": {
                                                    "beforeRouteEnter": {
                                                      "name": "beforeRouteEnter",
                                                      "global": false,
                                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                                      "tags": [
                                                        {
                                                          "name": "param",
                                                          "text": "to - RouteLocationRaw we are navigating to"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "from - RouteLocationRaw we are navigating from"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                                        }
                                                      ],
                                                      "required": false,
                                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                                      "schema": "NavigationGuardWithThis<undefined> | undefined"
                                                    },
                                                    "beforeRouteUpdate": {
                                                      "name": "beforeRouteUpdate",
                                                      "global": false,
                                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                                      "tags": [
                                                        {
                                                          "name": "param",
                                                          "text": "to - RouteLocationRaw we are navigating to"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "from - RouteLocationRaw we are navigating from"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                                        }
                                                      ],
                                                      "required": false,
                                                      "type": "NavigationGuard | undefined",
                                                      "schema": "NavigationGuard | undefined"
                                                    },
                                                    "beforeRouteLeave": {
                                                      "name": "beforeRouteLeave",
                                                      "global": false,
                                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                                      "tags": [
                                                        {
                                                          "name": "param",
                                                          "text": "to - RouteLocationRaw we are navigating to"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "from - RouteLocationRaw we are navigating from"
                                                        },
                                                        {
                                                          "name": "param",
                                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                                        }
                                                      ],
                                                      "required": false,
                                                      "type": "NavigationGuard | undefined",
                                                      "schema": "NavigationGuard | undefined"
                                                    },
                                                    "head": {
                                                      "name": "head",
                                                      "global": false,
                                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                                      "schema": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined"
                                                    }
                                                  }
                                                },
                                                "4": {
                                                  "kind": "event",
                                                  "type": "(): Promise<RouteComponent>"
                                                }
                                              }
                                            }
                                          },
                                          "components": {
                                            "name": "components",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "children": {
                                            "name": "children",
                                            "global": false,
                                            "description": "Array of nested routes.",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "redirect": {
                                            "name": "redirect",
                                            "global": false,
                                            "description": "Where to redirect if the route is directly matched. The redirection happens\r\nbefore any navigation guard and triggers a new navigation with the new\r\ntarget location.",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "props": {
                                            "name": "props",
                                            "global": false,
                                            "description": "Allow passing down params as props to the component rendered by `router-view`.",
                                            "tags": [],
                                            "required": false,
                                            "type": "_RouteRecordProps<string | symbol> | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "_RouteRecordProps<string | symbol> | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "false",
                                                "2": "true",
                                                "3": "Record<string, any>",
                                                "4": {
                                                  "kind": "event",
                                                  "type": "(to: RouteLocationNormalizedGeneric): Record<string, any>",
                                                  "schema": []
                                                }
                                              }
                                            }
                                          },
                                          "path": {
                                            "name": "path",
                                            "global": false,
                                            "description": "Path of the record. Should start with `/` unless the record is the child of\r\nanother record.",
                                            "tags": [
                                              {
                                                "name": "example",
                                                "text": "`/users/:id` matches `/users/1` as well as `/users/posva`."
                                              }
                                            ],
                                            "required": true,
                                            "type": "string",
                                            "schema": "string"
                                          },
                                          "alias": {
                                            "name": "alias",
                                            "global": false,
                                            "description": "Aliases for the record. Allows defining extra paths that will behave like a\r\ncopy of the record. Allows having paths shorthands like `/users/:id` and\r\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                            "tags": [],
                                            "required": false,
                                            "type": "string | string[] | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "string | string[] | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "string",
                                                "2": {
                                                  "kind": "array",
                                                  "type": "string[]",
                                                  "schema": [
                                                    "string"
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          "name": {
                                            "name": "name",
                                            "global": false,
                                            "description": "Name for the route record. Must be unique.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordNameGeneric",
                                            "schema": "RouteRecordNameGeneric"
                                          },
                                          "beforeEnter": {
                                            "name": "beforeEnter",
                                            "global": false,
                                            "description": "Before Enter guard specific to this record. Note `beforeEnter` has no\r\neffect if the record has a `redirect` property.",
                                            "tags": [],
                                            "required": false,
                                            "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "NavigationGuardWithThis<undefined>",
                                                "2": {
                                                  "kind": "array",
                                                  "type": "NavigationGuardWithThis<undefined>[]",
                                                  "schema": [
                                                    "NavigationGuardWithThis<undefined>"
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          "meta": {
                                            "name": "meta",
                                            "global": false,
                                            "description": "Arbitrary data attached to the record.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteMeta | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "RouteMeta | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": {
                                                  "kind": "object",
                                                  "type": "RouteMeta",
                                                  "schema": {
                                                    "colorMode": {
                                                      "name": "colorMode",
                                                      "global": false,
                                                      "description": "",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | undefined",
                                                      "schema": "string | undefined"
                                                    },
                                                    "validate": {
                                                      "name": "validate",
                                                      "global": false,
                                                      "description": "Validate whether a given route can validly be rendered with this page.\n\nReturn true if it is valid, or false if not. If another match can't be found,\nthis will mean a 404. You can also directly return an object with\nstatusCode/statusMessage to respond immediately with an error (other matches\nwill not be checked).",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "((route: RouteLocationNormalizedGeneric) => boolean | Partial<NuxtError<unknown>> | Promise<boolean | Partial<NuxtError<unknown>>>) | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "((route: RouteLocationNormalizedGeneric) => boolean | Partial<NuxtError<unknown>> | Promise<boolean | Partial<NuxtError<unknown>>>) | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": {
                                                            "kind": "event",
                                                            "type": "(route: RouteLocationNormalizedGeneric): boolean | Partial<NuxtError<unknown>> | Promise<boolean | Partial<NuxtError<unknown>>>",
                                                            "schema": []
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "redirect": {
                                                      "name": "redirect",
                                                      "global": false,
                                                      "description": "Where to redirect if the route is directly matched. The redirection happens\nbefore any navigation guard and triggers a new navigation with the new\ntarget location.",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | ((to: RouteLocationGeneric) => string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric) | { name?: RouteRecordNameGeneric; params?: RouteParamsRawGeneric | undefined; path?: undefined; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; } | { path: string; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; } | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "string | ((to: RouteLocationGeneric) => string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric) | { name?: RouteRecordNameGeneric; params?: RouteParamsRawGeneric | undefined; path?: undefined; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; } | { path: string; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; } | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "string",
                                                          "2": "(to: RouteLocationGeneric) => string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric",
                                                          "3": "{ name?: RouteRecordNameGeneric; params?: RouteParamsRawGeneric | undefined; path?: undefined; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; }",
                                                          "4": "{ path: string; query?: LocationQueryRaw | undefined; hash?: string | undefined; replace?: boolean | undefined; force?: boolean | undefined; state?: HistoryState | undefined; }"
                                                        }
                                                      }
                                                    },
                                                    "alias": {
                                                      "name": "alias",
                                                      "global": false,
                                                      "description": "Aliases for the record. Allows defining extra paths that will behave like a\ncopy of the record. Allows having paths shorthands like `/users/:id` and\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | string[] | undefined",
                                                      "schema": "string | string[] | undefined"
                                                    },
                                                    "pageTransition": {
                                                      "name": "pageTransition",
                                                      "global": false,
                                                      "description": "",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "boolean | { name?: string | undefined; type?: AnimationTypes | undefined; css?: boolean | undefined; duration?: number | { enter: number; leave: number; } | undefined; enterFromClass?: string | undefined; enterActiveClass?: string | undefined; enterToClass?: string | undefined; appearFromClass?: string | undefined; appearActiveClass?: string | undefined; appearToClass?: string | undefined; leaveFromClass?: string | undefined; leaveActiveClass?: string | undefined; leaveToClass?: string | undefined; mode?: 'default' | 'in-out' | 'out-in' | undefined; appear?: boolean | undefined; persisted?: boolean | undefined; onBeforeEnter?: Hook<(el: Element) => void> | undefined; onEnter?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterEnter?: Hook<(el: Element) => void> | undefined; onEnterCancelled?: Hook<(el: Element) => void> | undefined; onBeforeLeave?: Hook<(el: Element) => void> | undefined; onLeave?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterLeave?: Hook<(el: Element) => void> | undefined; onLeaveCancelled?: Hook<(el: Element) => void> | undefined; onBeforeAppear?: Hook<(el: Element) => void> | undefined; onAppear?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterAppear?: Hook<(el: Element) => void> | undefined; onAppearCancelled?: Hook<(el: Element) => void> | undefined; } | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "boolean | { name?: string | undefined; type?: AnimationTypes | undefined; css?: boolean | undefined; duration?: number | { enter: number; leave: number; } | undefined; enterFromClass?: string | undefined; enterActiveClass?: string | undefined; enterToClass?: string | undefined; appearFromClass?: string | undefined; appearActiveClass?: string | undefined; appearToClass?: string | undefined; leaveFromClass?: string | undefined; leaveActiveClass?: string | undefined; leaveToClass?: string | undefined; mode?: 'default' | 'in-out' | 'out-in' | undefined; appear?: boolean | undefined; persisted?: boolean | undefined; onBeforeEnter?: Hook<(el: Element) => void> | undefined; onEnter?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterEnter?: Hook<(el: Element) => void> | undefined; onEnterCancelled?: Hook<(el: Element) => void> | undefined; onBeforeLeave?: Hook<(el: Element) => void> | undefined; onLeave?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterLeave?: Hook<(el: Element) => void> | undefined; onLeaveCancelled?: Hook<(el: Element) => void> | undefined; onBeforeAppear?: Hook<(el: Element) => void> | undefined; onAppear?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterAppear?: Hook<(el: Element) => void> | undefined; onAppearCancelled?: Hook<(el: Element) => void> | undefined; } | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "false",
                                                          "2": "true",
                                                          "3": "{ name?: string | undefined; type?: AnimationTypes | undefined; css?: boolean | undefined; duration?: number | { enter: number; leave: number; } | undefined; enterFromClass?: string | undefined; enterActiveClass?: string | undefined; enterToClass?: string | undefined; appearFromClass?: string | undefined; appearActiveClass?: string | undefined; appearToClass?: string | undefined; leaveFromClass?: string | undefined; leaveActiveClass?: string | undefined; leaveToClass?: string | undefined; mode?: 'default' | 'in-out' | 'out-in' | undefined; appear?: boolean | undefined; persisted?: boolean | undefined; onBeforeEnter?: Hook<(el: Element) => void> | undefined; onEnter?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterEnter?: Hook<(el: Element) => void> | undefined; onEnterCancelled?: Hook<(el: Element) => void> | undefined; onBeforeLeave?: Hook<(el: Element) => void> | undefined; onLeave?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterLeave?: Hook<(el: Element) => void> | undefined; onLeaveCancelled?: Hook<(el: Element) => void> | undefined; onBeforeAppear?: Hook<(el: Element) => void> | undefined; onAppear?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterAppear?: Hook<(el: Element) => void> | undefined; onAppearCancelled?: Hook<(el: Element) => void> | undefined; }"
                                                        }
                                                      }
                                                    },
                                                    "layoutTransition": {
                                                      "name": "layoutTransition",
                                                      "global": false,
                                                      "description": "",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "boolean | { name?: string | undefined; type?: AnimationTypes | undefined; css?: boolean | undefined; duration?: number | { enter: number; leave: number; } | undefined; enterFromClass?: string | undefined; enterActiveClass?: string | undefined; enterToClass?: string | undefined; appearFromClass?: string | undefined; appearActiveClass?: string | undefined; appearToClass?: string | undefined; leaveFromClass?: string | undefined; leaveActiveClass?: string | undefined; leaveToClass?: string | undefined; mode?: 'default' | 'in-out' | 'out-in' | undefined; appear?: boolean | undefined; persisted?: boolean | undefined; onBeforeEnter?: Hook<(el: Element) => void> | undefined; onEnter?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterEnter?: Hook<(el: Element) => void> | undefined; onEnterCancelled?: Hook<(el: Element) => void> | undefined; onBeforeLeave?: Hook<(el: Element) => void> | undefined; onLeave?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterLeave?: Hook<(el: Element) => void> | undefined; onLeaveCancelled?: Hook<(el: Element) => void> | undefined; onBeforeAppear?: Hook<(el: Element) => void> | undefined; onAppear?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterAppear?: Hook<(el: Element) => void> | undefined; onAppearCancelled?: Hook<(el: Element) => void> | undefined; } | undefined",
                                                      "schema": "boolean | { name?: string | undefined; type?: AnimationTypes | undefined; css?: boolean | undefined; duration?: number | { enter: number; leave: number; } | undefined; enterFromClass?: string | undefined; enterActiveClass?: string | undefined; enterToClass?: string | undefined; appearFromClass?: string | undefined; appearActiveClass?: string | undefined; appearToClass?: string | undefined; leaveFromClass?: string | undefined; leaveActiveClass?: string | undefined; leaveToClass?: string | undefined; mode?: 'default' | 'in-out' | 'out-in' | undefined; appear?: boolean | undefined; persisted?: boolean | undefined; onBeforeEnter?: Hook<(el: Element) => void> | undefined; onEnter?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterEnter?: Hook<(el: Element) => void> | undefined; onEnterCancelled?: Hook<(el: Element) => void> | undefined; onBeforeLeave?: Hook<(el: Element) => void> | undefined; onLeave?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterLeave?: Hook<(el: Element) => void> | undefined; onLeaveCancelled?: Hook<(el: Element) => void> | undefined; onBeforeAppear?: Hook<(el: Element) => void> | undefined; onAppear?: Hook<(el: Element, done: () => void) => void> | undefined; onAfterAppear?: Hook<(el: Element) => void> | undefined; onAppearCancelled?: Hook<(el: Element) => void> | undefined; } | undefined"
                                                    },
                                                    "key": {
                                                      "name": "key",
                                                      "global": false,
                                                      "description": "",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | false | ((route: RouteLocationNormalizedLoadedGeneric) => string) | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "string | false | ((route: RouteLocationNormalizedLoadedGeneric) => string) | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "string",
                                                          "2": "false",
                                                          "3": {
                                                            "kind": "event",
                                                            "type": "(route: RouteLocationNormalizedLoadedGeneric): string",
                                                            "schema": []
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "keepalive": {
                                                      "name": "keepalive",
                                                      "global": false,
                                                      "description": "",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "boolean | { include?: MatchPattern | undefined; exclude?: MatchPattern | undefined; max?: string | number | undefined; } | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "boolean | { include?: MatchPattern | undefined; exclude?: MatchPattern | undefined; max?: string | number | undefined; } | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "false",
                                                          "2": "true",
                                                          "3": "{ include?: MatchPattern | undefined; exclude?: MatchPattern | undefined; max?: string | number | undefined; }"
                                                        }
                                                      }
                                                    },
                                                    "name": {
                                                      "name": "name",
                                                      "global": false,
                                                      "description": "You may define a name for this page's route.",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | undefined",
                                                      "schema": "string | undefined"
                                                    },
                                                    "path": {
                                                      "name": "path",
                                                      "global": false,
                                                      "description": "You may define a path matcher, if you have a more complex pattern than can be expressed with the file name.",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "string | undefined",
                                                      "schema": "string | undefined"
                                                    },
                                                    "props": {
                                                      "name": "props",
                                                      "global": false,
                                                      "description": "Allows accessing the route `params` as props passed to the page component.",
                                                      "tags": [
                                                        {
                                                          "name": "see",
                                                          "text": "https://router.vuejs.org/guide/essentials/passing-props"
                                                        }
                                                      ],
                                                      "required": false,
                                                      "type": "_RouteRecordProps<string | symbol> | Record<string, _RouteRecordProps<string | symbol>> | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "_RouteRecordProps<string | symbol> | Record<string, _RouteRecordProps<string | symbol>> | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "false",
                                                          "2": "true",
                                                          "3": "Record<string, any>",
                                                          "4": "(to: RouteLocationNormalizedGeneric) => Record<string, any>",
                                                          "5": "Record<string, _RouteRecordProps<string | symbol>>"
                                                        }
                                                      }
                                                    },
                                                    "scrollToTop": {
                                                      "name": "scrollToTop",
                                                      "global": false,
                                                      "description": "Set to `false` to avoid scrolling to top on page navigations",
                                                      "tags": [],
                                                      "required": false,
                                                      "type": "boolean | ((to: RouteLocationNormalizedLoadedGeneric, from: RouteLocationNormalizedLoadedGeneric) => boolean) | undefined",
                                                      "schema": {
                                                        "kind": "enum",
                                                        "type": "boolean | ((to: RouteLocationNormalizedLoadedGeneric, from: RouteLocationNormalizedLoadedGeneric) => boolean) | undefined",
                                                        "schema": {
                                                          "0": "undefined",
                                                          "1": "false",
                                                          "2": "true",
                                                          "3": {
                                                            "kind": "event",
                                                            "type": "(to: RouteLocationNormalizedLoadedGeneric, from: RouteLocationNormalizedLoadedGeneric): boolean",
                                                            "schema": []
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "end": {
                                            "name": "end",
                                            "global": false,
                                            "description": "Should the RegExp match until the end by appending a `$` to it.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`true`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "sensitive": {
                                            "name": "sensitive",
                                            "global": false,
                                            "description": "Makes the RegExp case-sensitive.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "strict": {
                                            "name": "strict",
                                            "global": false,
                                            "description": "Whether to disallow a trailing slash or not.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          }
                                        }
                                      },
                                      {
                                        "kind": "object",
                                        "type": "RouteRecordSingleViewWithChildren",
                                        "schema": {
                                          "component": {
                                            "name": "component",
                                            "global": false,
                                            "description": "Component to display when the URL matches this route.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RawRouteComponent | null | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "RawRouteComponent | null | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "null",
                                                "2": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                                "3": "FunctionalComponent<any, {}, any, {}>",
                                                "4": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                                "5": "DefineComponent",
                                                "6": "Lazy<RouteComponent>"
                                              }
                                            }
                                          },
                                          "components": {
                                            "name": "components",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "children": {
                                            "name": "children",
                                            "global": false,
                                            "description": "Array of nested routes.",
                                            "tags": [],
                                            "required": true,
                                            "type": "RouteRecordRaw[]",
                                            "schema": "RouteRecordRaw[]"
                                          },
                                          "props": {
                                            "name": "props",
                                            "global": false,
                                            "description": "Allow passing down params as props to the component rendered by `router-view`.",
                                            "tags": [],
                                            "required": false,
                                            "type": "_RouteRecordProps<string | symbol> | undefined",
                                            "schema": "_RouteRecordProps<string | symbol> | undefined"
                                          },
                                          "path": {
                                            "name": "path",
                                            "global": false,
                                            "description": "Path of the record. Should start with `/` unless the record is the child of\r\nanother record.",
                                            "tags": [
                                              {
                                                "name": "example",
                                                "text": "`/users/:id` matches `/users/1` as well as `/users/posva`."
                                              }
                                            ],
                                            "required": true,
                                            "type": "string",
                                            "schema": "string"
                                          },
                                          "redirect": {
                                            "name": "redirect",
                                            "global": false,
                                            "description": "Where to redirect if the route is directly matched. The redirection happens\r\nbefore any navigation guard and triggers a new navigation with the new\r\ntarget location.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordRedirectOption | undefined",
                                            "schema": "RouteRecordRedirectOption | undefined"
                                          },
                                          "alias": {
                                            "name": "alias",
                                            "global": false,
                                            "description": "Aliases for the record. Allows defining extra paths that will behave like a\r\ncopy of the record. Allows having paths shorthands like `/users/:id` and\r\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                            "tags": [],
                                            "required": false,
                                            "type": "string | string[] | undefined",
                                            "schema": "string | string[] | undefined"
                                          },
                                          "name": {
                                            "name": "name",
                                            "global": false,
                                            "description": "Name for the route record. Must be unique.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordNameGeneric",
                                            "schema": "RouteRecordNameGeneric"
                                          },
                                          "beforeEnter": {
                                            "name": "beforeEnter",
                                            "global": false,
                                            "description": "Before Enter guard specific to this record. Note `beforeEnter` has no\r\neffect if the record has a `redirect` property.",
                                            "tags": [],
                                            "required": false,
                                            "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                            "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                                          },
                                          "meta": {
                                            "name": "meta",
                                            "global": false,
                                            "description": "Arbitrary data attached to the record.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteMeta | undefined",
                                            "schema": "RouteMeta | undefined"
                                          },
                                          "end": {
                                            "name": "end",
                                            "global": false,
                                            "description": "Should the RegExp match until the end by appending a `$` to it.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`true`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "sensitive": {
                                            "name": "sensitive",
                                            "global": false,
                                            "description": "Makes the RegExp case-sensitive.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "strict": {
                                            "name": "strict",
                                            "global": false,
                                            "description": "Whether to disallow a trailing slash or not.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          }
                                        }
                                      },
                                      {
                                        "kind": "object",
                                        "type": "RouteRecordMultipleViews",
                                        "schema": {
                                          "components": {
                                            "name": "components",
                                            "global": false,
                                            "description": "Components to display when the URL matches this route. Allow using named views.",
                                            "tags": [],
                                            "required": true,
                                            "type": "Record<string, RawRouteComponent>",
                                            "schema": "Record<string, RawRouteComponent>"
                                          },
                                          "component": {
                                            "name": "component",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "children": {
                                            "name": "children",
                                            "global": false,
                                            "description": "Array of nested routes.",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "redirect": {
                                            "name": "redirect",
                                            "global": false,
                                            "description": "Where to redirect if the route is directly matched. The redirection happens\r\nbefore any navigation guard and triggers a new navigation with the new\r\ntarget location.",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "props": {
                                            "name": "props",
                                            "global": false,
                                            "description": "Allow passing down params as props to the component rendered by\r\n`router-view`. Should be an object with the same keys as `components` or a\r\nboolean to be applied to every component.",
                                            "tags": [],
                                            "required": false,
                                            "type": "boolean | Record<string, _RouteRecordProps<string | symbol>> | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "boolean | Record<string, _RouteRecordProps<string | symbol>> | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "false",
                                                "2": "true",
                                                "3": "Record<string, _RouteRecordProps<string | symbol>>"
                                              }
                                            }
                                          },
                                          "path": {
                                            "name": "path",
                                            "global": false,
                                            "description": "Path of the record. Should start with `/` unless the record is the child of\r\nanother record.",
                                            "tags": [
                                              {
                                                "name": "example",
                                                "text": "`/users/:id` matches `/users/1` as well as `/users/posva`."
                                              }
                                            ],
                                            "required": true,
                                            "type": "string",
                                            "schema": "string"
                                          },
                                          "alias": {
                                            "name": "alias",
                                            "global": false,
                                            "description": "Aliases for the record. Allows defining extra paths that will behave like a\r\ncopy of the record. Allows having paths shorthands like `/users/:id` and\r\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                            "tags": [],
                                            "required": false,
                                            "type": "string | string[] | undefined",
                                            "schema": "string | string[] | undefined"
                                          },
                                          "name": {
                                            "name": "name",
                                            "global": false,
                                            "description": "Name for the route record. Must be unique.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordNameGeneric",
                                            "schema": "RouteRecordNameGeneric"
                                          },
                                          "beforeEnter": {
                                            "name": "beforeEnter",
                                            "global": false,
                                            "description": "Before Enter guard specific to this record. Note `beforeEnter` has no\r\neffect if the record has a `redirect` property.",
                                            "tags": [],
                                            "required": false,
                                            "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                            "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                                          },
                                          "meta": {
                                            "name": "meta",
                                            "global": false,
                                            "description": "Arbitrary data attached to the record.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteMeta | undefined",
                                            "schema": "RouteMeta | undefined"
                                          },
                                          "end": {
                                            "name": "end",
                                            "global": false,
                                            "description": "Should the RegExp match until the end by appending a `$` to it.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`true`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "sensitive": {
                                            "name": "sensitive",
                                            "global": false,
                                            "description": "Makes the RegExp case-sensitive.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "strict": {
                                            "name": "strict",
                                            "global": false,
                                            "description": "Whether to disallow a trailing slash or not.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          }
                                        }
                                      },
                                      {
                                        "kind": "object",
                                        "type": "RouteRecordMultipleViewsWithChildren",
                                        "schema": {
                                          "components": {
                                            "name": "components",
                                            "global": false,
                                            "description": "Components to display when the URL matches this route. Allow using named views.",
                                            "tags": [],
                                            "required": false,
                                            "type": "Record<string, RawRouteComponent> | null | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "Record<string, RawRouteComponent> | null | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "null",
                                                "2": "Record<string, RawRouteComponent>"
                                              }
                                            }
                                          },
                                          "component": {
                                            "name": "component",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "children": {
                                            "name": "children",
                                            "global": false,
                                            "description": "Array of nested routes.",
                                            "tags": [],
                                            "required": true,
                                            "type": "RouteRecordRaw[]",
                                            "schema": "RouteRecordRaw[]"
                                          },
                                          "props": {
                                            "name": "props",
                                            "global": false,
                                            "description": "Allow passing down params as props to the component rendered by\r\n`router-view`. Should be an object with the same keys as `components` or a\r\nboolean to be applied to every component.",
                                            "tags": [],
                                            "required": false,
                                            "type": "boolean | Record<string, _RouteRecordProps<string | symbol>> | undefined",
                                            "schema": "boolean | Record<string, _RouteRecordProps<string | symbol>> | undefined"
                                          },
                                          "path": {
                                            "name": "path",
                                            "global": false,
                                            "description": "Path of the record. Should start with `/` unless the record is the child of\r\nanother record.",
                                            "tags": [
                                              {
                                                "name": "example",
                                                "text": "`/users/:id` matches `/users/1` as well as `/users/posva`."
                                              }
                                            ],
                                            "required": true,
                                            "type": "string",
                                            "schema": "string"
                                          },
                                          "redirect": {
                                            "name": "redirect",
                                            "global": false,
                                            "description": "Where to redirect if the route is directly matched. The redirection happens\r\nbefore any navigation guard and triggers a new navigation with the new\r\ntarget location.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordRedirectOption | undefined",
                                            "schema": "RouteRecordRedirectOption | undefined"
                                          },
                                          "alias": {
                                            "name": "alias",
                                            "global": false,
                                            "description": "Aliases for the record. Allows defining extra paths that will behave like a\r\ncopy of the record. Allows having paths shorthands like `/users/:id` and\r\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                            "tags": [],
                                            "required": false,
                                            "type": "string | string[] | undefined",
                                            "schema": "string | string[] | undefined"
                                          },
                                          "name": {
                                            "name": "name",
                                            "global": false,
                                            "description": "Name for the route record. Must be unique.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordNameGeneric",
                                            "schema": "RouteRecordNameGeneric"
                                          },
                                          "beforeEnter": {
                                            "name": "beforeEnter",
                                            "global": false,
                                            "description": "Before Enter guard specific to this record. Note `beforeEnter` has no\r\neffect if the record has a `redirect` property.",
                                            "tags": [],
                                            "required": false,
                                            "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                            "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                                          },
                                          "meta": {
                                            "name": "meta",
                                            "global": false,
                                            "description": "Arbitrary data attached to the record.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteMeta | undefined",
                                            "schema": "RouteMeta | undefined"
                                          },
                                          "end": {
                                            "name": "end",
                                            "global": false,
                                            "description": "Should the RegExp match until the end by appending a `$` to it.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`true`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "sensitive": {
                                            "name": "sensitive",
                                            "global": false,
                                            "description": "Makes the RegExp case-sensitive.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "strict": {
                                            "name": "strict",
                                            "global": false,
                                            "description": "Whether to disallow a trailing slash or not.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          }
                                        }
                                      },
                                      {
                                        "kind": "object",
                                        "type": "RouteRecordRedirect",
                                        "schema": {
                                          "redirect": {
                                            "name": "redirect",
                                            "global": false,
                                            "description": "Where to redirect if the route is directly matched. The redirection happens\r\nbefore any navigation guard and triggers a new navigation with the new\r\ntarget location.",
                                            "tags": [],
                                            "required": true,
                                            "type": "RouteRecordRedirectOption",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "RouteRecordRedirectOption",
                                              "schema": {
                                                "0": "string",
                                                "1": "RouteLocationAsRelativeGeneric",
                                                "2": "RouteLocationAsPathGeneric",
                                                "3": "(to: RouteLocationGeneric) => string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric"
                                              }
                                            }
                                          },
                                          "component": {
                                            "name": "component",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "components": {
                                            "name": "components",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "props": {
                                            "name": "props",
                                            "global": false,
                                            "description": "Allow passing down params as props to the component rendered by `router-view`.",
                                            "tags": [],
                                            "required": false,
                                            "type": "undefined",
                                            "schema": "undefined"
                                          },
                                          "path": {
                                            "name": "path",
                                            "global": false,
                                            "description": "Path of the record. Should start with `/` unless the record is the child of\r\nanother record.",
                                            "tags": [
                                              {
                                                "name": "example",
                                                "text": "`/users/:id` matches `/users/1` as well as `/users/posva`."
                                              }
                                            ],
                                            "required": true,
                                            "type": "string",
                                            "schema": "string"
                                          },
                                          "alias": {
                                            "name": "alias",
                                            "global": false,
                                            "description": "Aliases for the record. Allows defining extra paths that will behave like a\r\ncopy of the record. Allows having paths shorthands like `/users/:id` and\r\n`/u/:id`. All `alias` and `path` values must share the same params.",
                                            "tags": [],
                                            "required": false,
                                            "type": "string | string[] | undefined",
                                            "schema": "string | string[] | undefined"
                                          },
                                          "name": {
                                            "name": "name",
                                            "global": false,
                                            "description": "Name for the route record. Must be unique.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordNameGeneric",
                                            "schema": "RouteRecordNameGeneric"
                                          },
                                          "beforeEnter": {
                                            "name": "beforeEnter",
                                            "global": false,
                                            "description": "Before Enter guard specific to this record. Note `beforeEnter` has no\r\neffect if the record has a `redirect` property.",
                                            "tags": [],
                                            "required": false,
                                            "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                            "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                                          },
                                          "meta": {
                                            "name": "meta",
                                            "global": false,
                                            "description": "Arbitrary data attached to the record.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteMeta | undefined",
                                            "schema": "RouteMeta | undefined"
                                          },
                                          "children": {
                                            "name": "children",
                                            "global": false,
                                            "description": "Array of nested routes.",
                                            "tags": [],
                                            "required": false,
                                            "type": "RouteRecordRaw[] | undefined",
                                            "schema": {
                                              "kind": "enum",
                                              "type": "RouteRecordRaw[] | undefined",
                                              "schema": {
                                                "0": "undefined",
                                                "1": "RouteRecordRaw[]"
                                              }
                                            }
                                          },
                                          "end": {
                                            "name": "end",
                                            "global": false,
                                            "description": "Should the RegExp match until the end by appending a `$` to it.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`true`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "sensitive": {
                                            "name": "sensitive",
                                            "global": false,
                                            "description": "Makes the RegExp case-sensitive.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          },
                                          "strict": {
                                            "name": "strict",
                                            "global": false,
                                            "description": "Whether to disallow a trailing slash or not.",
                                            "tags": [
                                              {
                                                "name": "defaultValue",
                                                "text": "`false`"
                                              }
                                            ],
                                            "required": false,
                                            "type": "boolean | undefined",
                                            "schema": "boolean | undefined"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "meta": {
                              "name": "meta",
                              "global": false,
                              "description": "{@inheritDoc _RouteRecordBase.meta}",
                              "tags": [],
                              "required": true,
                              "type": "RouteMeta",
                              "schema": "RouteMeta"
                            },
                            "props": {
                              "name": "props",
                              "global": false,
                              "description": "{@inheritDoc RouteRecordMultipleViews.props}",
                              "tags": [],
                              "required": true,
                              "type": "Record<string, _RouteRecordProps<string | symbol>>",
                              "schema": "Record<string, _RouteRecordProps<string | symbol>>"
                            },
                            "beforeEnter": {
                              "name": "beforeEnter",
                              "global": false,
                              "description": "Registered beforeEnter guards",
                              "tags": [],
                              "required": true,
                              "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                              "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                            },
                            "leaveGuards": {
                              "name": "leaveGuards",
                              "global": false,
                              "description": "Registered leave guards",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": true,
                              "type": "Set<NavigationGuard>",
                              "schema": "Set<NavigationGuard>"
                            },
                            "updateGuards": {
                              "name": "updateGuards",
                              "global": false,
                              "description": "Registered update guards",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": true,
                              "type": "Set<NavigationGuard>",
                              "schema": "Set<NavigationGuard>"
                            },
                            "enterCallbacks": {
                              "name": "enterCallbacks",
                              "global": false,
                              "description": "Registered beforeRouteEnter callbacks passed to `next` or returned in guards",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": true,
                              "type": "Record<string, NavigationGuardNextCallback[]>",
                              "schema": "Record<string, NavigationGuardNextCallback[]>"
                            },
                            "instances": {
                              "name": "instances",
                              "global": false,
                              "description": "Mounted route component instances\r\nHaving the instances on the record mean beforeRouteUpdate and\r\nbeforeRouteLeave guards can only be invoked with the latest mounted app\r\ninstance if there are multiple application instances rendering the same\r\nview, basically duplicating the content on the page, which shouldn't happen\r\nin practice. It will work if multiple apps are rendering different named\r\nviews.",
                              "tags": [],
                              "required": true,
                              "type": "Record<string, ComponentPublicInstance | null | undefined>",
                              "schema": "Record<string, ComponentPublicInstance | null | undefined>"
                            },
                            "aliasOf": {
                              "name": "aliasOf",
                              "global": false,
                              "description": "Defines if this record is the alias of another one. This property is\r\n`undefined` if the record is the original one.",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordNormalized | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "RouteRecordNormalized | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "object",
                                    "type": "RouteRecordNormalized",
                                    "schema": {
                                      "path": {
                                        "name": "path",
                                        "global": false,
                                        "description": "{@inheritDoc _RouteRecordBase.path}",
                                        "tags": [],
                                        "required": true,
                                        "type": "string",
                                        "schema": "string"
                                      },
                                      "redirect": {
                                        "name": "redirect",
                                        "global": false,
                                        "description": "{@inheritDoc _RouteRecordBase.redirect}",
                                        "tags": [],
                                        "required": true,
                                        "type": "RouteRecordRedirectOption | undefined",
                                        "schema": "RouteRecordRedirectOption | undefined"
                                      },
                                      "name": {
                                        "name": "name",
                                        "global": false,
                                        "description": "{@inheritDoc _RouteRecordBase.name}",
                                        "tags": [],
                                        "required": true,
                                        "type": "RouteRecordNameGeneric",
                                        "schema": "RouteRecordNameGeneric"
                                      },
                                      "components": {
                                        "name": "components",
                                        "global": false,
                                        "description": "{@inheritDoc RouteRecordMultipleViews.components}",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, RawRouteComponent> | null | undefined",
                                        "schema": "Record<string, RawRouteComponent> | null | undefined"
                                      },
                                      "mods": {
                                        "name": "mods",
                                        "global": false,
                                        "description": "Contains the original modules for lazy loaded components.",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "Record<string, unknown>",
                                        "schema": "Record<string, unknown>"
                                      },
                                      "children": {
                                        "name": "children",
                                        "global": false,
                                        "description": "Nested route records.",
                                        "tags": [],
                                        "required": true,
                                        "type": "RouteRecordRaw[]",
                                        "schema": "RouteRecordRaw[]"
                                      },
                                      "meta": {
                                        "name": "meta",
                                        "global": false,
                                        "description": "{@inheritDoc _RouteRecordBase.meta}",
                                        "tags": [],
                                        "required": true,
                                        "type": "RouteMeta",
                                        "schema": "RouteMeta"
                                      },
                                      "props": {
                                        "name": "props",
                                        "global": false,
                                        "description": "{@inheritDoc RouteRecordMultipleViews.props}",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, _RouteRecordProps<string | symbol>>",
                                        "schema": "Record<string, _RouteRecordProps<string | symbol>>"
                                      },
                                      "beforeEnter": {
                                        "name": "beforeEnter",
                                        "global": false,
                                        "description": "Registered beforeEnter guards",
                                        "tags": [],
                                        "required": true,
                                        "type": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined",
                                        "schema": "NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[] | undefined"
                                      },
                                      "leaveGuards": {
                                        "name": "leaveGuards",
                                        "global": false,
                                        "description": "Registered leave guards",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "Set<NavigationGuard>",
                                        "schema": "Set<NavigationGuard>"
                                      },
                                      "updateGuards": {
                                        "name": "updateGuards",
                                        "global": false,
                                        "description": "Registered update guards",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "Set<NavigationGuard>",
                                        "schema": "Set<NavigationGuard>"
                                      },
                                      "enterCallbacks": {
                                        "name": "enterCallbacks",
                                        "global": false,
                                        "description": "Registered beforeRouteEnter callbacks passed to `next` or returned in guards",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "Record<string, NavigationGuardNextCallback[]>",
                                        "schema": "Record<string, NavigationGuardNextCallback[]>"
                                      },
                                      "instances": {
                                        "name": "instances",
                                        "global": false,
                                        "description": "Mounted route component instances\r\nHaving the instances on the record mean beforeRouteUpdate and\r\nbeforeRouteLeave guards can only be invoked with the latest mounted app\r\ninstance if there are multiple application instances rendering the same\r\nview, basically duplicating the content on the page, which shouldn't happen\r\nin practice. It will work if multiple apps are rendering different named\r\nviews.",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, ComponentPublicInstance | null | undefined>",
                                        "schema": "Record<string, ComponentPublicInstance | null | undefined>"
                                      },
                                      "aliasOf": {
                                        "name": "aliasOf",
                                        "global": false,
                                        "description": "Defines if this record is the alias of another one. This property is\r\n`undefined` if the record is the original one.",
                                        "tags": [],
                                        "required": true,
                                        "type": "RouteRecordNormalized | undefined",
                                        "schema": "RouteRecordNormalized | undefined"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "name": "name",
                    "global": false,
                    "description": "Name of the matched record",
                    "tags": [],
                    "required": true,
                    "type": "RouteRecordNameGeneric",
                    "schema": "RouteRecordNameGeneric"
                  },
                  "params": {
                    "name": "params",
                    "global": false,
                    "description": "Object of decoded params extracted from the `path`.",
                    "tags": [],
                    "required": true,
                    "type": "RouteParamsGeneric",
                    "schema": "RouteParamsGeneric"
                  },
                  "fullPath": {
                    "name": "fullPath",
                    "global": false,
                    "description": "The whole location including the `search` and `hash`. This string is\r\npercentage encoded.",
                    "tags": [],
                    "required": true,
                    "type": "string",
                    "schema": "string"
                  },
                  "query": {
                    "name": "query",
                    "global": false,
                    "description": "Object representation of the `search` property of the current location.",
                    "tags": [],
                    "required": true,
                    "type": "LocationQuery",
                    "schema": "LocationQuery"
                  },
                  "hash": {
                    "name": "hash",
                    "global": false,
                    "description": "Hash of the current location. If present, starts with a `#`.",
                    "tags": [],
                    "required": true,
                    "type": "string",
                    "schema": "string"
                  },
                  "redirectedFrom": {
                    "name": "redirectedFrom",
                    "global": false,
                    "description": "Contains the location we were initially trying to access before ending up\r\non the current location.",
                    "tags": [],
                    "required": true,
                    "type": "RouteLocationGeneric | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "RouteLocationGeneric | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "RouteLocationGeneric",
                          "schema": {
                            "matched": {
                              "name": "matched",
                              "global": false,
                              "description": "Array of {@link RouteRecord} containing components as they were\r\npassed when adding records. It can also contain redirect records. This\r\ncan't be used directly. **This property is non-enumerable**.",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordNormalized[]",
                              "schema": {
                                "kind": "array",
                                "type": "RouteRecordNormalized[]",
                                "schema": {
                                  "0": "RouteRecordNormalized"
                                }
                              }
                            },
                            "fullPath": {
                              "name": "fullPath",
                              "global": false,
                              "description": "The whole location including the `search` and `hash`. This string is\r\npercentage encoded.",
                              "tags": [],
                              "required": true,
                              "type": "string",
                              "schema": "string"
                            },
                            "query": {
                              "name": "query",
                              "global": false,
                              "description": "Object representation of the `search` property of the current location.",
                              "tags": [],
                              "required": true,
                              "type": "LocationQuery",
                              "schema": "LocationQuery"
                            },
                            "hash": {
                              "name": "hash",
                              "global": false,
                              "description": "Hash of the current location. If present, starts with a `#`.",
                              "tags": [],
                              "required": true,
                              "type": "string",
                              "schema": "string"
                            },
                            "redirectedFrom": {
                              "name": "redirectedFrom",
                              "global": false,
                              "description": "Contains the location we were initially trying to access before ending up\r\non the current location.",
                              "tags": [],
                              "required": true,
                              "type": "RouteLocationGeneric | undefined",
                              "schema": "RouteLocationGeneric | undefined"
                            },
                            "meta": {
                              "name": "meta",
                              "global": false,
                              "description": "Merged `meta` properties from all the matched route records.",
                              "tags": [],
                              "required": true,
                              "type": "RouteMeta",
                              "schema": "RouteMeta"
                            },
                            "name": {
                              "name": "name",
                              "global": false,
                              "description": "Name of the matched record",
                              "tags": [],
                              "required": true,
                              "type": "RouteRecordNameGeneric | null",
                              "schema": {
                                "kind": "enum",
                                "type": "RouteRecordNameGeneric | null",
                                "schema": {
                                  "0": "undefined",
                                  "1": "null",
                                  "2": "string",
                                  "3": "symbol"
                                }
                              }
                            },
                            "path": {
                              "name": "path",
                              "global": false,
                              "description": "Percentage encoded pathname section of the URL.",
                              "tags": [],
                              "required": true,
                              "type": "string",
                              "schema": "string"
                            },
                            "params": {
                              "name": "params",
                              "global": false,
                              "description": "Object of decoded params extracted from the `path`.",
                              "tags": [],
                              "required": true,
                              "type": "RouteParamsGeneric",
                              "schema": "RouteParamsGeneric"
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "name": "meta",
                    "global": false,
                    "description": "Merged `meta` properties from all the matched route records.",
                    "tags": [],
                    "required": true,
                    "type": "RouteMeta",
                    "schema": "RouteMeta"
                  },
                  "path": {
                    "name": "path",
                    "global": false,
                    "description": "Percentage encoded pathname section of the URL.",
                    "tags": [],
                    "required": true,
                    "type": "string",
                    "schema": "string"
                  }
                }
              }
            },
            "$router": {
              "name": "$router",
              "global": false,
              "description": "{@link Router} instance used by the application.",
              "tags": [],
              "required": true,
              "type": "Router",
              "schema": {
                "kind": "object",
                "type": "Router",
                "schema": {
                  "currentRoute": {
                    "name": "currentRoute",
                    "global": false,
                    "description": "Current {@link RouteLocationNormalized}",
                    "tags": [],
                    "required": true,
                    "type": "Ref<RouteLocationNormalizedLoadedGeneric, RouteLocationNormalizedLoadedGeneric>",
                    "schema": "Ref<RouteLocationNormalizedLoadedGeneric, RouteLocationNormalizedLoadedGeneric>"
                  },
                  "options": {
                    "name": "options",
                    "global": false,
                    "description": "Original options object passed to create the Router",
                    "tags": [],
                    "required": true,
                    "type": "RouterOptions",
                    "schema": {
                      "kind": "object",
                      "type": "RouterOptions",
                      "schema": {
                        "history": {
                          "name": "history",
                          "global": false,
                          "description": "History implementation used by the router. Most web applications should use\r\n`createWebHistory` but it requires the server to be properly configured.\r\nYou can also use a _hash_ based history with `createWebHashHistory` that\r\ndoes not require any configuration on the server but isn't handled at all\r\nby search engines and does poorly on SEO.",
                          "tags": [
                            {
                              "name": "example",
                              "text": "```js\r\ncreateRouter({\r\n  history: createWebHistory(),\r\n  // other options...\r\n})\r\n```"
                            }
                          ],
                          "required": true,
                          "type": "RouterHistory",
                          "schema": {
                            "kind": "object",
                            "type": "RouterHistory",
                            "schema": {
                              "base": {
                                "name": "base",
                                "global": false,
                                "description": "Base path that is prepended to every url. This allows hosting an SPA at a\r\nsub-folder of a domain like `example.com/sub-folder` by having a `base` of\r\n`/sub-folder`",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "location": {
                                "name": "location",
                                "global": false,
                                "description": "Current History location",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "state": {
                                "name": "state",
                                "global": false,
                                "description": "Current History state",
                                "tags": [],
                                "required": true,
                                "type": "HistoryState",
                                "schema": "HistoryState"
                              },
                              "push": {
                                "name": "push",
                                "global": false,
                                "description": "Navigates to a location. In the case of an HTML5 History implementation,\r\nthis will call `history.pushState` to effectively change the URL.",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "to - location to push"
                                  },
                                  {
                                    "name": "param",
                                    "text": "data - optional {@link HistoryState} to be associated with the\r\nnavigation entry"
                                  }
                                ],
                                "required": true,
                                "type": "(to: string, data?: HistoryState | undefined) => void",
                                "schema": {
                                  "kind": "event",
                                  "type": "(to: string, data?: HistoryState | undefined): void",
                                  "schema": {}
                                }
                              },
                              "replace": {
                                "name": "replace",
                                "global": false,
                                "description": "Same as {@link RouterHistory.push} but performs a `history.replaceState`\r\ninstead of `history.pushState`",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "to - location to set"
                                  },
                                  {
                                    "name": "param",
                                    "text": "data - optional {@link HistoryState} to be associated with the\r\nnavigation entry"
                                  }
                                ],
                                "required": true,
                                "type": "(to: string, data?: HistoryState | undefined) => void",
                                "schema": {
                                  "kind": "event",
                                  "type": "(to: string, data?: HistoryState | undefined): void",
                                  "schema": {}
                                }
                              },
                              "go": {
                                "name": "go",
                                "global": false,
                                "description": "Traverses history in a given direction.",
                                "tags": [
                                  {
                                    "name": "example",
                                    "text": "```js\r\nmyHistory.go(-1) // equivalent to window.history.back()\r\nmyHistory.go(1) // equivalent to window.history.forward()\r\n```"
                                  },
                                  {
                                    "name": "param",
                                    "text": "delta - distance to travel. If delta is \\< 0, it will go back,\r\nif it's \\> 0, it will go forward by that amount of entries."
                                  },
                                  {
                                    "name": "param",
                                    "text": "triggerListeners - whether this should trigger listeners attached to\r\nthe history"
                                  }
                                ],
                                "required": true,
                                "type": "(delta: number, triggerListeners?: boolean | undefined) => void",
                                "schema": {
                                  "kind": "event",
                                  "type": "(delta: number, triggerListeners?: boolean | undefined): void",
                                  "schema": {}
                                }
                              },
                              "listen": {
                                "name": "listen",
                                "global": false,
                                "description": "Attach a listener to the History implementation that is triggered when the\r\nnavigation is triggered from outside (like the Browser back and forward\r\nbuttons) or when passing `true` to {@link RouterHistory.back } and\r\n{@link RouterHistory.forward }",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "callback - listener to attach"
                                  },
                                  {
                                    "name": "returns",
                                    "text": "a callback to remove the listener"
                                  }
                                ],
                                "required": true,
                                "type": "(callback: NavigationCallback) => () => void",
                                "schema": {
                                  "kind": "event",
                                  "type": "(callback: NavigationCallback): () => void",
                                  "schema": {}
                                }
                              },
                              "createHref": {
                                "name": "createHref",
                                "global": false,
                                "description": "Generates the corresponding href to be used in an anchor tag.",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "location - history location that should create an href"
                                  }
                                ],
                                "required": true,
                                "type": "(location: string) => string",
                                "schema": {
                                  "kind": "event",
                                  "type": "(location: string): string",
                                  "schema": {}
                                }
                              },
                              "destroy": {
                                "name": "destroy",
                                "global": false,
                                "description": "Clears any event listener attached by the history implementation.",
                                "tags": [],
                                "required": true,
                                "type": "() => void",
                                "schema": {
                                  "kind": "event",
                                  "type": "(): void"
                                }
                              }
                            }
                          }
                        },
                        "routes": {
                          "name": "routes",
                          "global": false,
                          "description": "Initial list of routes that should be added to the router.",
                          "tags": [],
                          "required": true,
                          "type": "readonly RouteRecordRaw[]",
                          "schema": {
                            "kind": "array",
                            "type": "readonly RouteRecordRaw[]",
                            "schema": {
                              "0": "RouteRecordRaw"
                            }
                          }
                        },
                        "scrollBehavior": {
                          "name": "scrollBehavior",
                          "global": false,
                          "description": "Function to control scrolling when navigating between pages. Can return a\r\nPromise to delay scrolling. Check {@link ScrollBehavior}.",
                          "tags": [
                            {
                              "name": "example",
                              "text": "```js\r\nfunction scrollBehavior(to, from, savedPosition) {\r\n  // `to` and `from` are both route locations\r\n  // `savedPosition` can be null if there isn't one\r\n}\r\n```"
                            }
                          ],
                          "required": false,
                          "type": "RouterScrollBehavior | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouterScrollBehavior | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, savedPosition: _ScrollPositionNormalized | null): Awaitable<...>",
                                "schema": []
                              }
                            }
                          }
                        },
                        "parseQuery": {
                          "name": "parseQuery",
                          "global": false,
                          "description": "Custom implementation to parse a query. See its counterpart,\r\n{@link RouterOptions.stringifyQuery}.",
                          "tags": [
                            {
                              "name": "example",
                              "text": "Let's say you want to use the [qs package](https://github.com/ljharb/qs)\r\nto parse queries, you can provide both `parseQuery` and `stringifyQuery`:\r\n```js\r\nimport qs from 'qs'\r\n\r\ncreateRouter({\r\n  // other options...\r\n  parseQuery: qs.parse,\r\n  stringifyQuery: qs.stringify,\r\n})\r\n```"
                            }
                          ],
                          "required": false,
                          "type": "((search: string) => LocationQuery) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((search: string) => LocationQuery) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(search: string): LocationQuery",
                                "schema": []
                              }
                            }
                          }
                        },
                        "stringifyQuery": {
                          "name": "stringifyQuery",
                          "global": false,
                          "description": "Custom implementation to stringify a query object. Should not prepend a leading `?`.\r\n{@link RouterOptions.parseQueryparseQuery} counterpart to handle query parsing.",
                          "tags": [],
                          "required": false,
                          "type": "((query: LocationQueryRaw) => string) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((query: LocationQueryRaw) => string) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(query: LocationQueryRaw): string",
                                "schema": []
                              }
                            }
                          }
                        },
                        "linkActiveClass": {
                          "name": "linkActiveClass",
                          "global": false,
                          "description": "Default class applied to active {@link RouterLink}. If none is provided,\r\n`router-link-active` will be applied.",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "linkExactActiveClass": {
                          "name": "linkExactActiveClass",
                          "global": false,
                          "description": "Default class applied to exact active {@link RouterLink}. If none is provided,\r\n`router-link-exact-active` will be applied.",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "end": {
                          "name": "end",
                          "global": false,
                          "description": "Should the RegExp match until the end by appending a `$` to it.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "`true`"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "sensitive": {
                          "name": "sensitive",
                          "global": false,
                          "description": "Makes the RegExp case-sensitive.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "`false`"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "strict": {
                          "name": "strict",
                          "global": false,
                          "description": "Whether to disallow a trailing slash or not.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "`false`"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        }
                      }
                    }
                  },
                  "listening": {
                    "name": "listening",
                    "global": false,
                    "description": "Allows turning off the listening of history events. This is a low level api for micro-frontend.",
                    "tags": [],
                    "required": true,
                    "type": "boolean",
                    "schema": {
                      "kind": "enum",
                      "type": "boolean",
                      "schema": {
                        "0": "false",
                        "1": "true"
                      }
                    }
                  },
                  "addRoute": {
                    "name": "addRoute",
                    "global": false,
                    "description": "Add a new {@link RouteRecordRawroute record} as the child of an existing route.\nAdd a new {@link RouteRecordRawroute record} to the router.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "parentName - Parent Route Record where `route` should be appended at"
                      },
                      {
                        "name": "param",
                        "text": "route - Route Record to add"
                      },
                      {
                        "name": "param",
                        "text": "route - Route Record to add"
                      }
                    ],
                    "required": true,
                    "type": "{ (parentName: NonNullable<RouteRecordNameGeneric>, route: RouteRecordRaw): () => void; (route: RouteRecordRaw): () => void; }",
                    "schema": "{ (parentName: NonNullable<RouteRecordNameGeneric>, route: RouteRecordRaw): () => void; (route: RouteRecordRaw): () => void; }"
                  },
                  "removeRoute": {
                    "name": "removeRoute",
                    "global": false,
                    "description": "Remove an existing route by its name.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "name - Name of the route to remove"
                      }
                    ],
                    "required": true,
                    "type": "(name: NonNullable<RouteRecordNameGeneric>) => void",
                    "schema": {
                      "kind": "event",
                      "type": "(name: NonNullable<RouteRecordNameGeneric>): void",
                      "schema": {}
                    }
                  },
                  "hasRoute": {
                    "name": "hasRoute",
                    "global": false,
                    "description": "Checks if a route with a given name exists",
                    "tags": [
                      {
                        "name": "param",
                        "text": "name - Name of the route to check"
                      }
                    ],
                    "required": true,
                    "type": "(name: NonNullable<RouteRecordNameGeneric>) => boolean",
                    "schema": {
                      "kind": "event",
                      "type": "(name: NonNullable<RouteRecordNameGeneric>): boolean",
                      "schema": {}
                    }
                  },
                  "getRoutes": {
                    "name": "getRoutes",
                    "global": false,
                    "description": "Get a full list of all the {@link RouteRecordroute records}.",
                    "tags": [],
                    "required": true,
                    "type": "() => RouteRecordNormalized[]",
                    "schema": {
                      "kind": "event",
                      "type": "(): RouteRecordNormalized[]"
                    }
                  },
                  "clearRoutes": {
                    "name": "clearRoutes",
                    "global": false,
                    "description": "Delete all routes from the router matcher.",
                    "tags": [],
                    "required": true,
                    "type": "() => void",
                    "schema": {
                      "kind": "event",
                      "type": "(): void"
                    }
                  },
                  "resolve": {
                    "name": "resolve",
                    "global": false,
                    "description": "Returns the {@link RouteLocationnormalized version} of a\r\n{@link RouteLocationRawroute location}. Also includes an `href` property\r\nthat includes any existing `base`. By default, the `currentLocation` used is\r\n`router.currentRoute` and should only be overridden in advanced use cases.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "to - Raw route location to resolve"
                      },
                      {
                        "name": "param",
                        "text": "currentLocation - Optional current location to resolve against"
                      }
                    ],
                    "required": true,
                    "type": "{ <Name extends keyof RouteMap = string | symbol>(to: RouteLocationAsRelativeTyped<RouteMapGeneric, Name>, currentLocation?: RouteLocationNormalizedLoadedGeneric | undefined): RouteLocationResolvedGeneric; (to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric, currentLocation?: RouteLocationNormalizedLoadedGeneric | undefined): RouteLocationResolvedGeneric; }",
                    "schema": "{ <Name extends keyof RouteMap = string | symbol>(to: RouteLocationAsRelativeTyped<RouteMapGeneric, Name>, currentLocation?: RouteLocationNormalizedLoadedGeneric | undefined): RouteLocationResolvedGeneric; (to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric, currentLocation?: RouteLocationNormalizedLoadedGeneric | undefined): RouteLocationResolvedGeneric; }"
                  },
                  "push": {
                    "name": "push",
                    "global": false,
                    "description": "Programmatically navigate to a new URL by pushing an entry in the history\r\nstack.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "to - Route location to navigate to"
                      }
                    ],
                    "required": true,
                    "type": "(to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric) => Promise<void | NavigationFailure | undefined>",
                    "schema": {
                      "kind": "event",
                      "type": "(to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric): Promise<void | NavigationFailure | undefined>",
                      "schema": {}
                    }
                  },
                  "replace": {
                    "name": "replace",
                    "global": false,
                    "description": "Programmatically navigate to a new URL by replacing the current entry in\r\nthe history stack.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "to - Route location to navigate to"
                      }
                    ],
                    "required": true,
                    "type": "(to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric) => Promise<void | NavigationFailure | undefined>",
                    "schema": {
                      "kind": "event",
                      "type": "(to: string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric): Promise<void | NavigationFailure | undefined>",
                      "schema": {}
                    }
                  },
                  "back": {
                    "name": "back",
                    "global": false,
                    "description": "Go back in history if possible by calling `history.back()`. Equivalent to\r\n`router.go(-1)`.",
                    "tags": [],
                    "required": true,
                    "type": "() => void",
                    "schema": {
                      "kind": "event",
                      "type": "(): void"
                    }
                  },
                  "forward": {
                    "name": "forward",
                    "global": false,
                    "description": "Go forward in history if possible by calling `history.forward()`.\r\nEquivalent to `router.go(1)`.",
                    "tags": [],
                    "required": true,
                    "type": "() => void",
                    "schema": {
                      "kind": "event",
                      "type": "(): void"
                    }
                  },
                  "go": {
                    "name": "go",
                    "global": false,
                    "description": "Allows you to move forward or backward through the history. Calls\r\n`history.go()`.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "delta - The position in the history to which you want to move,\r\nrelative to the current page"
                      }
                    ],
                    "required": true,
                    "type": "(delta: number) => void",
                    "schema": {
                      "kind": "event",
                      "type": "(delta: number): void",
                      "schema": {}
                    }
                  },
                  "beforeEach": {
                    "name": "beforeEach",
                    "global": false,
                    "description": "Add a navigation guard that executes before any navigation. Returns a\r\nfunction that removes the registered guard.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "guard - navigation guard to add"
                      }
                    ],
                    "required": true,
                    "type": "(guard: NavigationGuardWithThis<undefined>) => () => void",
                    "schema": {
                      "kind": "event",
                      "type": "(guard: NavigationGuardWithThis<undefined>): () => void",
                      "schema": {
                        "0": "undefined"
                      }
                    }
                  },
                  "beforeResolve": {
                    "name": "beforeResolve",
                    "global": false,
                    "description": "Add a navigation guard that executes before navigation is about to be\r\nresolved. At this state all component have been fetched and other\r\nnavigation guards have been successful. Returns a function that removes the\r\nregistered guard.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "guard - navigation guard to add"
                      },
                      {
                        "name": "returns",
                        "text": "a function that removes the registered guard"
                      },
                      {
                        "name": "example",
                        "text": "```js\r\nrouter.beforeResolve(to => {\r\n  if (to.meta.requiresAuth && !isAuthenticated) return false\r\n})\r\n```"
                      }
                    ],
                    "required": true,
                    "type": "(guard: NavigationGuardWithThis<undefined>) => () => void",
                    "schema": {
                      "kind": "event",
                      "type": "(guard: NavigationGuardWithThis<undefined>): () => void",
                      "schema": {
                        "0": "undefined"
                      }
                    }
                  },
                  "afterEach": {
                    "name": "afterEach",
                    "global": false,
                    "description": "Add a navigation hook that is executed after every navigation. Returns a\r\nfunction that removes the registered hook.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "guard - navigation hook to add"
                      },
                      {
                        "name": "returns",
                        "text": "a function that removes the registered hook"
                      },
                      {
                        "name": "example",
                        "text": "```js\r\nrouter.afterEach((to, from, failure) => {\r\n  if (isNavigationFailure(failure)) {\r\n    console.log('failed navigation', failure)\r\n  }\r\n})\r\n```"
                      }
                    ],
                    "required": true,
                    "type": "(guard: NavigationHookAfter) => () => void",
                    "schema": {
                      "kind": "event",
                      "type": "(guard: NavigationHookAfter): () => void",
                      "schema": {}
                    }
                  },
                  "onError": {
                    "name": "onError",
                    "global": false,
                    "description": "Adds an error handler that is called every time a non caught error happens\r\nduring navigation. This includes errors thrown synchronously and\r\nasynchronously, errors returned or passed to `next` in any navigation\r\nguard, and errors occurred when trying to resolve an async component that\r\nis required to render a route.",
                    "tags": [
                      {
                        "name": "param",
                        "text": "handler - error handler to register"
                      }
                    ],
                    "required": true,
                    "type": "(handler: _ErrorListener) => () => void",
                    "schema": {
                      "kind": "event",
                      "type": "(handler: _ErrorListener): () => void",
                      "schema": {}
                    }
                  },
                  "isReady": {
                    "name": "isReady",
                    "global": false,
                    "description": "Returns a Promise that resolves when the router has completed the initial\r\nnavigation, which means it has resolved all async enter hooks and async\r\ncomponents that are associated with the initial route. If the initial\r\nnavigation already happened, the promise resolves immediately.\r\n\r\nThis is useful in server-side rendering to ensure consistent output on both\r\nthe server and the client. Note that on server side, you need to manually\r\npush the initial location while on client side, the router automatically\r\npicks it up from the URL.",
                    "tags": [],
                    "required": true,
                    "type": "() => Promise<void>",
                    "schema": {
                      "kind": "event",
                      "type": "(): Promise<void>"
                    }
                  },
                  "install": {
                    "name": "install",
                    "global": false,
                    "description": "Called automatically by `app.use(router)`. Should not be called manually by\r\nthe user. This will trigger the initial navigation when on client side.",
                    "tags": [
                      {
                        "name": "internal"
                      },
                      {
                        "name": "param",
                        "text": "app - Application that uses the router"
                      }
                    ],
                    "required": true,
                    "type": "(app: App<any>) => void",
                    "schema": {
                      "kind": "event",
                      "type": "(app: App<any>): void",
                      "schema": {
                        "0": "any"
                      }
                    }
                  }
                }
              }
            },
            "$nuxt": {
              "name": "$nuxt",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "NuxtApp",
              "schema": {
                "kind": "object",
                "type": "NuxtApp",
                "schema": {
                  "vueApp": {
                    "name": "vueApp",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "App<Element>",
                    "schema": "App<Element>"
                  },
                  "versions": {
                    "name": "versions",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "Record<string, string>",
                    "schema": "Record<string, string>"
                  },
                  "hooks": {
                    "name": "hooks",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "Hookable<RuntimeNuxtHooks, HookKeys<RuntimeNuxtHooks>>",
                    "schema": "Hookable<RuntimeNuxtHooks, HookKeys<RuntimeNuxtHooks>>"
                  },
                  "hook": {
                    "name": "hook",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, function_: InferCallback<RuntimeNuxtHooks, NameT>, options?: { allowDeprecated?: boolean | undefined; } | undefined) => () => void",
                    "schema": {
                      "kind": "event",
                      "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, function_: InferCallback<RuntimeNuxtHooks, NameT>, options?: { ...; } | undefined): () => void",
                      "schema": {}
                    }
                  },
                  "callHook": {
                    "name": "callHook",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, ...arguments_: Parameters<InferCallback<RuntimeNuxtHooks, NameT>>) => Promise<any>",
                    "schema": {
                      "kind": "event",
                      "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, ...arguments_: Parameters<InferCallback<RuntimeNuxtHooks, NameT>>): Promise<...>",
                      "schema": {}
                    }
                  },
                  "runWithContext": {
                    "name": "runWithContext",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "<T extends () => any>(fn: T) => ReturnType<T> | Promise<Awaited<ReturnType<T>>>",
                    "schema": {
                      "kind": "event",
                      "type": "<T extends () => any>(fn: T): ReturnType<T> | Promise<Awaited<ReturnType<T>>>",
                      "schema": {}
                    }
                  },
                  "_cookies": {
                    "name": "_cookies",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "Record<string, unknown> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Record<string, unknown> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Record<string, unknown>"
                      }
                    }
                  },
                  "_id": {
                    "name": "_id",
                    "global": false,
                    "description": "The id of the Nuxt application.",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "string",
                    "schema": "string"
                  },
                  "_scope": {
                    "name": "_scope",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "EffectScope",
                    "schema": {
                      "kind": "object",
                      "type": "EffectScope",
                      "schema": {
                        "detached": {
                          "name": "detached",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "boolean",
                          "schema": "boolean"
                        },
                        "_isPaused": {
                          "name": "_isPaused",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "any",
                          "schema": "any"
                        },
                        "active": {
                          "name": "active",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "boolean",
                          "schema": "boolean"
                        },
                        "pause": {
                          "name": "pause",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => void",
                          "schema": {
                            "kind": "event",
                            "type": "(): void"
                          }
                        },
                        "resume": {
                          "name": "resume",
                          "global": false,
                          "description": "Resumes the effect scope, including all child scopes and effects.",
                          "tags": [],
                          "required": true,
                          "type": "() => void",
                          "schema": {
                            "kind": "event",
                            "type": "(): void"
                          }
                        },
                        "run": {
                          "name": "run",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "<T>(fn: () => T) => T | undefined",
                          "schema": {
                            "kind": "event",
                            "type": "<T>(fn: () => T): T | undefined",
                            "schema": {}
                          }
                        },
                        "prevScope": {
                          "name": "prevScope",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "EffectScope | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "EffectScope | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "EffectScope"
                            }
                          }
                        },
                        "stop": {
                          "name": "stop",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(fromParent?: boolean | undefined) => void",
                          "schema": {
                            "kind": "event",
                            "type": "(fromParent?: boolean | undefined): void",
                            "schema": {}
                          }
                        }
                      }
                    }
                  },
                  "_asyncDataPromises": {
                    "name": "_asyncDataPromises",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "Record<string, Promise<any> | undefined>",
                    "schema": "Record<string, Promise<any> | undefined>"
                  },
                  "_asyncData": {
                    "name": "_asyncData",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "Record<string, { data: Ref<unknown, unknown>; pending: Ref<boolean, boolean>; error: Ref<Error | undefined, Error | undefined>; status: Ref<AsyncDataRequestStatus, AsyncDataRequestStatus>; execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _default: () => unknown; _deps: number; _off: () => void; _init: boolean; _execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _hash?: Record<string, string | undefined> | undefined; } | undefined>",
                    "schema": "Record<string, { data: Ref<unknown, unknown>; pending: Ref<boolean, boolean>; error: Ref<Error | undefined, Error | undefined>; status: Ref<AsyncDataRequestStatus, AsyncDataRequestStatus>; execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _default: () => unknown; _deps: number; _off: () => void; _init: boolean; _execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _hash?: Record<string, string | undefined> | undefined; } | undefined>"
                  },
                  "_loadingIndicator": {
                    "name": "_loadingIndicator",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "LoadingIndicator | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "LoadingIndicator | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "LoadingIndicator",
                          "schema": {
                            "_cleanup": {
                              "name": "_cleanup",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "() => void",
                              "schema": {
                                "kind": "event",
                                "type": "(): void"
                              }
                            },
                            "progress": {
                              "name": "progress",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Ref<number, number>",
                              "schema": "Ref<number, number>"
                            },
                            "isLoading": {
                              "name": "isLoading",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Ref<boolean, boolean>",
                              "schema": "Ref<boolean, boolean>"
                            },
                            "error": {
                              "name": "error",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Ref<boolean, boolean>",
                              "schema": "Ref<boolean, boolean>"
                            },
                            "start": {
                              "name": "start",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(opts?: { force?: boolean | undefined; } | undefined) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(opts?: { force?: boolean | undefined; } | undefined): void",
                                "schema": {}
                              }
                            },
                            "set": {
                              "name": "set",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(value: number, opts?: { force?: boolean | undefined; } | undefined) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(value: number, opts?: { force?: boolean | undefined; } | undefined): void",
                                "schema": {}
                              }
                            },
                            "finish": {
                              "name": "finish",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(opts?: { force?: boolean | undefined; error?: boolean | undefined; } | undefined) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(opts?: { force?: boolean | undefined; error?: boolean | undefined; } | undefined): void",
                                "schema": {}
                              }
                            },
                            "clear": {
                              "name": "clear",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "() => void",
                              "schema": {
                                "kind": "event",
                                "type": "(): void"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "_loadingIndicatorDeps": {
                    "name": "_loadingIndicatorDeps",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "number | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "number | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "number"
                      }
                    }
                  },
                  "_middleware": {
                    "name": "_middleware",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "{ global: RouteMiddleware[]; named: Record<string, RouteMiddleware>; }",
                    "schema": {
                      "kind": "object",
                      "type": "{ global: RouteMiddleware[]; named: Record<string, RouteMiddleware>; }",
                      "schema": {
                        "global": {
                          "name": "global",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "RouteMiddleware[]",
                          "schema": {
                            "kind": "array",
                            "type": "RouteMiddleware[]",
                            "schema": {
                              "0": {
                                "kind": "event",
                                "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedGeneric): _Awaitable<NavigationGuardReturn>",
                                "schema": []
                              }
                            }
                          }
                        },
                        "named": {
                          "name": "named",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "Record<string, RouteMiddleware>",
                          "schema": "Record<string, RouteMiddleware>"
                        }
                      }
                    }
                  },
                  "_processingMiddleware": {
                    "name": "_processingMiddleware",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "string | boolean | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "string | boolean | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "string",
                        "2": "false",
                        "3": "true"
                      }
                    }
                  },
                  "_once": {
                    "name": "_once",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "{ [key: string]: Promise<any>; }",
                    "schema": {
                      "kind": "object",
                      "type": "{ [key: string]: Promise<any>; }",
                      "schema": {}
                    }
                  },
                  "_observer": {
                    "name": "_observer",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "{ observe: (element: Element, callback: () => void) => () => void; } | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "{ observe: (element: Element, callback: () => void) => () => void; } | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "{ observe: (element: Element, callback: () => void) => () => void; }",
                          "schema": {
                            "observe": {
                              "name": "observe",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(element: Element, callback: () => void) => () => void",
                              "schema": {
                                "kind": "event",
                                "type": "(element: Element, callback: () => void): () => void",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "_appConfig": {
                    "name": "_appConfig",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "AppConfig",
                    "schema": {
                      "kind": "object",
                      "type": "AppConfig",
                      "schema": {
                        "nuxt": {
                          "name": "nuxt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "{}",
                          "schema": {
                            "kind": "object",
                            "type": "{}",
                            "schema": {}
                          }
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "{ colors: { primary: string; secondary: string; success: string; info: string; warning: string; error: string; neutral: string; }; icons: { arrowDown: string; arrowLeft: string; arrowRight: string; arrowUp: string; caution: string; check: string; chevronDoubleLeft: string; chevronDoubleRight: string; chevronDown: string; chevronLeft: string; chevronRight: string; chevronUp: string; close: string; copy: string; copyCheck: string; dark: string; ellipsis: string; error: string; external: string; eye: string; eyeOff: string; file: string; folder: string; folderOpen: string; hash: string; info: string; light: string; loading: string; menu: string; minus: string; panelClose: string; panelOpen: string; plus: string; reload: string; search: string; stop: string; success: string; system: string; tip: string; upload: string; warning: string; }; }",
                          "schema": {
                            "kind": "object",
                            "type": "{ colors: { primary: string; secondary: string; success: string; info: string; warning: string; error: string; neutral: string; }; icons: { arrowDown: string; arrowLeft: string; arrowRight: string; arrowUp: string; caution: string; check: string; chevronDoubleLeft: string; chevronDoubleRight: string; chevronDown: string; chevronLeft: string; chevronRight: string; chevronUp: string; close: string; copy: string; copyCheck: string; dark: string; ellipsis: string; error: string; external: string; eye: string; eyeOff: string; file: string; folder: string; folderOpen: string; hash: string; info: string; light: string; loading: string; menu: string; minus: string; panelClose: string; panelOpen: string; plus: string; reload: string; search: string; stop: string; success: string; system: string; tip: string; upload: string; warning: string; }; }",
                            "schema": {
                              "colors": {
                                "name": "colors",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ primary: string; secondary: string; success: string; info: string; warning: string; error: string; neutral: string; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ primary: string; secondary: string; success: string; info: string; warning: string; error: string; neutral: string; }",
                                  "schema": {
                                    "primary": {
                                      "name": "primary",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "secondary": {
                                      "name": "secondary",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "success": {
                                      "name": "success",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "info": {
                                      "name": "info",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "warning": {
                                      "name": "warning",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "error": {
                                      "name": "error",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "neutral": {
                                      "name": "neutral",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    }
                                  }
                                }
                              },
                              "icons": {
                                "name": "icons",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ arrowDown: string; arrowLeft: string; arrowRight: string; arrowUp: string; caution: string; check: string; chevronDoubleLeft: string; chevronDoubleRight: string; chevronDown: string; chevronLeft: string; chevronRight: string; chevronUp: string; close: string; copy: string; copyCheck: string; dark: string; ellipsis: string; error: string; external: string; eye: string; eyeOff: string; file: string; folder: string; folderOpen: string; hash: string; info: string; light: string; loading: string; menu: string; minus: string; panelClose: string; panelOpen: string; plus: string; reload: string; search: string; stop: string; success: string; system: string; tip: string; upload: string; warning: string; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ arrowDown: string; arrowLeft: string; arrowRight: string; arrowUp: string; caution: string; check: string; chevronDoubleLeft: string; chevronDoubleRight: string; chevronDown: string; chevronLeft: string; chevronRight: string; chevronUp: string; close: string; copy: string; copyCheck: string; dark: string; ellipsis: string; error: string; external: string; eye: string; eyeOff: string; file: string; folder: string; folderOpen: string; hash: string; info: string; light: string; loading: string; menu: string; minus: string; panelClose: string; panelOpen: string; plus: string; reload: string; search: string; stop: string; success: string; system: string; tip: string; upload: string; warning: string; }",
                                  "schema": {
                                    "arrowDown": {
                                      "name": "arrowDown",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "arrowLeft": {
                                      "name": "arrowLeft",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "arrowRight": {
                                      "name": "arrowRight",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "arrowUp": {
                                      "name": "arrowUp",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "caution": {
                                      "name": "caution",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "check": {
                                      "name": "check",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronDoubleLeft": {
                                      "name": "chevronDoubleLeft",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronDoubleRight": {
                                      "name": "chevronDoubleRight",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronDown": {
                                      "name": "chevronDown",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronLeft": {
                                      "name": "chevronLeft",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronRight": {
                                      "name": "chevronRight",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "chevronUp": {
                                      "name": "chevronUp",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "close": {
                                      "name": "close",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "copy": {
                                      "name": "copy",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "copyCheck": {
                                      "name": "copyCheck",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "dark": {
                                      "name": "dark",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "ellipsis": {
                                      "name": "ellipsis",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "error": {
                                      "name": "error",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "external": {
                                      "name": "external",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "eye": {
                                      "name": "eye",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "eyeOff": {
                                      "name": "eyeOff",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "file": {
                                      "name": "file",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "folder": {
                                      "name": "folder",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "folderOpen": {
                                      "name": "folderOpen",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "hash": {
                                      "name": "hash",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "info": {
                                      "name": "info",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "light": {
                                      "name": "light",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "loading": {
                                      "name": "loading",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "menu": {
                                      "name": "menu",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "minus": {
                                      "name": "minus",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "panelClose": {
                                      "name": "panelClose",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "panelOpen": {
                                      "name": "panelOpen",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "plus": {
                                      "name": "plus",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "reload": {
                                      "name": "reload",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "search": {
                                      "name": "search",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "stop": {
                                      "name": "stop",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "success": {
                                      "name": "success",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "system": {
                                      "name": "system",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "tip": {
                                      "name": "tip",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "upload": {
                                      "name": "upload",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "warning": {
                                      "name": "warning",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "Nuxt Icon\n\nConfigure Nuxt Icon module preferences.",
                          "tags": [
                            {
                              "name": "studioIcon",
                              "text": "material-symbols:star"
                            }
                          ],
                          "required": true,
                          "type": "{ size?: string | undefined; class?: string | undefined; attrs?: Record<string, string | number | boolean> | undefined; mode?: string | undefined; aliases?: { [alias: string]: string; } | undefined; cssSelectorPrefix?: string | undefined; cssLayer?: string | undefined; cssWherePseudo?: boolean | undefined; collections?: string[] | null | undefined; customCollections?: string[] | null | undefined; provider?: 'server' | 'iconify' | undefined; iconifyApiEndpoint?: string | undefined; fallbackToApi?: boolean | 'server-only' | 'client-only' | undefined; localApiEndpoint?: string | undefined; fetchTimeout?: number | undefined; customize?: any; }",
                          "schema": {
                            "kind": "object",
                            "type": "{ size?: string | undefined; class?: string | undefined; attrs?: Record<string, string | number | boolean> | undefined; mode?: string | undefined; aliases?: { [alias: string]: string; } | undefined; cssSelectorPrefix?: string | undefined; cssLayer?: string | undefined; cssWherePseudo?: boolean | undefined; collections?: string[] | null | undefined; customCollections?: string[] | null | undefined; provider?: 'server' | 'iconify' | undefined; iconifyApiEndpoint?: string | undefined; fallbackToApi?: boolean | 'server-only' | 'client-only' | undefined; localApiEndpoint?: string | undefined; fetchTimeout?: number | undefined; customize?: any; }",
                            "schema": {
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "Icon Size\n\nSet the default icon size.",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:format-size-rounded"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "CSS Class\n\nSet the default CSS class.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "''"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:css"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "attrs": {
                                "name": "attrs",
                                "global": false,
                                "description": "Default Attributes\n\nAttributes applied to every icon component.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "{ 'aria-hidden': true }"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:settings"
                                  }
                                ],
                                "required": false,
                                "type": "Record<string, string | number | boolean> | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "Record<string, string | number | boolean> | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "Record<string, string | number | boolean>"
                                  }
                                }
                              },
                              "mode": {
                                "name": "mode",
                                "global": false,
                                "description": "Default Rendering Mode\n\nSet the default rendering mode for the icon component",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "'css'"
                                  },
                                  {
                                    "name": "enum",
                                    "text": ",svg"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:move-down-rounded"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "aliases": {
                                "name": "aliases",
                                "global": false,
                                "description": "Icon aliases\n\nDefine Icon aliases to update them easily without code changes.",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:star-rounded"
                                  }
                                ],
                                "required": false,
                                "type": "{ [alias: string]: string; } | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "{ [alias: string]: string; } | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": {
                                      "kind": "object",
                                      "type": "{ [alias: string]: string; }",
                                      "schema": {}
                                    }
                                  }
                                }
                              },
                              "cssSelectorPrefix": {
                                "name": "cssSelectorPrefix",
                                "global": false,
                                "description": "CSS Selector Prefix\n\nSet the default CSS selector prefix.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "'i-'"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:format-textdirection-l-to-r"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "cssLayer": {
                                "name": "cssLayer",
                                "global": false,
                                "description": "CSS Layer Name\n\nSet the default CSS `@layer` name.",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:layers"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "cssWherePseudo": {
                                "name": "cssWherePseudo",
                                "global": false,
                                "description": "Use CSS `:where()` Pseudo Selector\n\nUse CSS `:where()` pseudo selector to reduce specificity.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "true"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:low-priority"
                                  }
                                ],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "collections": {
                                "name": "collections",
                                "global": false,
                                "description": "Icon Collections\n\nList of known icon collections name. Used to resolve collection name ambiguity.\ne.g. `simple-icons-github` -> `simple-icons:github` instead of `simple:icons-github`\n\nWhen not provided, will use the full Iconify collection list.",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:format-list-bulleted"
                                  }
                                ],
                                "required": false,
                                "type": "string[] | null | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "string[] | null | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "null",
                                    "2": "string[]"
                                  }
                                }
                              },
                              "customCollections": {
                                "name": "customCollections",
                                "global": false,
                                "description": "Custom Icon Collections",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:format-list-bulleted"
                                  }
                                ],
                                "required": false,
                                "type": "string[] | null | undefined",
                                "schema": "string[] | null | undefined"
                              },
                              "provider": {
                                "name": "provider",
                                "global": false,
                                "description": "Icon Provider\n\nProvider to use for fetching icons\n\n- `server` - Fetch icons with a server handler\n- `iconify` - Fetch icons with Iconify API, purely client-side\n- `none` - Do not fetch icons (use client bundle only)\n\n`server` by default; `iconify` when `ssr: false`",
                                "tags": [
                                  {
                                    "name": "enum",
                                    "text": ",iconify,none"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:cloud"
                                  }
                                ],
                                "required": false,
                                "type": "'server' | 'iconify' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'server' | 'iconify' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'server'",
                                    "2": "'iconify'"
                                  }
                                }
                              },
                              "iconifyApiEndpoint": {
                                "name": "iconifyApiEndpoint",
                                "global": false,
                                "description": "Iconify API Endpoint URL\n\nDefine a custom Iconify API endpoint URL. Useful if you want to use a self-hosted Iconify API. Learn more: https://iconify.design/docs/api.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "'https://api.iconify.design'"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:api"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "fallbackToApi": {
                                "name": "fallbackToApi",
                                "global": false,
                                "description": "Fallback to Iconify API\n\nFallback to Iconify API if server provider fails to found the collection.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "true"
                                  },
                                  {
                                    "name": "enum",
                                    "text": ",false,server-only,client-only"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:public"
                                  }
                                ],
                                "required": false,
                                "type": "boolean | 'server-only' | 'client-only' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "boolean | 'server-only' | 'client-only' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "false",
                                    "2": "true",
                                    "3": "'server-only'",
                                    "4": "'client-only'"
                                  }
                                }
                              },
                              "localApiEndpoint": {
                                "name": "localApiEndpoint",
                                "global": false,
                                "description": "Local API Endpoint Path\n\nDefine a custom path for the local API endpoint.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "'/api/_nuxt_icon'"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:api"
                                  }
                                ],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "fetchTimeout": {
                                "name": "fetchTimeout",
                                "global": false,
                                "description": "Fetch Timeout\n\nSet the timeout for fetching icons.",
                                "tags": [
                                  {
                                    "name": "default",
                                    "text": "1500"
                                  },
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:timer"
                                  }
                                ],
                                "required": false,
                                "type": "number | undefined",
                                "schema": "number | undefined"
                              },
                              "customize": {
                                "name": "customize",
                                "global": false,
                                "description": "Customize callback\n\nCustomize icon content (replace stroke-width, colors, etc...).",
                                "tags": [
                                  {
                                    "name": "studioIcon",
                                    "text": "material-symbols:edit"
                                  }
                                ],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "_route": {
                    "name": "_route",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "RouteLocationNormalizedLoadedGeneric",
                    "schema": "RouteLocationNormalizedLoadedGeneric"
                  },
                  "_islandPromises": {
                    "name": "_islandPromises",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "Record<string, Promise<any>> | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "Record<string, Promise<any>> | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": "Record<string, Promise<any>>"
                      }
                    }
                  },
                  "_payloadRevivers": {
                    "name": "_payloadRevivers",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": true,
                    "type": "Record<string, (data: any) => any>",
                    "schema": "Record<string, (data: any) => any>"
                  },
                  "_routeAnnouncer": {
                    "name": "_routeAnnouncer",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "RouteAnnouncer | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "RouteAnnouncer | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "RouteAnnouncer",
                          "schema": {
                            "message": {
                              "name": "message",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Ref<string, string>",
                              "schema": "Ref<string, string>"
                            },
                            "politeness": {
                              "name": "politeness",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Ref<Politeness, Politeness>",
                              "schema": "Ref<Politeness, Politeness>"
                            },
                            "set": {
                              "name": "set",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(message: string, politeness: Politeness) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(message: string, politeness: Politeness): void",
                                "schema": {}
                              }
                            },
                            "polite": {
                              "name": "polite",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(message: string) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(message: string): void",
                                "schema": {}
                              }
                            },
                            "assertive": {
                              "name": "assertive",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "(message: string) => void",
                              "schema": {
                                "kind": "event",
                                "type": "(message: string): void",
                                "schema": {}
                              }
                            },
                            "_cleanup": {
                              "name": "_cleanup",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "() => void",
                              "schema": {
                                "kind": "event",
                                "type": "(): void"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "_routeAnnouncerDeps": {
                    "name": "_routeAnnouncerDeps",
                    "global": false,
                    "description": "",
                    "tags": [
                      {
                        "name": "internal"
                      }
                    ],
                    "required": false,
                    "type": "number | undefined",
                    "schema": "number | undefined"
                  },
                  "$config": {
                    "name": "$config",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "RuntimeConfig",
                    "schema": {
                      "kind": "object",
                      "type": "RuntimeConfig",
                      "schema": {
                        "app": {
                          "name": "app",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "i",
                          "schema": {
                            "kind": "object",
                            "type": "i",
                            "schema": {
                              "buildAssetsDir": {
                                "name": "buildAssetsDir",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "cdnURL": {
                                "name": "cdnURL",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "baseURL": {
                                "name": "baseURL",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              }
                            }
                          }
                        },
                        "nitro": {
                          "name": "nitro",
                          "global": false,
                          "description": "Only available on the server.",
                          "tags": [],
                          "required": false,
                          "type": "{ envPrefix?: string | undefined; envExpansion?: boolean | undefined; routeRules?: { [path: string]: NitroRouteConfig; } | undefined; openAPI?: k | undefined; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ envPrefix?: string | undefined; envExpansion?: boolean | undefined; routeRules?: { [path: string]: NitroRouteConfig; } | undefined; openAPI?: k | undefined; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "{ envPrefix?: string | undefined; envExpansion?: boolean | undefined; routeRules?: { [path: string]: NitroRouteConfig; } | undefined; openAPI?: k | undefined; }",
                                "schema": {
                                  "envPrefix": {
                                    "name": "envPrefix",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | undefined",
                                    "schema": "string | undefined"
                                  },
                                  "envExpansion": {
                                    "name": "envExpansion",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "routeRules": {
                                    "name": "routeRules",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ [path: string]: NitroRouteConfig; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ [path: string]: NitroRouteConfig; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "object",
                                          "type": "{ [path: string]: NitroRouteConfig; }",
                                          "schema": {}
                                        }
                                      }
                                    }
                                  },
                                  "openAPI": {
                                    "name": "openAPI",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "k | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "k | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "object",
                                          "type": "k",
                                          "schema": {
                                            "meta": {
                                              "name": "meta",
                                              "global": false,
                                              "description": "OpenAPI meta information",
                                              "tags": [],
                                              "required": false,
                                              "type": "{ title?: string | undefined; description?: string | undefined; version?: string | undefined; } | undefined",
                                              "schema": {
                                                "kind": "enum",
                                                "type": "{ title?: string | undefined; description?: string | undefined; version?: string | undefined; } | undefined",
                                                "schema": {
                                                  "0": "undefined",
                                                  "1": {
                                                    "kind": "object",
                                                    "type": "{ title?: string | undefined; description?: string | undefined; version?: string | undefined; }",
                                                    "schema": {
                                                      "title": {
                                                        "name": "title",
                                                        "global": false,
                                                        "description": "",
                                                        "tags": [],
                                                        "required": false,
                                                        "type": "string | undefined",
                                                        "schema": "string | undefined"
                                                      },
                                                      "description": {
                                                        "name": "description",
                                                        "global": false,
                                                        "description": "",
                                                        "tags": [],
                                                        "required": false,
                                                        "type": "string | undefined",
                                                        "schema": "string | undefined"
                                                      },
                                                      "version": {
                                                        "name": "version",
                                                        "global": false,
                                                        "description": "",
                                                        "tags": [],
                                                        "required": false,
                                                        "type": "string | undefined",
                                                        "schema": "string | undefined"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "route": {
                                              "name": "route",
                                              "global": false,
                                              "description": "OpenAPI json route\n\nDefault is `/_openapi.json`",
                                              "tags": [],
                                              "required": false,
                                              "type": "string | undefined",
                                              "schema": "string | undefined"
                                            },
                                            "production": {
                                              "name": "production",
                                              "global": false,
                                              "description": "Enable OpenAPI generation for production builds",
                                              "tags": [],
                                              "required": false,
                                              "type": "false | 'runtime' | 'prerender' | undefined",
                                              "schema": {
                                                "kind": "enum",
                                                "type": "false | 'runtime' | 'prerender' | undefined",
                                                "schema": {
                                                  "0": "undefined",
                                                  "1": "false",
                                                  "2": "'runtime'",
                                                  "3": "'prerender'"
                                                }
                                              }
                                            },
                                            "ui": {
                                              "name": "ui",
                                              "global": false,
                                              "description": "UI configurations",
                                              "tags": [],
                                              "required": false,
                                              "type": "{ scalar?: any; swagger?: false | { route?: string | undefined; } | undefined; } | undefined",
                                              "schema": {
                                                "kind": "enum",
                                                "type": "{ scalar?: any; swagger?: false | { route?: string | undefined; } | undefined; } | undefined",
                                                "schema": {
                                                  "0": "undefined",
                                                  "1": {
                                                    "kind": "object",
                                                    "type": "{ scalar?: any; swagger?: false | { route?: string | undefined; } | undefined; }",
                                                    "schema": {
                                                      "scalar": {
                                                        "name": "scalar",
                                                        "global": false,
                                                        "description": "Scalar UI configuration",
                                                        "tags": [],
                                                        "required": false,
                                                        "type": "any",
                                                        "schema": "any"
                                                      },
                                                      "swagger": {
                                                        "name": "swagger",
                                                        "global": false,
                                                        "description": "Swagger UI configuration",
                                                        "tags": [],
                                                        "required": false,
                                                        "type": "false | { route?: string | undefined; } | undefined",
                                                        "schema": {
                                                          "kind": "enum",
                                                          "type": "false | { route?: string | undefined; } | undefined",
                                                          "schema": {
                                                            "0": "undefined",
                                                            "1": "false",
                                                            "2": {
                                                              "kind": "object",
                                                              "type": "{ route?: string | undefined; }",
                                                              "schema": {
                                                                "route": {
                                                                  "name": "route",
                                                                  "global": false,
                                                                  "description": "Swagger UI route\n\nDefault is `/_swagger`",
                                                                  "tags": [],
                                                                  "required": false,
                                                                  "type": "string | undefined",
                                                                  "schema": "string | undefined"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "public": {
                          "name": "public",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "PublicRuntimeConfig",
                          "schema": {
                            "kind": "object",
                            "type": "PublicRuntimeConfig",
                            "schema": {
                              "mdc": {
                                "name": "mdc",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ components: { prose: boolean; map: Record<string, string>; }; headings: { anchorLinks?: boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined; } | undefined; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ components: { prose: boolean; map: Record<string, string>; }; headings: { anchorLinks?: boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined; } | undefined; }",
                                  "schema": {
                                    "components": {
                                      "name": "components",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "{ prose: boolean; map: Record<string, string>; }",
                                      "schema": {
                                        "kind": "object",
                                        "type": "{ prose: boolean; map: Record<string, string>; }",
                                        "schema": {
                                          "prose": {
                                            "name": "prose",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": true,
                                            "type": "boolean",
                                            "schema": "boolean"
                                          },
                                          "map": {
                                            "name": "map",
                                            "global": false,
                                            "description": "",
                                            "tags": [],
                                            "required": true,
                                            "type": "Record<string, string>",
                                            "schema": "Record<string, string>"
                                          }
                                        }
                                      }
                                    },
                                    "headings": {
                                      "name": "headings",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "{ anchorLinks?: boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined; } | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "{ anchorLinks?: boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined; } | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "object",
                                            "type": "{ anchorLinks?: boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined; }",
                                            "schema": {
                                              "anchorLinks": {
                                                "name": "anchorLinks",
                                                "global": false,
                                                "description": "",
                                                "tags": [],
                                                "required": false,
                                                "type": "boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined",
                                                "schema": {
                                                  "kind": "enum",
                                                  "type": "boolean | { h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; } | undefined",
                                                  "schema": {
                                                    "0": "undefined",
                                                    "1": "false",
                                                    "2": "true",
                                                    "3": "{ h2?: boolean | undefined; h3?: boolean | undefined; h1?: boolean | undefined; h4?: boolean | undefined; h5?: boolean | undefined; h6?: boolean | undefined; }"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "content": {
                                "name": "content",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ wsUrl: string; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ wsUrl: string; }",
                                  "schema": {
                                    "wsUrl": {
                                      "name": "wsUrl",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "content": {
                          "name": "content",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "{ databaseVersion: string; version: string; database: { type: string; filename: string; }; localDatabase: { type: string; filename: string; }; integrityCheck: boolean; }",
                          "schema": {
                            "kind": "object",
                            "type": "{ databaseVersion: string; version: string; database: { type: string; filename: string; }; localDatabase: { type: string; filename: string; }; integrityCheck: boolean; }",
                            "schema": {
                              "databaseVersion": {
                                "name": "databaseVersion",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "version": {
                                "name": "version",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "database": {
                                "name": "database",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ type: string; filename: string; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ type: string; filename: string; }",
                                  "schema": {
                                    "type": {
                                      "name": "type",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "filename": {
                                      "name": "filename",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    }
                                  }
                                }
                              },
                              "localDatabase": {
                                "name": "localDatabase",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "{ type: string; filename: string; }",
                                "schema": {
                                  "kind": "object",
                                  "type": "{ type: string; filename: string; }",
                                  "schema": {
                                    "type": {
                                      "name": "type",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    },
                                    "filename": {
                                      "name": "filename",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "string",
                                      "schema": "string"
                                    }
                                  }
                                }
                              },
                              "integrityCheck": {
                                "name": "integrityCheck",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "boolean",
                                "schema": "boolean"
                              }
                            }
                          }
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "{ serverKnownCssClasses: any[]; }",
                          "schema": {
                            "kind": "object",
                            "type": "{ serverKnownCssClasses: any[]; }",
                            "schema": {
                              "serverKnownCssClasses": {
                                "name": "serverKnownCssClasses",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": true,
                                "type": "any[]",
                                "schema": {
                                  "kind": "array",
                                  "type": "any[]",
                                  "schema": {
                                    "0": "any"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "isHydrating": {
                    "name": "isHydrating",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "boolean | undefined",
                    "schema": "boolean | undefined"
                  },
                  "deferHydration": {
                    "name": "deferHydration",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "() => () => void | Promise<void>",
                    "schema": {
                      "kind": "event",
                      "type": "(): () => void | Promise<void>"
                    }
                  },
                  "ssrContext": {
                    "name": "ssrContext",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": false,
                    "type": "NuxtSSRContext | undefined",
                    "schema": {
                      "kind": "enum",
                      "type": "NuxtSSRContext | undefined",
                      "schema": {
                        "0": "undefined",
                        "1": {
                          "kind": "object",
                          "type": "NuxtSSRContext",
                          "schema": {
                            "url": {
                              "name": "url",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "string",
                              "schema": "string"
                            },
                            "event": {
                              "name": "event",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "H3Event<EventHandlerRequest>",
                              "schema": "H3Event<EventHandlerRequest>"
                            },
                            "runtimeConfig": {
                              "name": "runtimeConfig",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "RuntimeConfig",
                              "schema": "RuntimeConfig"
                            },
                            "noSSR": {
                              "name": "noSSR",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "boolean",
                              "schema": "boolean"
                            },
                            "error": {
                              "name": "error",
                              "global": false,
                              "description": "whether we are rendering an SSR error",
                              "tags": [],
                              "required": false,
                              "type": "boolean | undefined",
                              "schema": "boolean | undefined"
                            },
                            "nuxt": {
                              "name": "nuxt",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "_NuxtApp",
                              "schema": {
                                "kind": "object",
                                "type": "_NuxtApp",
                                "schema": {
                                  "vueApp": {
                                    "name": "vueApp",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "App<Element>",
                                    "schema": "App<Element>"
                                  },
                                  "versions": {
                                    "name": "versions",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "Record<string, string>",
                                    "schema": "Record<string, string>"
                                  },
                                  "hooks": {
                                    "name": "hooks",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "Hookable<RuntimeNuxtHooks, HookKeys<RuntimeNuxtHooks>>",
                                    "schema": "Hookable<RuntimeNuxtHooks, HookKeys<RuntimeNuxtHooks>>"
                                  },
                                  "hook": {
                                    "name": "hook",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, function_: InferCallback<RuntimeNuxtHooks, NameT>, options?: { allowDeprecated?: boolean | undefined; } | undefined) => () => void",
                                    "schema": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, function_: InferCallback<RuntimeNuxtHooks, NameT>, options?: { allowDeprecated?: boolean | undefined; } | undefined) => () => void"
                                  },
                                  "callHook": {
                                    "name": "callHook",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, ...arguments_: Parameters<InferCallback<RuntimeNuxtHooks, NameT>>) => Promise<any>",
                                    "schema": "<NameT extends HookKeys<RuntimeNuxtHooks>>(name: NameT, ...arguments_: Parameters<InferCallback<RuntimeNuxtHooks, NameT>>) => Promise<any>"
                                  },
                                  "runWithContext": {
                                    "name": "runWithContext",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "<T extends () => any>(fn: T) => ReturnType<T> | Promise<Awaited<ReturnType<T>>>",
                                    "schema": "<T extends () => any>(fn: T) => ReturnType<T> | Promise<Awaited<ReturnType<T>>>"
                                  },
                                  "_cookies": {
                                    "name": "_cookies",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "Record<string, unknown> | undefined",
                                    "schema": "Record<string, unknown> | undefined"
                                  },
                                  "_id": {
                                    "name": "_id",
                                    "global": false,
                                    "description": "The id of the Nuxt application.",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "string",
                                    "schema": "string"
                                  },
                                  "_scope": {
                                    "name": "_scope",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "EffectScope",
                                    "schema": "EffectScope"
                                  },
                                  "_asyncDataPromises": {
                                    "name": "_asyncDataPromises",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "Record<string, Promise<any> | undefined>",
                                    "schema": "Record<string, Promise<any> | undefined>"
                                  },
                                  "_asyncData": {
                                    "name": "_asyncData",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "Record<string, { data: Ref<unknown, unknown>; pending: Ref<boolean, boolean>; error: Ref<Error | undefined, Error | undefined>; status: Ref<AsyncDataRequestStatus, AsyncDataRequestStatus>; execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _default: () => unknown; _deps: number; _off: () => void; _init: boolean; _execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _hash?: Record<string, string | undefined> | undefined; } | undefined>",
                                    "schema": "Record<string, { data: Ref<unknown, unknown>; pending: Ref<boolean, boolean>; error: Ref<Error | undefined, Error | undefined>; status: Ref<AsyncDataRequestStatus, AsyncDataRequestStatus>; execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _default: () => unknown; _deps: number; _off: () => void; _init: boolean; _execute: (opts?: AsyncDataExecuteOptions | undefined) => Promise<void>; _hash?: Record<string, string | undefined> | undefined; } | undefined>"
                                  },
                                  "_loadingIndicator": {
                                    "name": "_loadingIndicator",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "LoadingIndicator | undefined",
                                    "schema": "LoadingIndicator | undefined"
                                  },
                                  "_loadingIndicatorDeps": {
                                    "name": "_loadingIndicatorDeps",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "number | undefined",
                                    "schema": "number | undefined"
                                  },
                                  "_middleware": {
                                    "name": "_middleware",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "{ global: RouteMiddleware[]; named: Record<string, RouteMiddleware>; }",
                                    "schema": "{ global: RouteMiddleware[]; named: Record<string, RouteMiddleware>; }"
                                  },
                                  "_processingMiddleware": {
                                    "name": "_processingMiddleware",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "string | boolean | undefined",
                                    "schema": "string | boolean | undefined"
                                  },
                                  "_once": {
                                    "name": "_once",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "{ [key: string]: Promise<any>; }",
                                    "schema": "{ [key: string]: Promise<any>; }"
                                  },
                                  "_observer": {
                                    "name": "_observer",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "{ observe: (element: Element, callback: () => void) => () => void; } | undefined",
                                    "schema": "{ observe: (element: Element, callback: () => void) => () => void; } | undefined"
                                  },
                                  "_appConfig": {
                                    "name": "_appConfig",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "AppConfig",
                                    "schema": "AppConfig"
                                  },
                                  "_route": {
                                    "name": "_route",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "RouteLocationNormalizedLoadedGeneric",
                                    "schema": "RouteLocationNormalizedLoadedGeneric"
                                  },
                                  "_islandPromises": {
                                    "name": "_islandPromises",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "Record<string, Promise<any>> | undefined",
                                    "schema": "Record<string, Promise<any>> | undefined"
                                  },
                                  "_payloadRevivers": {
                                    "name": "_payloadRevivers",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": true,
                                    "type": "Record<string, (data: any) => any>",
                                    "schema": "Record<string, (data: any) => any>"
                                  },
                                  "_routeAnnouncer": {
                                    "name": "_routeAnnouncer",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "RouteAnnouncer | undefined",
                                    "schema": "RouteAnnouncer | undefined"
                                  },
                                  "_routeAnnouncerDeps": {
                                    "name": "_routeAnnouncerDeps",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "internal"
                                      }
                                    ],
                                    "required": false,
                                    "type": "number | undefined",
                                    "schema": "number | undefined"
                                  },
                                  "$config": {
                                    "name": "$config",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "RuntimeConfig",
                                    "schema": "RuntimeConfig"
                                  },
                                  "isHydrating": {
                                    "name": "isHydrating",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "deferHydration": {
                                    "name": "deferHydration",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "() => () => void | Promise<void>",
                                    "schema": "() => () => void | Promise<void>"
                                  },
                                  "ssrContext": {
                                    "name": "ssrContext",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "NuxtSSRContext | undefined",
                                    "schema": "NuxtSSRContext | undefined"
                                  },
                                  "payload": {
                                    "name": "payload",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "NuxtPayload",
                                    "schema": {
                                      "kind": "object",
                                      "type": "NuxtPayload",
                                      "schema": {
                                        "path": {
                                          "name": "path",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "string | undefined",
                                          "schema": "string | undefined"
                                        },
                                        "serverRendered": {
                                          "name": "serverRendered",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": "boolean | undefined"
                                        },
                                        "prerenderedAt": {
                                          "name": "prerenderedAt",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "number | undefined",
                                          "schema": "number | undefined"
                                        },
                                        "data": {
                                          "name": "data",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": true,
                                          "type": "Record<string, any>",
                                          "schema": "Record<string, any>"
                                        },
                                        "state": {
                                          "name": "state",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": true,
                                          "type": "Record<string, any>",
                                          "schema": "Record<string, any>"
                                        },
                                        "once": {
                                          "name": "once",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": true,
                                          "type": "Set<string>",
                                          "schema": "Set<string>"
                                        },
                                        "config": {
                                          "name": "config",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "Pick<RuntimeConfig, 'public' | 'app'> | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "Pick<RuntimeConfig, 'public' | 'app'> | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "Pick<RuntimeConfig, 'public' | 'app'>"
                                            }
                                          }
                                        },
                                        "error": {
                                          "name": "error",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "NuxtError<unknown> | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NuxtError<unknown> | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "NuxtError<unknown>"
                                            }
                                          }
                                        },
                                        "_errors": {
                                          "name": "_errors",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": true,
                                          "type": "Record<string, NuxtError<unknown> | undefined>",
                                          "schema": "Record<string, NuxtError<unknown> | undefined>"
                                        }
                                      }
                                    }
                                  },
                                  "static": {
                                    "name": "static",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "{ data: Record<string, any>; }",
                                    "schema": {
                                      "kind": "object",
                                      "type": "{ data: Record<string, any>; }",
                                      "schema": {
                                        "data": {
                                          "name": "data",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": true,
                                          "type": "Record<string, any>",
                                          "schema": "Record<string, any>"
                                        }
                                      }
                                    }
                                  },
                                  "provide": {
                                    "name": "provide",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "(name: string, value: any) => void",
                                    "schema": {
                                      "kind": "event",
                                      "type": "(name: string, value: any): void",
                                      "schema": {}
                                    }
                                  }
                                }
                              }
                            },
                            "payload": {
                              "name": "payload",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "Partial<NuxtPayload>",
                              "schema": "Partial<NuxtPayload>"
                            },
                            "head": {
                              "name": "head",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": true,
                              "type": "V",
                              "schema": {
                                "kind": "enum",
                                "type": "V",
                                "schema": {
                                  "0": {
                                    "kind": "object",
                                    "type": "U<U<Deprecated>> & ObjectPlugin<any[]>",
                                    "schema": {
                                      "plugins": {
                                        "name": "plugins",
                                        "global": false,
                                        "description": "Registered plugins.",
                                        "tags": [],
                                        "required": true,
                                        "type": "Map<string, n>",
                                        "schema": "Map<string, n>"
                                      },
                                      "entries": {
                                        "name": "entries",
                                        "global": false,
                                        "description": "The head entries.",
                                        "tags": [],
                                        "required": true,
                                        "type": "Map<number, H<U<Deprecated>>>",
                                        "schema": "Map<number, H<U<Deprecated>>>"
                                      },
                                      "headEntries": {
                                        "name": "headEntries",
                                        "global": false,
                                        "description": "The active head entries.",
                                        "tags": [
                                          {
                                            "name": "deprecated",
                                            "text": "Use entries instead."
                                          }
                                        ],
                                        "required": true,
                                        "type": "() => H<U<Deprecated>>[]",
                                        "schema": {
                                          "kind": "event",
                                          "type": "(): HeadEntry<UseHeadInput<Deprecated>>[]"
                                        }
                                      },
                                      "push": {
                                        "name": "push",
                                        "global": false,
                                        "description": "Create a new head entry.",
                                        "tags": [],
                                        "required": true,
                                        "type": "(entry: U<Deprecated>, options?: r | undefined) => o<U<Deprecated>>",
                                        "schema": {
                                          "kind": "event",
                                          "type": "(entry: UseHeadInput<Deprecated>, options?: HeadEntryOptions | undefined): ActiveHeadEntry<UseHeadInput<Deprecated>>",
                                          "schema": {}
                                        }
                                      },
                                      "resolveTags": {
                                        "name": "resolveTags",
                                        "global": false,
                                        "description": "Resolve tags from head entries.",
                                        "tags": [],
                                        "required": true,
                                        "type": "() => Promise<au[]>",
                                        "schema": {
                                          "kind": "event",
                                          "type": "(): Promise<HeadTag[]>"
                                        }
                                      },
                                      "invalidate": {
                                        "name": "invalidate",
                                        "global": false,
                                        "description": "Invalidate all entries and re-queue them for normalization.",
                                        "tags": [],
                                        "required": true,
                                        "type": "() => void",
                                        "schema": {
                                          "kind": "event",
                                          "type": "(): void"
                                        }
                                      },
                                      "hooks": {
                                        "name": "hooks",
                                        "global": false,
                                        "description": "Exposed hooks for easier extension.",
                                        "tags": [],
                                        "required": true,
                                        "type": "Hookable<F, HookKeys<F>>",
                                        "schema": "Hookable<F, HookKeys<F>>"
                                      },
                                      "resolvedOptions": {
                                        "name": "resolvedOptions",
                                        "global": false,
                                        "description": "Resolved options",
                                        "tags": [],
                                        "required": true,
                                        "type": "C",
                                        "schema": {
                                          "kind": "object",
                                          "type": "C",
                                          "schema": {
                                            "document": {
                                              "name": "document",
                                              "global": false,
                                              "description": "",
                                              "tags": [],
                                              "required": false,
                                              "type": "Document | undefined",
                                              "schema": {
                                                "kind": "enum",
                                                "type": "Document | undefined",
                                                "schema": {
                                                  "0": "undefined",
                                                  "1": {
                                                    "kind": "object",
                                                    "type": "Document",
                                                    "schema": {}
                                                  }
                                                }
                                              }
                                            },
                                            "plugins": {
                                              "name": "plugins",
                                              "global": false,
                                              "description": "",
                                              "tags": [],
                                              "required": false,
                                              "type": "m[] | undefined",
                                              "schema": {
                                                "kind": "enum",
                                                "type": "m[] | undefined",
                                                "schema": {
                                                  "0": "undefined",
                                                  "1": {
                                                    "kind": "array",
                                                    "type": "m[]",
                                                    "schema": [
                                                      {
                                                        "kind": "enum",
                                                        "type": "m",
                                                        "schema": [
                                                          {
                                                            "kind": "object",
                                                            "type": "l & { key: string; }",
                                                            "schema": {
                                                              "init": {
                                                                "name": "init",
                                                                "global": false,
                                                                "description": "Initial head input that should be added.\n\nAny tags here are added with low priority.",
                                                                "tags": [],
                                                                "required": false,
                                                                "type": "(false | R | undefined)[] | undefined",
                                                                "schema": {
                                                                  "kind": "enum",
                                                                  "type": "(false | R | undefined)[] | undefined",
                                                                  "schema": {
                                                                    "0": "undefined",
                                                                    "1": {
                                                                      "kind": "array",
                                                                      "type": "(false | R | undefined)[]",
                                                                      "schema": [
                                                                        {
                                                                          "kind": "enum",
                                                                          "type": "false | R | undefined",
                                                                          "schema": [
                                                                            "undefined",
                                                                            "false",
                                                                            {
                                                                              "kind": "object",
                                                                              "type": "R",
                                                                              "schema": {
                                                                                "title": {
                                                                                  "name": "title",
                                                                                  "global": false,
                                                                                  "description": "The `<title>` HTML element defines the document's title that is shown in a browser's title bar or a page's tab.\nIt only contains text; tags within the element are ignored.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "T",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "T",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "string",
                                                                                      "3": "number",
                                                                                      "4": "false",
                                                                                      "5": "true",
                                                                                      "6": {
                                                                                        "kind": "event",
                                                                                        "type": "(): string | number | boolean | null | undefined"
                                                                                      },
                                                                                      "7": "aA<{ textContent: string; } & ao>"
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "base": {
                                                                                  "name": "base",
                                                                                  "global": false,
                                                                                  "description": "The `<base>` HTML element specifies the base URL to use for all relative URLs in a document.\nThere can be only one <base> element in a document.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<aA<Base & aj & ao>>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<aA<Base & aj & ao>>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": "aA<Base & aj & ao>",
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableProperties<Base & ResolvesDuplicates & TagPriority>"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "link": {
                                                                                  "name": "link",
                                                                                  "global": false,
                                                                                  "description": "The `<link>` HTML element specifies relationships between the current document and an external resource.\nThis element is most commonly used to link to stylesheets, but is also used to establish site icons\n(both 'favicon' style icons and icons for the home screen and apps on mobile devices) among other things.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<az<Y>[]>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<az<Y>[]>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "array",
                                                                                        "type": "az<Y>[]",
                                                                                        "schema": [
                                                                                          {
                                                                                            "kind": "enum",
                                                                                            "type": "az<Y>",
                                                                                            "schema": [
                                                                                              "undefined",
                                                                                              "null",
                                                                                              "false",
                                                                                              {
                                                                                                "kind": "object",
                                                                                                "type": "Y",
                                                                                                "schema": {
                                                                                                  "as": {
                                                                                                    "name": "as",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute is only used when rel='preload' or rel='prefetch' has been set on the `<link>` element.\nIt specifies the type of content being loaded by the `<link>`, which is necessary for request matching,\napplication of correct content security policy, and setting of correct Accept request header.\nFurthermore, rel='preload' uses this as a signal for request prioritization.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'object' | 'style' | 'image' | 'audio' | 'embed' | 'script' | 'track' | 'video' | 'font' | 'document' | 'fetch' | 'worker' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<'object' | 'style' | 'image' | 'audio' | 'embed' | 'script' | 'track' | 'video' | 'font' | 'document' | 'fetch' | 'worker' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "'object'",
                                                                                                        "4": "'style'",
                                                                                                        "5": "'image'",
                                                                                                        "6": "'audio'",
                                                                                                        "7": "'embed'",
                                                                                                        "8": "'script'",
                                                                                                        "9": "'track'",
                                                                                                        "10": "'video'",
                                                                                                        "11": "'font'",
                                                                                                        "12": "'document'",
                                                                                                        "13": "'fetch'",
                                                                                                        "14": "'worker'",
                                                                                                        "15": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): 'object' | 'style' | 'image' | 'audio' | 'embed' | 'script' | 'track' | 'video' | 'font' | 'document' | Falsy | 'fetch' | 'worker'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "color": {
                                                                                                    "name": "color",
                                                                                                    "global": false,
                                                                                                    "description": "The color attribute is used with the mask-icon link type.\nThe attribute must only be specified on link elements that have a rel attribute\nthat contains the mask-icon keyword.\nThe value must be a string that matches the CSS `<color>` production,\ndefining a suggested color that user agents can use to customize the display\nof the icon that the user sees when they pin your site.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://html.spec.whatwg.org/multipage/semantics.html#attr-link-color"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<string | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "string",
                                                                                                        "3": "false",
                                                                                                        "4": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): string | Falsy"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "crossorigin": {
                                                                                                    "name": "crossorigin",
                                                                                                    "global": false,
                                                                                                    "description": "This enumerated attribute indicates whether CORS must be used when fetching the resource.\nCORS-enabled images can be reused in the `<canvas>` element without being tainted.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-crossorigin"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'' | 'anonymous' | 'use-credentials' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<'' | 'anonymous' | 'use-credentials' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "''",
                                                                                                        "4": "'anonymous'",
                                                                                                        "5": "'use-credentials'",
                                                                                                        "6": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): '' | Falsy | 'anonymous' | 'use-credentials'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "fetchpriority": {
                                                                                                    "name": "fetchpriority",
                                                                                                    "global": false,
                                                                                                    "description": "Provides a hint of the relative priority to use when fetching a preloaded resource.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-fetchpriority"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'auto' | 'high' | 'low' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<'auto' | 'high' | 'low' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "'auto'",
                                                                                                        "4": "'high'",
                                                                                                        "5": "'low'",
                                                                                                        "6": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): 'auto' | Falsy | 'high' | 'low'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "href": {
                                                                                                    "name": "href",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute specifies the URL of the linked resource. A URL can be absolute or relative.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-href"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "hreflang": {
                                                                                                    "name": "hreflang",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute indicates the language of the linked resource. It is purely advisory.\nAllowed values are specified by RFC 5646: Tags for Identifying Languages (also known as BCP 47).\nUse this attribute only if the href attribute is present.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-hreflang"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "imagesizes": {
                                                                                                    "name": "imagesizes",
                                                                                                    "global": false,
                                                                                                    "description": "For rel='preload' and as='image' only, the imagesizes attribute is a sizes attribute that indicates to preload\nthe appropriate resource used by an img element with corresponding values for its srcset and sizes attributes.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesizes"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "imagesrcset": {
                                                                                                    "name": "imagesrcset",
                                                                                                    "global": false,
                                                                                                    "description": "For rel='preload' and as='image' only, the imagesrcset attribute is a sourceset attribute that indicates\nto preload the appropriate resource used by an img element with corresponding values for its srcset and\nsizes attributes.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesrcset"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "integrity": {
                                                                                                    "name": "integrity",
                                                                                                    "global": false,
                                                                                                    "description": "Contains inline metadata — a base64-encoded cryptographic hash of the resource (file)\nyou're telling the browser to fetch.\nThe browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-integrity"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "media": {
                                                                                                    "name": "media",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute specifies the media that the linked resource applies to.\nIts value must be a media type / media query.\nThis attribute is mainly useful when linking to external stylesheets —\nit allows the user agent to pick the best adapted one for the device it runs on.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-integrity"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "prefetch": {
                                                                                                    "name": "prefetch",
                                                                                                    "global": false,
                                                                                                    "description": "Identifies a resource that might be required by the next navigation and that the user agent should retrieve it.\nThis allows the user agent to respond faster when the resource is requested in the future.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-prefetch"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "referrerpolicy": {
                                                                                                    "name": "referrerpolicy",
                                                                                                    "global": false,
                                                                                                    "description": "A string indicating which referrer to use when fetching the resource.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-referrerpolicy"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<e | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<e | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "''",
                                                                                                        "4": "'no-referrer'",
                                                                                                        "5": "'no-referrer-when-downgrade'",
                                                                                                        "6": "'origin'",
                                                                                                        "7": "'origin-when-cross-origin'",
                                                                                                        "8": "'same-origin'",
                                                                                                        "9": "'strict-origin'",
                                                                                                        "10": "'strict-origin-when-cross-origin'",
                                                                                                        "11": "'unsafe-url'",
                                                                                                        "12": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | ReferrerPolicy"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "rel": {
                                                                                                    "name": "rel",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute names a relationship of the linked document to the current document.\nThe attribute must be a space-separated list of link type values.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-rel"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<LinkRelTypes | (string & Record<never, never>) | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<LinkRelTypes | (string & Record<never, never>) | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "'search'",
                                                                                                        "4": "'icon'",
                                                                                                        "5": "'external'",
                                                                                                        "6": "'prefetch'",
                                                                                                        "7": "'noopener'",
                                                                                                        "8": "'noreferrer'",
                                                                                                        "9": "'nofollow'",
                                                                                                        "10": "'help'",
                                                                                                        "11": "'next'",
                                                                                                        "12": "'prev'",
                                                                                                        "13": "'prerender'",
                                                                                                        "14": "'tag'",
                                                                                                        "15": "'alternate'",
                                                                                                        "16": "'author'",
                                                                                                        "17": "'shortcut icon'",
                                                                                                        "18": "'bookmark'",
                                                                                                        "19": "'canonical'",
                                                                                                        "20": "'dns-prefetch'",
                                                                                                        "21": "'license'",
                                                                                                        "22": "'manifest'",
                                                                                                        "23": "'me'",
                                                                                                        "24": "'modulepreload'",
                                                                                                        "25": "'opener'",
                                                                                                        "26": "'pingback'",
                                                                                                        "27": "'preconnect'",
                                                                                                        "28": "'preload'",
                                                                                                        "29": "'shortlink'",
                                                                                                        "30": "'stylesheet'",
                                                                                                        "31": "'apple-touch-icon'",
                                                                                                        "32": "'apple-touch-startup-image'",
                                                                                                        "33": {
                                                                                                          "kind": "object",
                                                                                                          "type": "string & Record<never, never>",
                                                                                                          "schema": {}
                                                                                                        },
                                                                                                        "34": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | LinkRelTypes | (string & Record<never, never>)"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "sizes": {
                                                                                                    "name": "sizes",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute defines the sizes of the icons for visual media contained in the resource.\nIt must be present only if the rel contains a value of icon or a non-standard type\nsuch as Apple's apple-touch-icon.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-sizes"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<(string & Record<never, never>) | 'any' | '16x16' | '32x32' | '64x64' | '180x180' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<(string & Record<never, never>) | 'any' | '16x16' | '32x32' | '64x64' | '180x180' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "string & Record<never, never>",
                                                                                                        "4": "'any'",
                                                                                                        "5": "'16x16'",
                                                                                                        "6": "'32x32'",
                                                                                                        "7": "'64x64'",
                                                                                                        "8": "'180x180'",
                                                                                                        "9": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | (string & Record<never, never>) | 'any' | '16x16' | '32x32' | '64x64' | '180x180'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "title": {
                                                                                                    "name": "title",
                                                                                                    "global": false,
                                                                                                    "description": "The title attribute has special semantics on the `<link>` element.\nWhen used on a `<link rel='stylesheet'>` it defines a default or an alternate stylesheet.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-title"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "type": {
                                                                                                    "name": "type",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute is used to define the type of the content linked to.\nThe value of the attribute should be a MIME type such as text/html, text/css, and so on.\nThe common use of this attribute is to define the type of stylesheet being referenced (such as text/css),\nbut given that CSS is the only stylesheet language used on the web,\nnot only is it possible to omit the type attribute, but is actually now recommended practice.\nIt is also used on rel='preload' link types, to make sure the browser only downloads file types that it supports.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-type"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<(string & Record<never, never>) | 'audio/aac' | 'application/x-abiword' | 'application/x-freearc' | 'image/avif' | 'video/x-msvideo' | 'application/vnd.amazon.ebook' | 'application/octet-stream' | 'image/bmp' | 'application/x-bzip' | 'application/x-bzip2' | 'application/x-cdf' | 'application/x-csh' | 'text/css' | 'text/csv' | 'application/msword' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'application/vnd.ms-fontobject' | 'application/epub+zip' | 'application/gzip' | 'image/gif' | 'text/html' | 'image/vnd.microsoft.icon' | 'text/calendar' | 'application/java-archive' | 'image/jpeg' | 'text/javascript' | 'application/json' | 'application/ld+json' | 'audio/midi' | 'audio/x-midi' | 'audio/mpeg' | 'video/mp4' | 'video/mpeg' | 'application/vnd.apple.installer+xml' | 'application/vnd.oasis.opendocument.presentation' | 'application/vnd.oasis.opendocument.spreadsheet' | 'application/vnd.oasis.opendocument.text' | 'audio/ogg' | 'video/ogg' | 'application/ogg' | 'audio/opus' | 'font/otf' | 'image/png' | 'application/pdf' | 'application/x-httpd-php' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'application/vnd.rar' | 'application/rtf' | 'application/x-sh' | 'image/svg+xml' | 'application/x-tar' | 'image/tiff' | 'video/mp2t' | 'font/ttf' | 'text/plain' | 'application/vnd.visio' | 'audio/wav' | 'audio/webm' | 'video/webm' | 'image/webp' | 'font/woff' | 'font/woff2' | 'application/xhtml+xml' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' | 'text/xml' | 'application/atom+xml' | 'application/xml' | 'application/vnd.mozilla.xul+xml' | 'application/zip' | 'video/3gpp' | 'audio/3gpp' | 'video/3gpp2' | 'audio/3gpp2' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<(string & Record<never, never>) | 'audio/aac' | 'application/x-abiword' | 'application/x-freearc' | 'image/avif' | 'video/x-msvideo' | 'application/vnd.amazon.ebook' | 'application/octet-stream' | 'image/bmp' | 'application/x-bzip' | 'application/x-bzip2' | 'application/x-cdf' | 'application/x-csh' | 'text/css' | 'text/csv' | 'application/msword' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'application/vnd.ms-fontobject' | 'application/epub+zip' | 'application/gzip' | 'image/gif' | 'text/html' | 'image/vnd.microsoft.icon' | 'text/calendar' | 'application/java-archive' | 'image/jpeg' | 'text/javascript' | 'application/json' | 'application/ld+json' | 'audio/midi' | 'audio/x-midi' | 'audio/mpeg' | 'video/mp4' | 'video/mpeg' | 'application/vnd.apple.installer+xml' | 'application/vnd.oasis.opendocument.presentation' | 'application/vnd.oasis.opendocument.spreadsheet' | 'application/vnd.oasis.opendocument.text' | 'audio/ogg' | 'video/ogg' | 'application/ogg' | 'audio/opus' | 'font/otf' | 'image/png' | 'application/pdf' | 'application/x-httpd-php' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'application/vnd.rar' | 'application/rtf' | 'application/x-sh' | 'image/svg+xml' | 'application/x-tar' | 'image/tiff' | 'video/mp2t' | 'font/ttf' | 'text/plain' | 'application/vnd.visio' | 'audio/wav' | 'audio/webm' | 'video/webm' | 'image/webp' | 'font/woff' | 'font/woff2' | 'application/xhtml+xml' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' | 'text/xml' | 'application/atom+xml' | 'application/xml' | 'application/vnd.mozilla.xul+xml' | 'application/zip' | 'video/3gpp' | 'audio/3gpp' | 'video/3gpp2' | 'audio/3gpp2' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "string & Record<never, never>",
                                                                                                        "4": "'audio/aac'",
                                                                                                        "5": "'application/x-abiword'",
                                                                                                        "6": "'application/x-freearc'",
                                                                                                        "7": "'image/avif'",
                                                                                                        "8": "'video/x-msvideo'",
                                                                                                        "9": "'application/vnd.amazon.ebook'",
                                                                                                        "10": "'application/octet-stream'",
                                                                                                        "11": "'image/bmp'",
                                                                                                        "12": "'application/x-bzip'",
                                                                                                        "13": "'application/x-bzip2'",
                                                                                                        "14": "'application/x-cdf'",
                                                                                                        "15": "'application/x-csh'",
                                                                                                        "16": "'text/css'",
                                                                                                        "17": "'text/csv'",
                                                                                                        "18": "'application/msword'",
                                                                                                        "19": "'application/vnd.openxmlformats-officedocument.wordprocessingml.document'",
                                                                                                        "20": "'application/vnd.ms-fontobject'",
                                                                                                        "21": "'application/epub+zip'",
                                                                                                        "22": "'application/gzip'",
                                                                                                        "23": "'image/gif'",
                                                                                                        "24": "'text/html'",
                                                                                                        "25": "'image/vnd.microsoft.icon'",
                                                                                                        "26": "'text/calendar'",
                                                                                                        "27": "'application/java-archive'",
                                                                                                        "28": "'image/jpeg'",
                                                                                                        "29": "'text/javascript'",
                                                                                                        "30": "'application/json'",
                                                                                                        "31": "'application/ld+json'",
                                                                                                        "32": "'audio/midi'",
                                                                                                        "33": "'audio/x-midi'",
                                                                                                        "34": "'audio/mpeg'",
                                                                                                        "35": "'video/mp4'",
                                                                                                        "36": "'video/mpeg'",
                                                                                                        "37": "'application/vnd.apple.installer+xml'",
                                                                                                        "38": "'application/vnd.oasis.opendocument.presentation'",
                                                                                                        "39": "'application/vnd.oasis.opendocument.spreadsheet'",
                                                                                                        "40": "'application/vnd.oasis.opendocument.text'",
                                                                                                        "41": "'audio/ogg'",
                                                                                                        "42": "'video/ogg'",
                                                                                                        "43": "'application/ogg'",
                                                                                                        "44": "'audio/opus'",
                                                                                                        "45": "'font/otf'",
                                                                                                        "46": "'image/png'",
                                                                                                        "47": "'application/pdf'",
                                                                                                        "48": "'application/x-httpd-php'",
                                                                                                        "49": "'application/vnd.ms-powerpoint'",
                                                                                                        "50": "'application/vnd.openxmlformats-officedocument.presentationml.presentation'",
                                                                                                        "51": "'application/vnd.rar'",
                                                                                                        "52": "'application/rtf'",
                                                                                                        "53": "'application/x-sh'",
                                                                                                        "54": "'image/svg+xml'",
                                                                                                        "55": "'application/x-tar'",
                                                                                                        "56": "'image/tiff'",
                                                                                                        "57": "'video/mp2t'",
                                                                                                        "58": "'font/ttf'",
                                                                                                        "59": "'text/plain'",
                                                                                                        "60": "'application/vnd.visio'",
                                                                                                        "61": "'audio/wav'",
                                                                                                        "62": "'audio/webm'",
                                                                                                        "63": "'video/webm'",
                                                                                                        "64": "'image/webp'",
                                                                                                        "65": "'font/woff'",
                                                                                                        "66": "'font/woff2'",
                                                                                                        "67": "'application/xhtml+xml'",
                                                                                                        "68": "'application/vnd.ms-excel'",
                                                                                                        "69": "'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'",
                                                                                                        "70": "'text/xml'",
                                                                                                        "71": "'application/atom+xml'",
                                                                                                        "72": "'application/xml'",
                                                                                                        "73": "'application/vnd.mozilla.xul+xml'",
                                                                                                        "74": "'application/zip'",
                                                                                                        "75": "'video/3gpp'",
                                                                                                        "76": "'audio/3gpp'",
                                                                                                        "77": "'video/3gpp2'",
                                                                                                        "78": "'audio/3gpp2'",
                                                                                                        "79": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | (string & Record<never, never>) | 'audio/aac' | 'application/x-abiword' | 'application/x-freearc' | 'image/avif' | 'video/x-msvideo' | 'application/vnd.amazon.ebook' | ... 68 more ... | 'audio/3gpp2'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "nonce": {
                                                                                                    "name": "nonce",
                                                                                                    "global": false,
                                                                                                    "description": "A cryptographic nonce ('number used once') which can be used by Content Security Policy to determine whether or not\na given fetch will be allowed to proceed.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "id": {
                                                                                                    "name": "id",
                                                                                                    "global": false,
                                                                                                    "description": "The id global attribute defines a unique identifier (ID) which must be unique in the whole document.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "blocking": {
                                                                                                    "name": "blocking",
                                                                                                    "global": false,
                                                                                                    "description": "The blocking attribute indicates that certain operations should be blocked on the fetching of an external resource.\nThe value is an unordered set of unique space-separated tokens, each of which are possible blocking tokens.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "example",
                                                                                                        "text": "blocking: 'render'"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "tagPriority": {
                                                                                                    "name": "tagPriority",
                                                                                                    "global": false,
                                                                                                    "description": "The priority for rendering the tag, without this all tags are rendered as they are registered\n(besides some special tags).\n\nThe following special tags have default priorities:\n-2 `<meta charset ...>`\n-1 `<base>`\n0 `<meta http-equiv='content-security-policy' ...>`\n\nAll other tags have a default priority of 10: `<meta>`, `<script>`, `<link>`, `<style>`, etc",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "number",
                                                                                                        "3": "false",
                                                                                                        "4": "'high'",
                                                                                                        "5": "'low'",
                                                                                                        "6": "'critical'",
                                                                                                        "7": "`before:${string}`",
                                                                                                        "8": "`after:${string}`",
                                                                                                        "9": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): number | Falsy | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}`"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "tagPosition": {
                                                                                                    "name": "tagPosition",
                                                                                                    "global": false,
                                                                                                    "description": "Specify where to render the tag.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "default",
                                                                                                        "text": "'head'"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<ak | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<ak | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "'head'",
                                                                                                        "4": "'bodyClose'",
                                                                                                        "5": "'bodyOpen'",
                                                                                                        "6": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | ValidTagPositions"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "key": {
                                                                                                    "name": "key",
                                                                                                    "global": false,
                                                                                                    "description": "By default, tags which share the same unique key `name`, `property` are de-duped. To allow duplicates\nto be made you can provide a unique key for each entry.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "tagDuplicateStrategy": {
                                                                                                    "name": "tagDuplicateStrategy",
                                                                                                    "global": false,
                                                                                                    "description": "The strategy to use when a duplicate tag is encountered.\n\n- `replace` - Replace the existing tag with the new tag\n- `merge` - Merge the existing tag with the new tag",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "default",
                                                                                                        "text": "'replace' (some tags will default to 'merge', such as htmlAttr)"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'replace' | 'merge' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<'replace' | 'merge' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "'replace'",
                                                                                                        "4": "'merge'",
                                                                                                        "5": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): 'replace' | Falsy | 'merge'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "processTemplateParams": {
                                                                                                    "name": "processTemplateParams",
                                                                                                    "global": false,
                                                                                                    "description": "",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<boolean | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<boolean | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "true",
                                                                                                        "4": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): true | Falsy"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "onabort": {
                                                                                                    "name": "onabort",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run on abort",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "string | ((e: Event) => void) | undefined",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "string",
                                                                                                        "2": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(e: Event): void",
                                                                                                          "schema": []
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "onerror": {
                                                                                                    "name": "onerror",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run when an error occurs when the file is being loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onload": {
                                                                                                    "name": "onload",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run when the file is loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onprogress": {
                                                                                                    "name": "onprogress",
                                                                                                    "global": false,
                                                                                                    "description": "The progress event is fired periodically when a request receives more data.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onloadstart": {
                                                                                                    "name": "onloadstart",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run just as the file begins to load before anything is actually loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  }
                                                                                                }
                                                                                              },
                                                                                              {
                                                                                                "kind": "event",
                                                                                                "type": "(): Falsy | ResolvableLink"
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableValue<ResolvableLink>[]"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "meta": {
                                                                                  "name": "meta",
                                                                                  "global": false,
                                                                                  "description": "The `<meta>` element represents metadata that cannot be expressed in other HTML elements, like `<link>` or `<script>`.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<az<aA<O & ab & ao & DeprecatedResolvesDuplicates & as>>[]>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<az<aA<O & ab & ao & DeprecatedResolvesDuplicates & as>>[]>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "array",
                                                                                        "type": "az<aA<O & ab & ao & DeprecatedResolvesDuplicates & as>>[]",
                                                                                        "schema": [
                                                                                          {
                                                                                            "kind": "enum",
                                                                                            "type": "az<aA<O & ab & ao & DeprecatedResolvesDuplicates & as>>",
                                                                                            "schema": [
                                                                                              "undefined",
                                                                                              "null",
                                                                                              "false",
                                                                                              "aA<O & ab & ao & DeprecatedResolvesDuplicates & as>",
                                                                                              {
                                                                                                "kind": "event",
                                                                                                "type": "(): Falsy | ResolvableProperties<UnheadMeta & DataKeys & TagPriority & DeprecatedResolvesDuplicates & ProcessesTemplateParams>"
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableValue<ResolvableProperties<UnheadMeta & DataKeys & TagPriority & DeprecatedResolvesDuplicates & ProcessesTemplateParams>>[]"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "style": {
                                                                                  "name": "style",
                                                                                  "global": false,
                                                                                  "description": "The `<style>` HTML element contains style information for a document, or part of a document.\nIt contains CSS, which is applied to the contents of the document containing the `<style>` element.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<az<_>[]>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<az<_>[]>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "array",
                                                                                        "type": "az<_>[]",
                                                                                        "schema": [
                                                                                          {
                                                                                            "kind": "enum",
                                                                                            "type": "az<_>",
                                                                                            "schema": [
                                                                                              "undefined",
                                                                                              "null",
                                                                                              "string",
                                                                                              "false",
                                                                                              "aA<Style & ab & ao & al & an & aj & as>",
                                                                                              {
                                                                                                "kind": "event",
                                                                                                "type": "(): Falsy | ResolvableStyle"
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableValue<ResolvableStyle>[]"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "script": {
                                                                                  "name": "script",
                                                                                  "global": false,
                                                                                  "description": "The `<script>` HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<az<$>[]>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<az<$>[]>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "array",
                                                                                        "type": "az<$>[]",
                                                                                        "schema": [
                                                                                          {
                                                                                            "kind": "enum",
                                                                                            "type": "az<$>",
                                                                                            "schema": [
                                                                                              "undefined",
                                                                                              "null",
                                                                                              "string",
                                                                                              "false",
                                                                                              {
                                                                                                "kind": "object",
                                                                                                "type": "aA<ai & ab & ao & al & an & aj & as> & Q<ac>",
                                                                                                "schema": {
                                                                                                  "async": {
                                                                                                    "name": "async",
                                                                                                    "global": false,
                                                                                                    "description": "For classic scripts, if the async attribute is present,\nthen the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.\n\nFor module scripts,\nif the async attribute is present then the scripts and all their dependencies will be executed in the defer queue,\ntherefore they will get fetched in parallel to parsing and evaluated as soon as they are available.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<B | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<B | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "true",
                                                                                                        "4": "''",
                                                                                                        "5": "'true'",
                                                                                                        "6": "'false'",
                                                                                                        "7": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): boolean | '' | 'true' | 'false' | null | undefined"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "crossorigin": {
                                                                                                    "name": "crossorigin",
                                                                                                    "global": false,
                                                                                                    "description": "Normal script elements pass minimal information to the window.onerror\nfor scripts which do not pass the standard CORS checks.\nTo allow error logging for sites which use a separate domain for static media, use this attribute.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-crossorigin"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'' | 'anonymous' | 'use-credentials' | undefined>",
                                                                                                    "schema": "az<'' | 'anonymous' | 'use-credentials' | undefined>"
                                                                                                  },
                                                                                                  "defer": {
                                                                                                    "name": "defer",
                                                                                                    "global": false,
                                                                                                    "description": "This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document\nhas been parsed, but before firing DOMContentLoaded.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<B | undefined>",
                                                                                                    "schema": "az<B | undefined>"
                                                                                                  },
                                                                                                  "fetchpriority": {
                                                                                                    "name": "fetchpriority",
                                                                                                    "global": false,
                                                                                                    "description": "Provides a hint of the relative priority to use when fetching an external script.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-fetchpriority"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'auto' | 'high' | 'low' | undefined>",
                                                                                                    "schema": "az<'auto' | 'high' | 'low' | undefined>"
                                                                                                  },
                                                                                                  "integrity": {
                                                                                                    "name": "integrity",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute contains inline metadata that a user agent can use to verify\nthat a fetched resource has been delivered free of unexpected manipulation.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-integrity"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "nomodule": {
                                                                                                    "name": "nomodule",
                                                                                                    "global": false,
                                                                                                    "description": "This Boolean attribute is set to indicate that the script should not be executed in browsers\nthat support ES modules — in effect,\nthis can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<B | undefined>",
                                                                                                    "schema": "az<B | undefined>"
                                                                                                  },
                                                                                                  "referrerpolicy": {
                                                                                                    "name": "referrerpolicy",
                                                                                                    "global": false,
                                                                                                    "description": "Indicates which referrer to send when fetching the script, or resources fetched by the script.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-referrerpolicy"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<e | undefined>",
                                                                                                    "schema": "az<e | undefined>"
                                                                                                  },
                                                                                                  "src": {
                                                                                                    "name": "src",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute specifies the URI of an external script;\nthis can be used as an alternative to embedding a script directly within a document.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-src"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "type": {
                                                                                                    "name": "type",
                                                                                                    "global": false,
                                                                                                    "description": "This attribute indicates the type of script represented.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-type"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'' | (string & Record<never, never>) | 'text/javascript' | 'application/json' | 'application/ld+json' | 'module' | 'speculationrules' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<'' | (string & Record<never, never>) | 'text/javascript' | 'application/json' | 'application/ld+json' | 'module' | 'speculationrules' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "''",
                                                                                                        "4": "string & Record<never, never>",
                                                                                                        "5": "'text/javascript'",
                                                                                                        "6": "'application/json'",
                                                                                                        "7": "'application/ld+json'",
                                                                                                        "8": "'module'",
                                                                                                        "9": "'speculationrules'",
                                                                                                        "10": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): '' | Falsy | (string & Record<never, never>) | 'text/javascript' | 'application/json' | 'application/ld+json' | 'module' | 'speculationrules'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "custom-element": {
                                                                                                    "name": "custom-element",
                                                                                                    "global": false,
                                                                                                    "description": "A custom element name\n\nUsed by the AMP specification.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://amp.dev/documentation/guides-and-tutorials/learn/spec/amphtml/#custom-elements"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<(string & Record<never, never>) | 'amp-story' | 'amp-carousel' | 'amp-ad' | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<(string & Record<never, never>) | 'amp-story' | 'amp-carousel' | 'amp-ad' | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "false",
                                                                                                        "3": "string & Record<never, never>",
                                                                                                        "4": "'amp-story'",
                                                                                                        "5": "'amp-carousel'",
                                                                                                        "6": "'amp-ad'",
                                                                                                        "7": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | (string & Record<never, never>) | 'amp-story' | 'amp-carousel' | 'amp-ad'"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "nonce": {
                                                                                                    "name": "nonce",
                                                                                                    "global": false,
                                                                                                    "description": "A cryptographic nonce ('number used once') which can be used by Content Security Policy to determine whether or not\na given fetch will be allowed to proceed.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "id": {
                                                                                                    "name": "id",
                                                                                                    "global": false,
                                                                                                    "description": "The id global attribute defines a unique identifier (ID) which must be unique in the whole document.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "see",
                                                                                                        "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "blocking": {
                                                                                                    "name": "blocking",
                                                                                                    "global": false,
                                                                                                    "description": "The blocking attribute indicates that certain operations should be blocked on the fetching of an external resource.\nThe value is an unordered set of unique space-separated tokens, each of which are possible blocking tokens.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "example",
                                                                                                        "text": "blocking: 'render'"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "tagPriority": {
                                                                                                    "name": "tagPriority",
                                                                                                    "global": false,
                                                                                                    "description": "The priority for rendering the tag, without this all tags are rendered as they are registered\n(besides some special tags).\n\nThe following special tags have default priorities:\n-2 `<meta charset ...>`\n-1 `<base>`\n0 `<meta http-equiv='content-security-policy' ...>`\n\nAll other tags have a default priority of 10: `<meta>`, `<script>`, `<link>`, `<style>`, etc",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>",
                                                                                                    "schema": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>"
                                                                                                  },
                                                                                                  "tagPosition": {
                                                                                                    "name": "tagPosition",
                                                                                                    "global": false,
                                                                                                    "description": "Specify where to render the tag.",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "default",
                                                                                                        "text": "'head'"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<ak | undefined>",
                                                                                                    "schema": "az<ak | undefined>"
                                                                                                  },
                                                                                                  "innerHTML": {
                                                                                                    "name": "innerHTML",
                                                                                                    "global": false,
                                                                                                    "description": "Text content of the tag.\n\nWarning: This is not safe for XSS. Do not use this with user input, use `textContent` instead.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<am | undefined>",
                                                                                                    "schema": {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<am | undefined>",
                                                                                                      "schema": {
                                                                                                        "0": "undefined",
                                                                                                        "1": "null",
                                                                                                        "2": "string",
                                                                                                        "3": "false",
                                                                                                        "4": "Record<string, any>",
                                                                                                        "5": {
                                                                                                          "kind": "event",
                                                                                                          "type": "(): Falsy | InnerContentVal"
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  "textContent": {
                                                                                                    "name": "textContent",
                                                                                                    "global": false,
                                                                                                    "description": "Sets the textContent of an element. Safer for XSS.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<am | undefined>",
                                                                                                    "schema": "az<am | undefined>"
                                                                                                  },
                                                                                                  "key": {
                                                                                                    "name": "key",
                                                                                                    "global": false,
                                                                                                    "description": "By default, tags which share the same unique key `name`, `property` are de-duped. To allow duplicates\nto be made you can provide a unique key for each entry.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<string | undefined>",
                                                                                                    "schema": "az<string | undefined>"
                                                                                                  },
                                                                                                  "tagDuplicateStrategy": {
                                                                                                    "name": "tagDuplicateStrategy",
                                                                                                    "global": false,
                                                                                                    "description": "The strategy to use when a duplicate tag is encountered.\n\n- `replace` - Replace the existing tag with the new tag\n- `merge` - Merge the existing tag with the new tag",
                                                                                                    "tags": [
                                                                                                      {
                                                                                                        "name": "default",
                                                                                                        "text": "'replace' (some tags will default to 'merge', such as htmlAttr)"
                                                                                                      }
                                                                                                    ],
                                                                                                    "required": false,
                                                                                                    "type": "az<'replace' | 'merge' | undefined>",
                                                                                                    "schema": "az<'replace' | 'merge' | undefined>"
                                                                                                  },
                                                                                                  "processTemplateParams": {
                                                                                                    "name": "processTemplateParams",
                                                                                                    "global": false,
                                                                                                    "description": "",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "az<boolean | undefined>",
                                                                                                    "schema": "az<boolean | undefined>"
                                                                                                  },
                                                                                                  "onabort": {
                                                                                                    "name": "onabort",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run on abort",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onerror": {
                                                                                                    "name": "onerror",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run when an error occurs when the file is being loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onload": {
                                                                                                    "name": "onload",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run when the file is loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onprogress": {
                                                                                                    "name": "onprogress",
                                                                                                    "global": false,
                                                                                                    "description": "The progress event is fired periodically when a request receives more data.",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  },
                                                                                                  "onloadstart": {
                                                                                                    "name": "onloadstart",
                                                                                                    "global": false,
                                                                                                    "description": "Script to be run just as the file begins to load before anything is actually loaded",
                                                                                                    "tags": [],
                                                                                                    "required": false,
                                                                                                    "type": "string | ((e: Event) => void) | undefined",
                                                                                                    "schema": "string | ((e: Event) => void) | undefined"
                                                                                                  }
                                                                                                }
                                                                                              },
                                                                                              {
                                                                                                "kind": "event",
                                                                                                "type": "(): Falsy | ResolvableScript"
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableValue<ResolvableScript>[]"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "noscript": {
                                                                                  "name": "noscript",
                                                                                  "global": false,
                                                                                  "description": "The `<noscript>` HTML element defines a section of HTML to be inserted if a script type on the page is unsupported\nor if scripting is currently turned off in the browser.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<az<a0>[]>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<az<a0>[]>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "array",
                                                                                        "type": "az<a0>[]",
                                                                                        "schema": [
                                                                                          {
                                                                                            "kind": "enum",
                                                                                            "type": "az<a0>",
                                                                                            "schema": [
                                                                                              "undefined",
                                                                                              "null",
                                                                                              "string",
                                                                                              "false",
                                                                                              "aA<Noscript & ab & ao & al & an & aj & as>",
                                                                                              {
                                                                                                "kind": "event",
                                                                                                "type": "(): Falsy | ResolvableNoscript"
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableValue<ResolvableNoscript>[]"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "htmlAttrs": {
                                                                                  "name": "htmlAttrs",
                                                                                  "global": false,
                                                                                  "description": "Attributes for the `<html>` HTML element.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<aA<N & ab & aj & ao>>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<aA<N & ab & aj & ao>>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": "aA<N & ab & aj & ao>",
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableProperties<UnheadHtmlAttributes & DataKeys & ResolvesDuplicates & TagPriority>"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "bodyAttrs": {
                                                                                  "name": "bodyAttrs",
                                                                                  "global": false,
                                                                                  "description": "Attributes for the `<body>` HTML element.",
                                                                                  "tags": [
                                                                                    {
                                                                                      "name": "see",
                                                                                      "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"
                                                                                    }
                                                                                  ],
                                                                                  "required": false,
                                                                                  "type": "az<a2>",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "az<a2>",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "false",
                                                                                      "3": {
                                                                                        "kind": "object",
                                                                                        "type": "a2",
                                                                                        "schema": {
                                                                                          "class": {
                                                                                            "name": "class",
                                                                                            "global": false,
                                                                                            "description": "The class global attribute is a space-separated list of the case-sensitive classes of the element.",
                                                                                            "tags": [
                                                                                              {
                                                                                                "name": "see",
                                                                                                "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class"
                                                                                              }
                                                                                            ],
                                                                                            "required": false,
                                                                                            "type": "az<K<az<aw>> | Record<string, az<boolean>>>",
                                                                                            "schema": {
                                                                                              "kind": "enum",
                                                                                              "type": "az<K<az<aw>> | Record<string, az<boolean>>>",
                                                                                              "schema": {
                                                                                                "0": "undefined",
                                                                                                "1": "null",
                                                                                                "2": "string",
                                                                                                "3": "number",
                                                                                                "4": "false",
                                                                                                "5": "true",
                                                                                                "6": "() => string | number | boolean | null | undefined",
                                                                                                "7": {
                                                                                                  "kind": "array",
                                                                                                  "type": "az<aw>[]",
                                                                                                  "schema": [
                                                                                                    {
                                                                                                      "kind": "enum",
                                                                                                      "type": "az<aw>",
                                                                                                      "schema": [
                                                                                                        "undefined",
                                                                                                        "null",
                                                                                                        "string",
                                                                                                        "number",
                                                                                                        "false",
                                                                                                        "true",
                                                                                                        "() => string | number | boolean | null | undefined"
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                "8": "Record<string, az<boolean>>",
                                                                                                "9": {
                                                                                                  "kind": "event",
                                                                                                  "type": "(): string | number | boolean | (() => string | number | boolean | null | undefined) | ResolvableValue<Stringable>[] | Record<string, ResolvableValue<boolean>> | null | undefined"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          },
                                                                                          "style": {
                                                                                            "name": "style",
                                                                                            "global": false,
                                                                                            "description": "The style attribute contains CSS styling declarations to be applied to the element.",
                                                                                            "tags": [
                                                                                              {
                                                                                                "name": "see",
                                                                                                "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style"
                                                                                              }
                                                                                            ],
                                                                                            "required": false,
                                                                                            "type": "az<K<az<aw>> | Record<string, az<aw>>>",
                                                                                            "schema": {
                                                                                              "kind": "enum",
                                                                                              "type": "az<K<az<aw>> | Record<string, az<aw>>>",
                                                                                              "schema": {
                                                                                                "0": "undefined",
                                                                                                "1": "null",
                                                                                                "2": "string",
                                                                                                "3": "number",
                                                                                                "4": "false",
                                                                                                "5": "true",
                                                                                                "6": "() => string | number | boolean | null | undefined",
                                                                                                "7": "az<aw>[]",
                                                                                                "8": "Record<string, az<aw>>",
                                                                                                "9": {
                                                                                                  "kind": "event",
                                                                                                  "type": "(): string | number | boolean | (() => string | number | boolean | null | undefined) | ResolvableValue<Stringable>[] | Record<string, ResolvableValue<Stringable>> | null | undefined"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          },
                                                                                          "id": {
                                                                                            "name": "id",
                                                                                            "global": false,
                                                                                            "description": "The id global attribute defines a unique identifier (ID) which must be unique in the whole document.",
                                                                                            "tags": [
                                                                                              {
                                                                                                "name": "see",
                                                                                                "text": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id"
                                                                                              }
                                                                                            ],
                                                                                            "required": false,
                                                                                            "type": "az<string | undefined>",
                                                                                            "schema": "az<string | undefined>"
                                                                                          },
                                                                                          "key": {
                                                                                            "name": "key",
                                                                                            "global": false,
                                                                                            "description": "By default, tags which share the same unique key `name`, `property` are de-duped. To allow duplicates\nto be made you can provide a unique key for each entry.",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "az<string | undefined>",
                                                                                            "schema": "az<string | undefined>"
                                                                                          },
                                                                                          "tagDuplicateStrategy": {
                                                                                            "name": "tagDuplicateStrategy",
                                                                                            "global": false,
                                                                                            "description": "The strategy to use when a duplicate tag is encountered.\n\n- `replace` - Replace the existing tag with the new tag\n- `merge` - Merge the existing tag with the new tag",
                                                                                            "tags": [
                                                                                              {
                                                                                                "name": "default",
                                                                                                "text": "'replace' (some tags will default to 'merge', such as htmlAttr)"
                                                                                              }
                                                                                            ],
                                                                                            "required": false,
                                                                                            "type": "az<'replace' | 'merge' | undefined>",
                                                                                            "schema": "az<'replace' | 'merge' | undefined>"
                                                                                          },
                                                                                          "tagPriority": {
                                                                                            "name": "tagPriority",
                                                                                            "global": false,
                                                                                            "description": "The priority for rendering the tag, without this all tags are rendered as they are registered\n(besides some special tags).\n\nThe following special tags have default priorities:\n-2 `<meta charset ...>`\n-1 `<base>`\n0 `<meta http-equiv='content-security-policy' ...>`\n\nAll other tags have a default priority of 10: `<meta>`, `<script>`, `<link>`, `<style>`, etc",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>",
                                                                                            "schema": "az<number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined>"
                                                                                          },
                                                                                          "onafterprint": {
                                                                                            "name": "onafterprint",
                                                                                            "global": false,
                                                                                            "description": "Script to be run after the document is printed",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onbeforeprint": {
                                                                                            "name": "onbeforeprint",
                                                                                            "global": false,
                                                                                            "description": "Script to be run before the document is printed",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onbeforeunload": {
                                                                                            "name": "onbeforeunload",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when the document is about to be unloaded",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onerror": {
                                                                                            "name": "onerror",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when an error occurs",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onhashchange": {
                                                                                            "name": "onhashchange",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when there has been changes to the anchor part of the a URL",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onload": {
                                                                                            "name": "onload",
                                                                                            "global": false,
                                                                                            "description": "Fires after the page is finished loading",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onmessage": {
                                                                                            "name": "onmessage",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when the message is triggered",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onoffline": {
                                                                                            "name": "onoffline",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when the browser starts to work offline",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "ononline": {
                                                                                            "name": "ononline",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when the browser starts to work online",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onpagehide": {
                                                                                            "name": "onpagehide",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when a user navigates away from a page",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onpageshow": {
                                                                                            "name": "onpageshow",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when a user navigates to a page",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onpopstate": {
                                                                                            "name": "onpopstate",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when the window's history changes",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onresize": {
                                                                                            "name": "onresize",
                                                                                            "global": false,
                                                                                            "description": "Fires when the browser window is resized",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onstorage": {
                                                                                            "name": "onstorage",
                                                                                            "global": false,
                                                                                            "description": "Script to be run when a Web Storage area is updated",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          },
                                                                                          "onunload": {
                                                                                            "name": "onunload",
                                                                                            "global": false,
                                                                                            "description": "Fires once a page has unloaded (or the browser window has been closed)",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | ((e: Event) => void) | undefined",
                                                                                            "schema": "string | ((e: Event) => void) | undefined"
                                                                                          }
                                                                                        }
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "event",
                                                                                        "type": "(): Falsy | ResolvableBodyAttributes"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "titleTemplate": {
                                                                                  "name": "titleTemplate",
                                                                                  "global": false,
                                                                                  "description": "Generate the title from a template.\n\nShould include a `%s` placeholder for the title, for example `%s - My Site`.",
                                                                                  "tags": [],
                                                                                  "required": false,
                                                                                  "type": "V | undefined",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "V | undefined",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": "null",
                                                                                      "2": "string",
                                                                                      "3": {
                                                                                        "kind": "event",
                                                                                        "type": "(title?: string | undefined): string | null",
                                                                                        "schema": []
                                                                                      },
                                                                                      "4": {
                                                                                        "kind": "object",
                                                                                        "type": "{ textContent: string | ((title?: string | undefined) => string | null); } & ao",
                                                                                        "schema": {
                                                                                          "textContent": {
                                                                                            "name": "textContent",
                                                                                            "global": false,
                                                                                            "description": "",
                                                                                            "tags": [],
                                                                                            "required": true,
                                                                                            "type": "string | ((title?: string | undefined) => string | null)",
                                                                                            "schema": {
                                                                                              "kind": "enum",
                                                                                              "type": "string | ((title?: string | undefined) => string | null)",
                                                                                              "schema": {
                                                                                                "0": "string",
                                                                                                "1": {
                                                                                                  "kind": "event",
                                                                                                  "type": "(title?: string | undefined): string | null",
                                                                                                  "schema": []
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          },
                                                                                          "tagPriority": {
                                                                                            "name": "tagPriority",
                                                                                            "global": false,
                                                                                            "description": "The priority for rendering the tag, without this all tags are rendered as they are registered\n(besides some special tags).\n\nThe following special tags have default priorities:\n-2 `<meta charset ...>`\n-1 `<base>`\n0 `<meta http-equiv='content-security-policy' ...>`\n\nAll other tags have a default priority of 10: `<meta>`, `<script>`, `<link>`, `<style>`, etc",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined",
                                                                                            "schema": {
                                                                                              "kind": "enum",
                                                                                              "type": "number | 'high' | 'low' | 'critical' | `before:${string}` | `after:${string}` | undefined",
                                                                                              "schema": {
                                                                                                "0": "undefined",
                                                                                                "1": "number",
                                                                                                "2": "'high'",
                                                                                                "3": "'low'",
                                                                                                "4": "'critical'",
                                                                                                "5": "`before:${string}`",
                                                                                                "6": "`after:${string}`"
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "templateParams": {
                                                                                  "name": "templateParams",
                                                                                  "global": false,
                                                                                  "description": "Variables used to substitute in the title and meta content.",
                                                                                  "tags": [],
                                                                                  "required": false,
                                                                                  "type": "a3 | undefined",
                                                                                  "schema": {
                                                                                    "kind": "enum",
                                                                                    "type": "a3 | undefined",
                                                                                    "schema": {
                                                                                      "0": "undefined",
                                                                                      "1": {
                                                                                        "kind": "object",
                                                                                        "type": "a3",
                                                                                        "schema": {
                                                                                          "separator": {
                                                                                            "name": "separator",
                                                                                            "global": false,
                                                                                            "description": "",
                                                                                            "tags": [],
                                                                                            "required": false,
                                                                                            "type": "string | undefined",
                                                                                            "schema": "string | undefined"
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "hooks": {
                                                                "name": "hooks",
                                                                "global": false,
                                                                "description": "",
                                                                "tags": [],
                                                                "required": false,
                                                                "type": "NestedHooks<F> | undefined",
                                                                "schema": {
                                                                  "kind": "enum",
                                                                  "type": "NestedHooks<F> | undefined",
                                                                  "schema": {
                                                                    "0": "undefined",
                                                                    "1": {
                                                                      "kind": "object",
                                                                      "type": "Partial<StripGeneric<F>> & Partial<{ entries: NestedHooks<WithoutNamespace<F, 'entries'>>; script: NestedHooks<WithoutNamespace<F, 'script'>>; tag: NestedHooks<WithoutNamespace<F, 'tag'>>; tags: NestedHooks<WithoutNamespace<F, 'tags'>>; dom: NestedHooks<WithoutNamespace<F, 'dom'>>; ssr: NestedHooks<WithoutNamespace<F, 'ssr'>>; }> & Partial<{ init: (ctx: U<any>) => s; }>",
                                                                      "schema": {
                                                                        "init": {
                                                                          "name": "init",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [
                                                                            {
                                                                              "name": "deprecated",
                                                                              "text": "use Unhead options to setup instead"
                                                                            }
                                                                          ],
                                                                          "required": false,
                                                                          "type": "((ctx: U<any>) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: U<any>) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: Unhead<any>): HookResult",
                                                                                "schema": [
                                                                                  "any"
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "entries:updated": {
                                                                          "name": "entries:updated",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: U<any>) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: U<any>) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: Unhead<any>): HookResult",
                                                                                "schema": [
                                                                                  "any"
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "entries:resolve": {
                                                                          "name": "entries:resolve",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: v<any>) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: v<any>) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: EntryResolveCtx<any>): HookResult",
                                                                                "schema": [
                                                                                  "any"
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "entries:normalize": {
                                                                          "name": "entries:normalize",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: { tags: HeadTag[]; entry: HeadEntry<any>; }): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tag:normalise": {
                                                                          "name": "tag:normalise",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: { tag: HeadTag; entry: HeadEntry<any>; resolvedOptions: CreateClientHeadOptions; }): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tags:beforeResolve": {
                                                                          "name": "tags:beforeResolve",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: TagResolveContext): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tags:resolve": {
                                                                          "name": "tags:resolve",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: TagResolveContext): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tags:afterResolve": {
                                                                          "name": "tags:afterResolve",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: TagResolveContext): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "dom:beforeRender": {
                                                                          "name": "dom:beforeRender",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: x) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: x) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: DomBeforeRenderCtx): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "dom:renderTag": {
                                                                          "name": "dom:renderTag",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: w, document: Document, track: any) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: w, document: Document, track: any) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: DomRenderTagContext, document: Document, track: any): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "dom:rendered": {
                                                                          "name": "dom:rendered",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: { renders: w[]; }) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: { renders: w[]; }) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: { renders: DomRenderTagContext[]; }): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "ssr:beforeRender": {
                                                                          "name": "ssr:beforeRender",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: y) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: y) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: ShouldRenderContext): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "ssr:render": {
                                                                          "name": "ssr:render",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: { tags: au[]; }) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: { tags: au[]; }) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: { tags: HeadTag[]; }): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "ssr:rendered": {
                                                                          "name": "ssr:rendered",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: z) => s) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: z) => s) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: SSRRenderContext): HookResult",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "script:updated": {
                                                                          "name": "script:updated",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "event",
                                                                                "type": "(ctx: { script: ScriptInstance<any>; }): void | Promise<void>",
                                                                                "schema": []
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "entries": {
                                                                          "name": "entries",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'entries'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'entries'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'entries'>>> & Partial<{}> & Partial<{ normalize: (ctx: { tags: au[]; entry: H<any>; }) => s; updated: (ctx: U<any>) => s; resolve: (ctx: v<any>) => s; }>",
                                                                                "schema": {
                                                                                  "normalize": {
                                                                                    "name": "normalize",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined"
                                                                                  },
                                                                                  "updated": {
                                                                                    "name": "updated",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: U<any>) => s) | undefined",
                                                                                    "schema": "((ctx: U<any>) => s) | undefined"
                                                                                  },
                                                                                  "resolve": {
                                                                                    "name": "resolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: v<any>) => s) | undefined",
                                                                                    "schema": "((ctx: v<any>) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'entries'>>> & Partial<{}> & Partial<{ normalize: (ctx: { tags: au[]; entry: H<any>; }) => s; updated: (ctx: U<any>) => s; resolve: (ctx: v<any>) => s; }>",
                                                                                "schema": {
                                                                                  "normalize": {
                                                                                    "name": "normalize",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tags: au[]; entry: H<any>; }) => s) | undefined"
                                                                                  },
                                                                                  "updated": {
                                                                                    "name": "updated",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: U<any>) => s) | undefined",
                                                                                    "schema": "((ctx: U<any>) => s) | undefined"
                                                                                  },
                                                                                  "resolve": {
                                                                                    "name": "resolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: v<any>) => s) | undefined",
                                                                                    "schema": "((ctx: v<any>) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "script": {
                                                                          "name": "script",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'script'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'script'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'script'>>> & Partial<{}> & Partial<{ updated: (ctx: { script: S<any>; }) => void | Promise<void>; }>",
                                                                                "schema": {
                                                                                  "updated": {
                                                                                    "name": "updated",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined",
                                                                                    "schema": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'script'>>> & Partial<{}> & Partial<{ updated: (ctx: { script: S<any>; }) => void | Promise<void>; }>",
                                                                                "schema": {
                                                                                  "updated": {
                                                                                    "name": "updated",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined",
                                                                                    "schema": "((ctx: { script: S<any>; }) => void | Promise<void>) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tag": {
                                                                          "name": "tag",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'tag'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'tag'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'tag'>>> & Partial<{}> & Partial<{ normalise: (ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s; }>",
                                                                                "schema": {
                                                                                  "normalise": {
                                                                                    "name": "normalise",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'tag'>>> & Partial<{}> & Partial<{ normalise: (ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s; }>",
                                                                                "schema": {
                                                                                  "normalise": {
                                                                                    "name": "normalise",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tag: au; entry: H<any>; resolvedOptions: q; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "tags": {
                                                                          "name": "tags",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'tags'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'tags'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'tags'>>> & Partial<{}> & Partial<{ resolve: (ctx: TagResolveContext) => s; beforeResolve: (ctx: TagResolveContext) => s; afterResolve: (ctx: TagResolveContext) => s; }>",
                                                                                "schema": {
                                                                                  "resolve": {
                                                                                    "name": "resolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  },
                                                                                  "beforeResolve": {
                                                                                    "name": "beforeResolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  },
                                                                                  "afterResolve": {
                                                                                    "name": "afterResolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'tags'>>> & Partial<{}> & Partial<{ resolve: (ctx: TagResolveContext) => s; beforeResolve: (ctx: TagResolveContext) => s; afterResolve: (ctx: TagResolveContext) => s; }>",
                                                                                "schema": {
                                                                                  "resolve": {
                                                                                    "name": "resolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  },
                                                                                  "beforeResolve": {
                                                                                    "name": "beforeResolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  },
                                                                                  "afterResolve": {
                                                                                    "name": "afterResolve",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: TagResolveContext) => s) | undefined",
                                                                                    "schema": "((ctx: TagResolveContext) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "dom": {
                                                                          "name": "dom",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'dom'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'dom'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'dom'>>> & Partial<{}> & Partial<{ beforeRender: (ctx: x) => s; renderTag: (ctx: w, document: Document, track: any) => s; rendered: (ctx: { renders: w[]; }) => s; }>",
                                                                                "schema": {
                                                                                  "beforeRender": {
                                                                                    "name": "beforeRender",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: x) => s) | undefined",
                                                                                    "schema": "((ctx: x) => s) | undefined"
                                                                                  },
                                                                                  "renderTag": {
                                                                                    "name": "renderTag",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: w, document: Document, track: any) => s) | undefined",
                                                                                    "schema": "((ctx: w, document: Document, track: any) => s) | undefined"
                                                                                  },
                                                                                  "rendered": {
                                                                                    "name": "rendered",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { renders: w[]; }) => s) | undefined",
                                                                                    "schema": "((ctx: { renders: w[]; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'dom'>>> & Partial<{}> & Partial<{ beforeRender: (ctx: x) => s; renderTag: (ctx: w, document: Document, track: any) => s; rendered: (ctx: { renders: w[]; }) => s; }>",
                                                                                "schema": {
                                                                                  "beforeRender": {
                                                                                    "name": "beforeRender",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: x) => s) | undefined",
                                                                                    "schema": "((ctx: x) => s) | undefined"
                                                                                  },
                                                                                  "renderTag": {
                                                                                    "name": "renderTag",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: w, document: Document, track: any) => s) | undefined",
                                                                                    "schema": "((ctx: w, document: Document, track: any) => s) | undefined"
                                                                                  },
                                                                                  "rendered": {
                                                                                    "name": "rendered",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { renders: w[]; }) => s) | undefined",
                                                                                    "schema": "((ctx: { renders: w[]; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "ssr": {
                                                                          "name": "ssr",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'ssr'>> | undefined",
                                                                          "schema": {
                                                                            "kind": "enum",
                                                                            "type": "NestedHooks<WithoutNamespace<F, 'ssr'>> | undefined",
                                                                            "schema": {
                                                                              "0": "undefined",
                                                                              "1": {
                                                                                "kind": "object",
                                                                                "type": "Partial<StripGeneric<WithoutNamespace<F, 'ssr'>>> & Partial<{}> & Partial<{ beforeRender: (ctx: y) => s; rendered: (ctx: z) => s; render: (ctx: { tags: au[]; }) => s; }>",
                                                                                "schema": {
                                                                                  "beforeRender": {
                                                                                    "name": "beforeRender",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: y) => s) | undefined",
                                                                                    "schema": "((ctx: y) => s) | undefined"
                                                                                  },
                                                                                  "rendered": {
                                                                                    "name": "rendered",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: z) => s) | undefined",
                                                                                    "schema": "((ctx: z) => s) | undefined"
                                                                                  },
                                                                                  "render": {
                                                                                    "name": "render",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tags: au[]; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tags: au[]; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "2": {
                                                                                "kind": "object",
                                                                                "type": "Partial<OnlyGeneric<WithoutNamespace<F, 'ssr'>>> & Partial<{}> & Partial<{ beforeRender: (ctx: y) => s; rendered: (ctx: z) => s; render: (ctx: { tags: au[]; }) => s; }>",
                                                                                "schema": {
                                                                                  "beforeRender": {
                                                                                    "name": "beforeRender",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: y) => s) | undefined",
                                                                                    "schema": "((ctx: y) => s) | undefined"
                                                                                  },
                                                                                  "rendered": {
                                                                                    "name": "rendered",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: z) => s) | undefined",
                                                                                    "schema": "((ctx: z) => s) | undefined"
                                                                                  },
                                                                                  "render": {
                                                                                    "name": "render",
                                                                                    "global": false,
                                                                                    "description": "",
                                                                                    "tags": [],
                                                                                    "required": false,
                                                                                    "type": "((ctx: { tags: au[]; }) => s) | undefined",
                                                                                    "schema": "((ctx: { tags: au[]; }) => s) | undefined"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "2": {
                                                                      "kind": "object",
                                                                      "type": "Partial<OnlyGeneric<F>> & Partial<{ entries: NestedHooks<WithoutNamespace<F, 'entries'>>; script: NestedHooks<WithoutNamespace<F, 'script'>>; tag: NestedHooks<WithoutNamespace<F, 'tag'>>; tags: NestedHooks<WithoutNamespace<F, 'tags'>>; dom: NestedHooks<WithoutNamespace<F, 'dom'>>; ssr: NestedHooks<WithoutNamespace<F, 'ssr'>>; }> & Partial<{ init: (ctx: U<any>) => s; }>",
                                                                      "schema": {
                                                                        "entries": {
                                                                          "name": "entries",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'entries'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'entries'>> | undefined"
                                                                        },
                                                                        "script": {
                                                                          "name": "script",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'script'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'script'>> | undefined"
                                                                        },
                                                                        "tag": {
                                                                          "name": "tag",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'tag'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'tag'>> | undefined"
                                                                        },
                                                                        "tags": {
                                                                          "name": "tags",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'tags'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'tags'>> | undefined"
                                                                        },
                                                                        "dom": {
                                                                          "name": "dom",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'dom'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'dom'>> | undefined"
                                                                        },
                                                                        "ssr": {
                                                                          "name": "ssr",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "NestedHooks<WithoutNamespace<F, 'ssr'>> | undefined",
                                                                          "schema": "NestedHooks<WithoutNamespace<F, 'ssr'>> | undefined"
                                                                        },
                                                                        "init": {
                                                                          "name": "init",
                                                                          "global": false,
                                                                          "description": "",
                                                                          "tags": [],
                                                                          "required": false,
                                                                          "type": "((ctx: U<any>) => s) | undefined",
                                                                          "schema": "((ctx: U<any>) => s) | undefined"
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "document": {
                                                                "name": "document",
                                                                "global": false,
                                                                "description": "",
                                                                "tags": [],
                                                                "required": false,
                                                                "type": "Document | undefined",
                                                                "schema": "Document | undefined"
                                                              },
                                                              "disableCapoSorting": {
                                                                "name": "disableCapoSorting",
                                                                "global": false,
                                                                "description": "Disable the Capo.js tag sorting algorithm.\n\nThis is added to make the v1 -> v2 migration easier allowing users to opt-out of the new sorting algorithm.",
                                                                "tags": [],
                                                                "required": false,
                                                                "type": "boolean | undefined",
                                                                "schema": "boolean | undefined"
                                                              },
                                                              "propResolvers": {
                                                                "name": "propResolvers",
                                                                "global": false,
                                                                "description": "Prop resolvers for tags.",
                                                                "tags": [],
                                                                "required": false,
                                                                "type": "P[] | undefined",
                                                                "schema": {
                                                                  "kind": "enum",
                                                                  "type": "P[] | undefined",
                                                                  "schema": {
                                                                    "0": "undefined",
                                                                    "1": {
                                                                      "kind": "array",
                                                                      "type": "P[]",
                                                                      "schema": [
                                                                        {
                                                                          "kind": "event",
                                                                          "type": "(key?: string | undefined, value?: any, tag?: HeadTag | undefined): any",
                                                                          "schema": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "key": {
                                                                "name": "key",
                                                                "global": false,
                                                                "description": "",
                                                                "tags": [],
                                                                "required": true,
                                                                "type": "string",
                                                                "schema": "string"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "kind": "event",
                                                            "type": "(head: Unhead<ResolvableHead>): HeadPluginOptions & { key: string; }",
                                                            "schema": [
                                                              "R"
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            },
                                            "hooks": {
                                              "name": "hooks",
                                              "global": false,
                                              "description": "",
                                              "tags": [],
                                              "required": false,
                                              "type": "NestedHooks<F> | undefined",
                                              "schema": "NestedHooks<F> | undefined"
                                            },
                                            "init": {
                                              "name": "init",
                                              "global": false,
                                              "description": "Initial head input that should be added.\n\nAny tags here are added with low priority.",
                                              "tags": [],
                                              "required": false,
                                              "type": "(false | R | undefined)[] | undefined",
                                              "schema": "(false | R | undefined)[] | undefined"
                                            },
                                            "disableCapoSorting": {
                                              "name": "disableCapoSorting",
                                              "global": false,
                                              "description": "Disable the Capo.js tag sorting algorithm.\n\nThis is added to make the v1 -> v2 migration easier allowing users to opt-out of the new sorting algorithm.",
                                              "tags": [],
                                              "required": false,
                                              "type": "boolean | undefined",
                                              "schema": "boolean | undefined"
                                            },
                                            "propResolvers": {
                                              "name": "propResolvers",
                                              "global": false,
                                              "description": "Prop resolvers for tags.",
                                              "tags": [],
                                              "required": false,
                                              "type": "P[] | undefined",
                                              "schema": "P[] | undefined"
                                            }
                                          }
                                        }
                                      },
                                      "use": {
                                        "name": "use",
                                        "global": false,
                                        "description": "Use a head plugin, loads the plugins hooks.",
                                        "tags": [],
                                        "required": true,
                                        "type": "(plugin: m) => void",
                                        "schema": {
                                          "kind": "event",
                                          "type": "(plugin: HeadPluginInput): void",
                                          "schema": {}
                                        }
                                      },
                                      "ssr": {
                                        "name": "ssr",
                                        "global": false,
                                        "description": "Is it a server-side render context.",
                                        "tags": [],
                                        "required": true,
                                        "type": "boolean",
                                        "schema": "boolean"
                                      },
                                      "_dom": {
                                        "name": "_dom",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "D | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "D | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "object",
                                              "type": "D",
                                              "schema": {
                                                "title": {
                                                  "name": "title",
                                                  "global": false,
                                                  "description": "",
                                                  "tags": [],
                                                  "required": true,
                                                  "type": "string",
                                                  "schema": "string"
                                                },
                                                "pendingSideEffects": {
                                                  "name": "pendingSideEffects",
                                                  "global": false,
                                                  "description": "",
                                                  "tags": [],
                                                  "required": true,
                                                  "type": "j",
                                                  "schema": "j"
                                                },
                                                "sideEffects": {
                                                  "name": "sideEffects",
                                                  "global": false,
                                                  "description": "",
                                                  "tags": [],
                                                  "required": true,
                                                  "type": "j",
                                                  "schema": "j"
                                                },
                                                "elMap": {
                                                  "name": "elMap",
                                                  "global": false,
                                                  "description": "",
                                                  "tags": [],
                                                  "required": true,
                                                  "type": "Map<string, Element | Element[]>",
                                                  "schema": "Map<string, Element | Element[]>"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "_domUpdatePromise": {
                                        "name": "_domUpdatePromise",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "Promise<void> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "Promise<void> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "Promise<void>"
                                          }
                                        }
                                      },
                                      "dirty": {
                                        "name": "dirty",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "boolean",
                                        "schema": "boolean"
                                      },
                                      "_scripts": {
                                        "name": "_scripts",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "Record<string, any> | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "Record<string, any> | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "Record<string, any>"
                                          }
                                        }
                                      },
                                      "_templateParams": {
                                        "name": "_templateParams",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "ar | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "ar | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": {
                                              "kind": "object",
                                              "type": "ar",
                                              "schema": {
                                                "separator": {
                                                  "name": "separator",
                                                  "global": false,
                                                  "description": "",
                                                  "tags": [],
                                                  "required": false,
                                                  "type": "string | undefined",
                                                  "schema": "string | undefined"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "_separator": {
                                        "name": "_separator",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "_entryCount": {
                                        "name": "_entryCount",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": true,
                                        "type": "number",
                                        "schema": "number"
                                      },
                                      "_title": {
                                        "name": "_title",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "_titleTemplate": {
                                        "name": "_titleTemplate",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "_ssrPayload": {
                                        "name": "_ssrPayload",
                                        "global": false,
                                        "description": "",
                                        "tags": [
                                          {
                                            "name": "internal"
                                          }
                                        ],
                                        "required": false,
                                        "type": "R | undefined",
                                        "schema": {
                                          "kind": "enum",
                                          "type": "R | undefined",
                                          "schema": {
                                            "0": "undefined",
                                            "1": "R"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "1": {
                                    "kind": "event",
                                    "type": "(app: App<any>, ...options: any[]): any",
                                    "schema": [
                                      "any"
                                    ]
                                  }
                                }
                              }
                            },
                            "config": {
                              "name": "config",
                              "global": false,
                              "description": "This is used solely to render runtime config with SPA renderer.",
                              "tags": [],
                              "required": false,
                              "type": "Pick<RuntimeConfig, 'public' | 'app'> | undefined",
                              "schema": "Pick<RuntimeConfig, 'public' | 'app'> | undefined"
                            },
                            "teleports": {
                              "name": "teleports",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "Record<string, string> | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "Record<string, string> | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "Record<string, string>"
                                }
                              }
                            },
                            "islandContext": {
                              "name": "islandContext",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "NuxtIslandContext | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "NuxtIslandContext | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "object",
                                    "type": "NuxtIslandContext",
                                    "schema": {
                                      "id": {
                                        "name": "id",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "string | undefined",
                                        "schema": "string | undefined"
                                      },
                                      "name": {
                                        "name": "name",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "string",
                                        "schema": "string"
                                      },
                                      "props": {
                                        "name": "props",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": false,
                                        "type": "Record<string, any> | undefined",
                                        "schema": "Record<string, any> | undefined"
                                      },
                                      "url": {
                                        "name": "url",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "string",
                                        "schema": "string"
                                      },
                                      "slots": {
                                        "name": "slots",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, Omit<NuxtIslandSlotResponse, 'fallback' | 'html'>>",
                                        "schema": "Record<string, Omit<NuxtIslandSlotResponse, 'fallback' | 'html'>>"
                                      },
                                      "components": {
                                        "name": "components",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, Omit<NuxtIslandClientResponse, 'html'>>",
                                        "schema": "Record<string, Omit<NuxtIslandClientResponse, 'html'>>"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "_renderResponse": {
                              "name": "_renderResponse",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": false,
                              "type": "Partial<RenderResponse> | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "Partial<RenderResponse> | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "Partial<RenderResponse>"
                                }
                              }
                            },
                            "_payloadReducers": {
                              "name": "_payloadReducers",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": true,
                              "type": "Record<string, (data: any) => any>",
                              "schema": "Record<string, (data: any) => any>"
                            },
                            "_sharedPrerenderCache": {
                              "name": "_sharedPrerenderCache",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": false,
                              "type": "{ get<T = unknown>(key: string): Promise<T> | undefined; set<T>(key: string, value: Promise<T>): Promise<void>; } | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "{ get<T = unknown>(key: string): Promise<T> | undefined; set<T>(key: string, value: Promise<T>): Promise<void>; } | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "object",
                                    "type": "{ get<T = unknown>(key: string): Promise<T> | undefined; set<T>(key: string, value: Promise<T>): Promise<void>; }",
                                    "schema": {
                                      "get": {
                                        "name": "get",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "<T = unknown>(key: string) => Promise<T> | undefined",
                                        "schema": {
                                          "kind": "event",
                                          "type": "<T = unknown>(key: string): Promise<T> | undefined",
                                          "schema": {}
                                        }
                                      },
                                      "set": {
                                        "name": "set",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "<T>(key: string, value: Promise<T>) => Promise<void>",
                                        "schema": {
                                          "kind": "event",
                                          "type": "<T>(key: string, value: Promise<T>): Promise<void>",
                                          "schema": {}
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "_preloadManifest": {
                              "name": "_preloadManifest",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "internal"
                                }
                              ],
                              "required": false,
                              "type": "boolean | undefined",
                              "schema": "boolean | undefined"
                            },
                            "renderResourceHints": {
                              "name": "renderResourceHints",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "((...args: unknown[]) => unknown) | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "((...args: unknown[]) => unknown) | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "event",
                                    "type": "(...args: unknown[]): unknown",
                                    "schema": [
                                      "unknown"
                                    ]
                                  }
                                }
                              }
                            },
                            "renderScripts": {
                              "name": "renderScripts",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "((...args: unknown[]) => unknown) | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "((...args: unknown[]) => unknown) | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "event",
                                    "type": "(...args: unknown[]): unknown",
                                    "schema": [
                                      "unknown"
                                    ]
                                  }
                                }
                              }
                            },
                            "renderStyles": {
                              "name": "renderStyles",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "((...args: unknown[]) => unknown) | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "((...args: unknown[]) => unknown) | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "event",
                                    "type": "(...args: unknown[]): unknown",
                                    "schema": [
                                      "unknown"
                                    ]
                                  }
                                }
                              }
                            },
                            "modules": {
                              "name": "modules",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "Set<string> | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "Set<string> | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "Set<string>"
                                }
                              }
                            },
                            "_registeredComponents": {
                              "name": "_registeredComponents",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "Set<string> | undefined",
                              "schema": "Set<string> | undefined"
                            },
                            "_requestDependencies": {
                              "name": "_requestDependencies",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "ModuleDependencies | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "ModuleDependencies | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": {
                                    "kind": "object",
                                    "type": "ModuleDependencies",
                                    "schema": {
                                      "scripts": {
                                        "name": "scripts",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, R>",
                                        "schema": "Record<string, R>"
                                      },
                                      "styles": {
                                        "name": "styles",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, R>",
                                        "schema": "Record<string, R>"
                                      },
                                      "preload": {
                                        "name": "preload",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, R>",
                                        "schema": "Record<string, R>"
                                      },
                                      "prefetch": {
                                        "name": "prefetch",
                                        "global": false,
                                        "description": "",
                                        "tags": [],
                                        "required": true,
                                        "type": "Record<string, R>",
                                        "schema": "Record<string, R>"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "payload": {
                    "name": "payload",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "NuxtPayload",
                    "schema": "NuxtPayload"
                  },
                  "static": {
                    "name": "static",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "{ data: Record<string, any>; }",
                    "schema": "{ data: Record<string, any>; }"
                  },
                  "provide": {
                    "name": "provide",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "(name: string, value: any) => void",
                    "schema": "(name: string, value: any) => void"
                  },
                  "$colorMode": {
                    "name": "$colorMode",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "ColorModeInstance",
                    "schema": {
                      "kind": "object",
                      "type": "ColorModeInstance",
                      "schema": {
                        "preference": {
                          "name": "preference",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "value": {
                          "name": "value",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "unknown": {
                          "name": "unknown",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "boolean",
                          "schema": "boolean"
                        },
                        "forced": {
                          "name": "forced",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "boolean",
                          "schema": "boolean"
                        }
                      }
                    }
                  },
                  "$route": {
                    "name": "$route",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "Route",
                    "schema": {
                      "kind": "object",
                      "type": "Route",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "fullPath": {
                          "name": "fullPath",
                          "global": false,
                          "description": "The whole location including the `search` and `hash`.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "Object representation of the `search` property of the current location.",
                          "tags": [],
                          "required": true,
                          "type": "Record<string, any>",
                          "schema": "Record<string, any>"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "Hash of the current location. If present, starts with a `#`.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "Name of the matched record",
                          "tags": [],
                          "required": true,
                          "type": "string | null | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "string | null | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "null",
                              "2": "string"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "Object of decoded params extracted from the `path`.",
                          "tags": [],
                          "required": true,
                          "type": "Record<string, any>",
                          "schema": "Record<string, any>"
                        },
                        "redirectedFrom": {
                          "name": "redirectedFrom",
                          "global": false,
                          "description": "The location we were initially trying to access before ending up\non the current location.",
                          "tags": [],
                          "required": true,
                          "type": "Route | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Route | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "Route"
                            }
                          }
                        },
                        "meta": {
                          "name": "meta",
                          "global": false,
                          "description": "Merged `meta` properties from all of the matched route records.",
                          "tags": [],
                          "required": true,
                          "type": "Record<string, any>",
                          "schema": "Record<string, any>"
                        },
                        "matched": {
                          "name": "matched",
                          "global": false,
                          "description": "compatibility type for vue-router",
                          "tags": [],
                          "required": true,
                          "type": "never[]",
                          "schema": {
                            "kind": "array",
                            "type": "never[]",
                            "schema": {
                              "0": {
                                "kind": "array",
                                "type": "never",
                                "schema": []
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "$router": {
                    "name": "$router",
                    "global": false,
                    "description": "",
                    "tags": [],
                    "required": true,
                    "type": "Router",
                    "schema": {
                      "kind": "object",
                      "type": "Router",
                      "schema": {
                        "currentRoute": {
                          "name": "currentRoute",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "Ref<Route, Route>",
                          "schema": "Ref<Route, Route>"
                        },
                        "isReady": {
                          "name": "isReady",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => Promise<void>",
                          "schema": {
                            "kind": "event",
                            "type": "(): Promise<void>"
                          }
                        },
                        "options": {
                          "name": "options",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "Record<string, unknown>",
                          "schema": "Record<string, unknown>"
                        },
                        "install": {
                          "name": "install",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => Promise<void>",
                          "schema": {
                            "kind": "event",
                            "type": "(): Promise<void>"
                          }
                        },
                        "push": {
                          "name": "push",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(url: string) => Promise<void>",
                          "schema": {
                            "kind": "event",
                            "type": "(url: string): Promise<void>",
                            "schema": {}
                          }
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(url: string) => Promise<void>",
                          "schema": {
                            "kind": "event",
                            "type": "(url: string): Promise<void>",
                            "schema": {}
                          }
                        },
                        "back": {
                          "name": "back",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => void",
                          "schema": {
                            "kind": "event",
                            "type": "(): void"
                          }
                        },
                        "go": {
                          "name": "go",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(delta: number) => void",
                          "schema": {
                            "kind": "event",
                            "type": "(delta: number): void",
                            "schema": {}
                          }
                        },
                        "forward": {
                          "name": "forward",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => void",
                          "schema": {
                            "kind": "event",
                            "type": "(): void"
                          }
                        },
                        "beforeResolve": {
                          "name": "beforeResolve",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(guard: (to: Route, from: Route) => RouteGuardReturn | Promise<RouteGuardReturn>) => () => void",
                          "schema": {
                            "kind": "event",
                            "type": "(guard: (to: Route, from: Route) => RouteGuardReturn | Promise<RouteGuardReturn>): () => void",
                            "schema": {}
                          }
                        },
                        "beforeEach": {
                          "name": "beforeEach",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(guard: (to: Route, from: Route) => RouteGuardReturn | Promise<RouteGuardReturn>) => () => void",
                          "schema": {
                            "kind": "event",
                            "type": "(guard: (to: Route, from: Route) => RouteGuardReturn | Promise<RouteGuardReturn>): () => void",
                            "schema": {}
                          }
                        },
                        "afterEach": {
                          "name": "afterEach",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(guard: (to: Route, from: Route) => void | Promise<void>) => () => void",
                          "schema": {
                            "kind": "event",
                            "type": "(guard: (to: Route, from: Route) => void | Promise<void>): () => void",
                            "schema": {}
                          }
                        },
                        "onError": {
                          "name": "onError",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(handler: (err: any) => void | Promise<void>) => () => void",
                          "schema": {
                            "kind": "event",
                            "type": "(handler: (err: any) => void | Promise<void>): () => void",
                            "schema": {}
                          }
                        },
                        "resolve": {
                          "name": "resolve",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(url: string | Partial<Route>) => Route",
                          "schema": {
                            "kind": "event",
                            "type": "(url: string | Partial<Route>): Route",
                            "schema": {}
                          }
                        },
                        "addRoute": {
                          "name": "addRoute",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(parentName: string, route: Route) => void",
                          "schema": {
                            "kind": "event",
                            "type": "(parentName: string, route: Route): void",
                            "schema": {}
                          }
                        },
                        "getRoutes": {
                          "name": "getRoutes",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "() => any[]",
                          "schema": {
                            "kind": "event",
                            "type": "(): any[]"
                          }
                        },
                        "hasRoute": {
                          "name": "hasRoute",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(name: string) => boolean",
                          "schema": {
                            "kind": "event",
                            "type": "(name: string): boolean",
                            "schema": {}
                          }
                        },
                        "removeRoute": {
                          "name": "removeRoute",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": true,
                          "type": "(name: string) => void",
                          "schema": {
                            "kind": "event",
                            "type": "(name: string): void",
                            "schema": {}
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "$config": {
              "name": "$config",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "RuntimeConfig",
              "schema": "RuntimeConfig"
            },
            "$colorMode": {
              "name": "$colorMode",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "ColorModeInstance",
              "schema": "ColorModeInstance"
            }
          }
        }
      }
    }
  }
]
}
