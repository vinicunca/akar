{
  "props": [
  {
    "name": "as",
    "description": "The element or component this component should render as. Can be overwritten by `asChild`.",
    "type": "APrimitiveAsTag | Component",
    "required": false,
    "default": "'div'"
  },
  {
    "name": "activationMode",
    "description": "The activation event of the editable field",
    "type": "'dblclick' | 'focus' | 'none'",
    "required": false,
    "default": "'focus'"
  },
  {
    "name": "asChild",
    "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.\n\nRead our [Composition](https://akar.vinicunca.dev/core/guides/composition) guide for more details.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "autoResize",
    "description": "Whether the editable field should auto resize",
    "type": "boolean",
    "required": false,
    "default": "false"
  },
  {
    "name": "defaultValue",
    "description": "The default value of the editable field",
    "type": "string",
    "required": false
  },
  {
    "name": "dir",
    "description": "The reading direction of the calendar when applicable. <br> If omitted, inherits globally from `AConfigProvider` or assumes LTR (left-to-right) reading mode.",
    "type": "'ltr' | 'rtl'",
    "required": false
  },
  {
    "name": "disabled",
    "description": "Whether the editable field is disabled",
    "type": "boolean",
    "required": false,
    "default": "false"
  },
  {
    "name": "id",
    "description": "The id of the field",
    "type": "string",
    "required": false
  },
  {
    "name": "maxLength",
    "description": "The maximum number of characters allowed",
    "type": "number",
    "required": false
  },
  {
    "name": "modelValue",
    "description": "The value of the editable field",
    "type": "string | null",
    "required": false
  },
  {
    "name": "name",
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "type": "string",
    "required": false
  },
  {
    "name": "placeholder",
    "description": "The placeholder for the editable field",
    "type": "string | { edit: string; preview: string; }",
    "required": false,
    "default": "'Enter text...'"
  },
  {
    "name": "readonly",
    "description": "Whether the editable field is read-only",
    "type": "boolean",
    "required": false
  },
  {
    "name": "required",
    "description": "When `true`, indicates that the user must set the value before the owning form can be submitted.",
    "type": "boolean",
    "required": false,
    "default": "false"
  },
  {
    "name": "selectOnFocus",
    "description": "Whether to select the text in the input when it is focused.",
    "type": "boolean",
    "required": false,
    "default": "false"
  },
  {
    "name": "startWithEditMode",
    "description": "Whether to start with the edit mode active",
    "type": "boolean",
    "required": false
  },
  {
    "name": "submitMode",
    "description": "The submit event of the editable field",
    "type": "'blur' | 'none' | 'both' | 'enter'",
    "required": false,
    "default": "'blur'"
  }
],
  "events": [
  {
    "name": "submit",
    "description": "Event handler called when a value is submitted",
    "type": "[value: string | null]"
  },
  {
    "name": "update:modelValue",
    "description": "Event handler called whenever the model value changes",
    "type": "[value: string]"
  },
  {
    "name": "update:state",
    "description": "Event handler called when the editable field changes state",
    "type": "[state: 'cancel' | 'submit' | 'edit']"
  }
],
  "slots": [
  {
    "name": "isEditing",
    "description": "Whether the editable field is in edit mode",
    "type": "boolean"
  },
  {
    "name": "modelValue",
    "description": "The value of the editable field",
    "type": "string | null | undefined"
  },
  {
    "name": "isEmpty",
    "description": "Whether the editable field is empty",
    "type": "boolean"
  },
  {
    "name": "submit",
    "description": "Function to submit the value of the editable",
    "type": "(): void"
  },
  {
    "name": "cancel",
    "description": "Function to cancel the value of the editable",
    "type": "(): void"
  },
  {
    "name": "edit",
    "description": "Function to set the editable in edit mode",
    "type": "(): void"
  }
],
  "exposed": [
  {
    "name": "submit",
    "description": "Function to submit the value of the editable",
    "type": "() => void"
  },
  {
    "name": "cancel",
    "description": "Function to cancel the value of the editable",
    "type": "() => void"
  },
  {
    "name": "edit",
    "description": "Function to set the editable in edit mode",
    "type": "() => void"
  }
]
}
