{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.\n\nRead our [primitive tag](https://akar.vinicunca.dev/core/guides/primitive-tag) guide for more details.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": "any"
  },
  {
    "name": "autofocus",
    "global": false,
    "description": "Automatically focus the input when component is mounted.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "back",
    "global": false,
    "description": "Display a button to navigate back in history.\n`{ size: 'md', color: 'neutral', variant: 'link' }`{lang='ts-type'}",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "boolean | PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'xs'",
                            "3": "'sm'",
                            "4": "'lg'",
                            "5": "'xl'",
                            "6": "'3xs'",
                            "7": "'2xs'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    },
    "default": "true"
  },
  {
    "name": "backIcon",
    "global": false,
    "description": "The icon displayed in the back button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.arrowLeft"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "close",
    "global": false,
    "description": "Display a close button in the input (useful when inside a Dialog for example).\n`{ size: 'md', color: 'neutral', variant: 'ghost' }`{lang='ts-type'}",
    "tags": [
      {
        "name": "emits",
        "text": "'update:open'"
      },
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | Partial<PButtonProps> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<PButtonProps> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<PButtonProps>"
      }
    }
  },
  {
    "name": "closeIcon",
    "global": false,
    "description": "The icon displayed in the close button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.close"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "defaultValue",
    "global": false,
    "description": "The value of the listbox when initially rendered. Use when you do not need to control the state of the Listbox",
    "tags": [],
    "required": false,
    "type": "AcceptableValue | AcceptableValue[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "AcceptableValue | AcceptableValue[] | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": "string",
        "3": "number",
        "4": "bigint",
        "5": "Record<string, any>",
        "6": {
          "kind": "array",
          "type": "AcceptableValue[]",
          "schema": [
            {
              "kind": "enum",
              "type": "AcceptableValue",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "Record<string, any>"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "When `true`, prevents the user from interacting with listbox",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "fuse",
    "global": false,
    "description": "Options for [useFuse](https://vueuse.org/integrations/useFuse).",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{\nfuseOptions: {\nignoreLocation: true,\nthreshold: 0.1,\nkeys: ['label', 'suffix']\n},\nresultLimit: 12,\nmatchAllWhenSearchEmpty: true\n}"
      }
    ],
    "required": false,
    "type": "UseFuseOptions<PCommandPaletteItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "UseFuseOptions<PCommandPaletteItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": "UseFuseOptions<PCommandPaletteItem>"
      }
    }
  },
  {
    "name": "groups",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "PCommandPaletteGroup<PCommandPaletteItem>[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "PCommandPaletteGroup<PCommandPaletteItem>[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PCommandPaletteGroup<PCommandPaletteItem>[]",
          "schema": [
            "PCommandPaletteGroup<PCommandPaletteItem>"
          ]
        }
      }
    }
  },
  {
    "name": "highlightOnHover",
    "global": false,
    "description": "When `true`, hover over item will trigger highlight",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "icon",
    "global": false,
    "description": "The icon displayed in the input.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.search"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "The key used to get the label from the item.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<PCommandPaletteItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<PCommandPaletteItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "loading",
    "global": false,
    "description": "When `true`, the loading icon will be displayed.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "loadingIcon",
    "global": false,
    "description": "The icon when the `loading` prop is `true`.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.loading"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "modelValue",
    "global": false,
    "description": "The controlled value of the listbox. Can be binded with with `v-model`.",
    "tags": [],
    "required": false,
    "type": "AcceptableValue | AcceptableValue[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "AcceptableValue | AcceptableValue[] | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": "string",
        "3": "number",
        "4": "bigint",
        "5": "Record<string, any>",
        "6": {
          "kind": "array",
          "type": "AcceptableValue[]",
          "schema": [
            {
              "kind": "enum",
              "type": "AcceptableValue",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "Record<string, any>"
              ]
            }
          ]
        }
      }
    },
    "default": "''"
  },
  {
    "name": "multiple",
    "global": false,
    "description": "Whether multiple options can be selected or not.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "placeholder",
    "global": false,
    "description": "The placeholder text for the input.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "t('commandPalette.placeholder')"
      }
    ],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "searchTerm",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    },
    "default": "''"
  },
  {
    "name": "selectedIcon",
    "global": false,
    "description": "The icon displayed when an item is selected.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.check"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "selectionBehavior",
    "global": false,
    "description": "How multiple selection should behave in the collection.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'toggle'"
      }
    ],
    "required": false,
    "type": "'replace' | 'toggle' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'replace' | 'toggle' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'replace'",
        "2": "'toggle'"
      }
    }
  },
  {
    "name": "trailingIcon",
    "global": false,
    "description": "The icon displayed when an item has children.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.chevronRight"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }"
      }
    }
  }
],
  "slots": [
  {
    "name": "empty",
    "type": "{ searchTerm?: string | undefined; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ searchTerm?: string | undefined; }",
      "schema": {
        "searchTerm": {
          "name": "searchTerm",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "string | undefined",
          "schema": {
            "kind": "enum",
            "type": "string | undefined",
            "schema": {
              "0": "undefined",
              "1": "string"
            }
          }
        }
      }
    }
  },
  {
    "name": "footer",
    "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
      "schema": {
        "pohon": {
          "name": "pohon",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }",
          "schema": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }"
        }
      }
    }
  },
  {
    "name": "back",
    "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
      "schema": {
        "pohon": {
          "name": "pohon",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }",
          "schema": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }"
        }
      }
    }
  },
  {
    "name": "close",
    "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ pohon: { root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }; }",
      "schema": {
        "pohon": {
          "name": "pohon",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }",
          "schema": "{ root: (props?: Record<string, any> | undefined) => string; input: (props?: Record<string, any> | undefined) => string; close: (props?: Record<string, any> | undefined) => string; back: (props?: Record<string, any> | undefined) => string; content: (props?: Record<string, any> | undefined) => string; footer: (props?: Record<string, any> | undefined) => string; viewport: (props?: Record<string, any> | undefined) => string; group: (props?: Record<string, any> | undefined) => string; empty: (props?: Record<string, any> | undefined) => string; label: (props?: Record<string, any> | undefined) => string; item: (props?: Record<string, any> | undefined) => string; itemLeadingIcon: (props?: Record<string, any> | undefined) => string; itemLeadingAvatar: (props?: Record<string, any> | undefined) => string; itemLeadingAvatarSize: (props?: Record<string, any> | undefined) => string; itemLeadingChip: (props?: Record<string, any> | undefined) => string; itemLeadingChipSize: (props?: Record<string, any> | undefined) => string; itemTrailing: (props?: Record<string, any> | undefined) => string; itemTrailingIcon: (props?: Record<string, any> | undefined) => string; itemTrailingHighlightedIcon: (props?: Record<string, any> | undefined) => string; itemTrailingKbds: (props?: Record<string, any> | undefined) => string; itemTrailingKbdsSize: (props?: Record<string, any> | undefined) => string; itemLabel: (props?: Record<string, any> | undefined) => string; itemLabelBase: (props?: Record<string, any> | undefined) => string; itemLabelPrefix: (props?: Record<string, any> | undefined) => string; itemLabelSuffix: (props?: Record<string, any> | undefined) => string; }"
        }
      }
    }
  },
  {
    "name": "item",
    "type": "{ item: PCommandPaletteItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PCommandPaletteItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PCommandPaletteItem",
          "schema": {
            "kind": "object",
            "type": "PCommandPaletteItem",
            "schema": {
              "prefix": {
                "name": "prefix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "suffix": {
                "name": "suffix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'error'",
                                        "2": "'primary'",
                                        "3": "'secondary'",
                                        "4": "'success'",
                                        "5": "'info'",
                                        "6": "'warning'",
                                        "7": "'neutral'"
                                      }
                                    }
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "chip": {
                "name": "chip",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PChipProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PChipProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "PChipProps"
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "placeholder": {
                "name": "placeholder",
                "global": false,
                "description": "The placeholder to display when the item has children.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PCommandPaletteItem[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PCommandPaletteItem[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PCommandPaletteItem[]",
                      "schema": [
                        "PCommandPaletteItem"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event?: Event | undefined) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event?: Event | undefined) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event?: Event | undefined): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-leading",
    "type": "{ item: PCommandPaletteItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PCommandPaletteItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PCommandPaletteItem",
          "schema": {
            "kind": "object",
            "type": "PCommandPaletteItem",
            "schema": {
              "prefix": {
                "name": "prefix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "suffix": {
                "name": "suffix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'error'",
                                        "2": "'primary'",
                                        "3": "'secondary'",
                                        "4": "'success'",
                                        "5": "'info'",
                                        "6": "'warning'",
                                        "7": "'neutral'"
                                      }
                                    }
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "chip": {
                "name": "chip",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PChipProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PChipProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "PChipProps"
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "placeholder": {
                "name": "placeholder",
                "global": false,
                "description": "The placeholder to display when the item has children.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PCommandPaletteItem[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PCommandPaletteItem[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PCommandPaletteItem[]",
                      "schema": [
                        "PCommandPaletteItem"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event?: Event | undefined) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event?: Event | undefined) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event?: Event | undefined): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-label",
    "type": "{ item: PCommandPaletteItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PCommandPaletteItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PCommandPaletteItem",
          "schema": {
            "kind": "object",
            "type": "PCommandPaletteItem",
            "schema": {
              "prefix": {
                "name": "prefix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "suffix": {
                "name": "suffix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'error'",
                                        "2": "'primary'",
                                        "3": "'secondary'",
                                        "4": "'success'",
                                        "5": "'info'",
                                        "6": "'warning'",
                                        "7": "'neutral'"
                                      }
                                    }
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "chip": {
                "name": "chip",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PChipProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PChipProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "PChipProps"
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "placeholder": {
                "name": "placeholder",
                "global": false,
                "description": "The placeholder to display when the item has children.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PCommandPaletteItem[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PCommandPaletteItem[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PCommandPaletteItem[]",
                      "schema": [
                        "PCommandPaletteItem"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event?: Event | undefined) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event?: Event | undefined) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event?: Event | undefined): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-trailing",
    "type": "{ item: PCommandPaletteItem; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PCommandPaletteItem; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PCommandPaletteItem",
          "schema": {
            "kind": "object",
            "type": "PCommandPaletteItem",
            "schema": {
              "prefix": {
                "name": "prefix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "suffix": {
                "name": "suffix",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'error'",
                                        "2": "'primary'",
                                        "3": "'secondary'",
                                        "4": "'success'",
                                        "5": "'info'",
                                        "6": "'warning'",
                                        "7": "'neutral'"
                                      }
                                    }
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "chip": {
                "name": "chip",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PChipProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PChipProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "PChipProps"
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "placeholder": {
                "name": "placeholder",
                "global": false,
                "description": "The placeholder to display when the item has children.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PCommandPaletteItem[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PCommandPaletteItem[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PCommandPaletteItem[]",
                      "schema": [
                        "PCommandPaletteItem"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event?: Event | undefined) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event?: Event | undefined) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event?: Event | undefined): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  }
],
  "events": [
  {
    "name": "update:modelValue",
    "description": "",
    "tags": [],
    "type": "[value: PCommandPaletteItem]",
    "signature": "(evt: 'update:modelValue', value: PCommandPaletteItem): void",
    "schema": [
      {
        "kind": "object",
        "type": "PCommandPaletteItem",
        "schema": {
          "prefix": {
            "name": "prefix",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": {
              "kind": "enum",
              "type": "string | undefined",
              "schema": {
                "0": "undefined",
                "1": "string"
              }
            }
          },
          "label": {
            "name": "label",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "suffix": {
            "name": "suffix",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "icon": {
            "name": "icon",
            "global": false,
            "description": "",
            "tags": [
              {
                "name": "IconifyIcon"
              }
            ],
            "required": false,
            "type": "string | object | undefined",
            "schema": {
              "kind": "enum",
              "type": "string | object | undefined",
              "schema": {
                "0": "undefined",
                "1": "string",
                "2": "object"
              }
            }
          },
          "avatar": {
            "name": "avatar",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "PAvatarProps | undefined",
            "schema": {
              "kind": "enum",
              "type": "PAvatarProps | undefined",
              "schema": {
                "0": "undefined",
                "1": {
                  "kind": "object",
                  "type": "PAvatarProps",
                  "schema": {
                    "as": {
                      "name": "as",
                      "global": false,
                      "description": "The element or component this component should render as.",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "'span'"
                        }
                      ],
                      "required": false,
                      "type": "APrimitiveAsTag | Component | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'a'",
                          "2": "'button'",
                          "3": "'div'",
                          "4": "'form'",
                          "5": "'h2'",
                          "6": "'h3'",
                          "7": "'img'",
                          "8": "'input'",
                          "9": "'label'",
                          "10": "'li'",
                          "11": "'nav'",
                          "12": "'ol'",
                          "13": "'p'",
                          "14": "'span'",
                          "15": "'svg'",
                          "16": "'template'",
                          "17": "'ul'",
                          "18": {
                            "kind": "object",
                            "type": "string & {}",
                            "schema": {}
                          },
                          "19": {
                            "kind": "object",
                            "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                            "schema": {
                              "beforeRouteEnter": {
                                "name": "beforeRouteEnter",
                                "global": false,
                                "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "to - RouteLocationRaw we are navigating to"
                                  },
                                  {
                                    "name": "param",
                                    "text": "from - RouteLocationRaw we are navigating from"
                                  },
                                  {
                                    "name": "param",
                                    "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                  }
                                ],
                                "required": false,
                                "type": "NavigationGuardWithThis<undefined> | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": {
                                      "kind": "event",
                                      "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                      "schema": []
                                    }
                                  }
                                }
                              },
                              "beforeRouteUpdate": {
                                "name": "beforeRouteUpdate",
                                "global": false,
                                "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "to - RouteLocationRaw we are navigating to"
                                  },
                                  {
                                    "name": "param",
                                    "text": "from - RouteLocationRaw we are navigating from"
                                  },
                                  {
                                    "name": "param",
                                    "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                  }
                                ],
                                "required": false,
                                "type": "NavigationGuard | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": {
                                      "kind": "event",
                                      "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                      "schema": []
                                    }
                                  }
                                }
                              },
                              "beforeRouteLeave": {
                                "name": "beforeRouteLeave",
                                "global": false,
                                "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                "tags": [
                                  {
                                    "name": "param",
                                    "text": "to - RouteLocationRaw we are navigating to"
                                  },
                                  {
                                    "name": "param",
                                    "text": "from - RouteLocationRaw we are navigating from"
                                  },
                                  {
                                    "name": "param",
                                    "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                  }
                                ],
                                "required": false,
                                "type": "NavigationGuard | undefined",
                                "schema": "NavigationGuard | undefined"
                              },
                              "head": {
                                "name": "head",
                                "global": false,
                                "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                "tags": [],
                                "required": false,
                                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": {
                                      "kind": "event",
                                      "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                      "schema": []
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "20": {
                            "kind": "event",
                            "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                            "schema": []
                          },
                          "21": {
                            "kind": "object",
                            "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                            "schema": {}
                          }
                        }
                      }
                    },
                    "src": {
                      "name": "src",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "alt": {
                      "name": "alt",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "icon": {
                      "name": "icon",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "IconifyIcon"
                        }
                      ],
                      "required": false,
                      "type": "string | object | undefined",
                      "schema": "string | object | undefined"
                    },
                    "text": {
                      "name": "text",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "size": {
                      "name": "size",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "'md'"
                        }
                      ],
                      "required": false,
                      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'md'",
                          "2": "'xs'",
                          "3": "'sm'",
                          "4": "'lg'",
                          "5": "'xl'",
                          "6": "'3xs'",
                          "7": "'2xs'",
                          "8": "'2xl'",
                          "9": "'3xl'"
                        }
                      }
                    },
                    "chip": {
                      "name": "chip",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | PChipProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "false",
                          "2": "true",
                          "3": {
                            "kind": "object",
                            "type": "PChipProps",
                            "schema": {
                              "as": {
                                "name": "as",
                                "global": false,
                                "description": "The element or component this component should render as.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'div'"
                                  }
                                ],
                                "required": false,
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": "APrimitiveAsTag | Component | undefined"
                              },
                              "text": {
                                "name": "text",
                                "global": false,
                                "description": "Display some text inside the chip.",
                                "tags": [],
                                "required": false,
                                "type": "string | number | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "string",
                                    "2": "number"
                                  }
                                }
                              },
                              "color": {
                                "name": "color",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'primary'"
                                  }
                                ],
                                "required": false,
                                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'error'",
                                    "2": "'primary'",
                                    "3": "'secondary'",
                                    "4": "'success'",
                                    "5": "'info'",
                                    "6": "'warning'",
                                    "7": "'neutral'"
                                  }
                                }
                              },
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'md'"
                                  }
                                ],
                                "required": false,
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                              },
                              "position": {
                                "name": "position",
                                "global": false,
                                "description": "The position of the chip.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'top-right'"
                                  }
                                ],
                                "required": false,
                                "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'top-right'",
                                    "2": "'bottom-right'",
                                    "3": "'top-left'",
                                    "4": "'bottom-left'"
                                  }
                                }
                              },
                              "inset": {
                                "name": "inset",
                                "global": false,
                                "description": "When `true`, keep the chip inside the component for rounded elements.",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "boolean | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "false",
                                    "2": "true"
                                  }
                                }
                              },
                              "standalone": {
                                "name": "standalone",
                                "global": false,
                                "description": "When `true`, render the chip relatively to the parent.",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "pohon": {
                                "name": "pohon",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "{ root?: ClassValue; base?: ClassValue; }"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "style": {
                      "name": "style",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "chip": {
            "name": "chip",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "PChipProps | undefined",
            "schema": {
              "kind": "enum",
              "type": "PChipProps | undefined",
              "schema": {
                "0": "undefined",
                "1": "PChipProps"
              }
            }
          },
          "kbds": {
            "name": "kbds",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "(string | undefined)[] | PKbdProps[] | undefined",
            "schema": {
              "kind": "enum",
              "type": "(string | undefined)[] | PKbdProps[] | undefined",
              "schema": {
                "0": "undefined",
                "1": {
                  "kind": "array",
                  "type": "(string | undefined)[]",
                  "schema": [
                    "string | undefined"
                  ]
                },
                "2": {
                  "kind": "array",
                  "type": "PKbdProps[]",
                  "schema": [
                    {
                      "kind": "object",
                      "type": "PKbdProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'kbd'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": "APrimitiveAsTag | Component | undefined"
                        },
                        "value": {
                          "name": "value",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "color": {
                          "name": "color",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'neutral'"
                            }
                          ],
                          "required": false,
                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                          "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                        },
                        "variant": {
                          "name": "variant",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'outline'"
                            }
                          ],
                          "required": false,
                          "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'solid'",
                              "2": "'outline'",
                              "3": "'soft'",
                              "4": "'subtle'"
                            }
                          }
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'sm' | 'lg' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'sm' | 'lg' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'sm'",
                              "3": "'lg'"
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "active": {
            "name": "active",
            "global": false,
            "description": "Force the link to be active independent of the current route.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "loading": {
            "name": "loading",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "disabled": {
            "name": "disabled",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "slot": {
            "name": "slot",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "placeholder": {
            "name": "placeholder",
            "global": false,
            "description": "The placeholder to display when the item has children.",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "children": {
            "name": "children",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "PCommandPaletteItem[] | undefined",
            "schema": {
              "kind": "enum",
              "type": "PCommandPaletteItem[] | undefined",
              "schema": {
                "0": "undefined",
                "1": {
                  "kind": "array",
                  "type": "PCommandPaletteItem[]",
                  "schema": [
                    "PCommandPaletteItem"
                  ]
                }
              }
            }
          },
          "onSelect": {
            "name": "onSelect",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "((event?: Event | undefined) => void) | undefined",
            "schema": {
              "kind": "enum",
              "type": "((event?: Event | undefined) => void) | undefined",
              "schema": {
                "0": "undefined",
                "1": {
                  "kind": "event",
                  "type": "(event?: Event | undefined): void",
                  "schema": []
                }
              }
            }
          },
          "class": {
            "name": "class",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "any",
            "schema": "any"
          },
          "pohon": {
            "name": "pohon",
            "global": false,
            "description": "",
            "tags": [],
            "required": false,
            "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
            "schema": {
              "kind": "enum",
              "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
              "schema": {
                "0": "undefined",
                "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
              }
            }
          },
          "as": {
            "name": "as",
            "global": false,
            "description": "The element or component this component should render as when not a link.",
            "tags": [
              {
                "name": "defaultValue",
                "text": "'button'"
              }
            ],
            "required": false,
            "type": "APrimitiveAsTag | Component | undefined",
            "schema": "APrimitiveAsTag | Component | undefined"
          },
          "replace": {
            "name": "replace",
            "global": false,
            "description": "Calls `router.replace` instead of `router.push`.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "to": {
            "name": "to",
            "global": false,
            "description": "Route Location the link should navigate to when clicked on.",
            "tags": [],
            "required": false,
            "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
            "schema": {
              "kind": "enum",
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "0": "undefined",
                "1": "string",
                "2": {
                  "kind": "object",
                  "type": "RouteLocationAsRelativeGeneric",
                  "schema": {
                    "name": {
                      "name": "name",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "RouteRecordNameGeneric",
                      "schema": {
                        "kind": "enum",
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "0": "undefined",
                          "1": "string",
                          "2": "symbol"
                        }
                      }
                    },
                    "params": {
                      "name": "params",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "RouteParamsRawGeneric | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "RouteParamsRawGeneric"
                        }
                      }
                    },
                    "path": {
                      "name": "path",
                      "global": false,
                      "description": "A relative path to the current location. This property should be removed",
                      "tags": [],
                      "required": false,
                      "type": "undefined",
                      "schema": "undefined"
                    },
                    "query": {
                      "name": "query",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "LocationQueryRaw | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "LocationQueryRaw"
                        }
                      }
                    },
                    "hash": {
                      "name": "hash",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "replace": {
                      "name": "replace",
                      "global": false,
                      "description": "Replace the entry in the history instead of pushing a new entry",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "force": {
                      "name": "force",
                      "global": false,
                      "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "state": {
                      "name": "state",
                      "global": false,
                      "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                      "tags": [],
                      "required": false,
                      "type": "HistoryState | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "HistoryState | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "object",
                            "type": "HistoryState",
                            "schema": {}
                          }
                        }
                      }
                    }
                  }
                },
                "3": {
                  "kind": "object",
                  "type": "RouteLocationAsPathGeneric",
                  "schema": {
                    "path": {
                      "name": "path",
                      "global": false,
                      "description": "Percentage encoded pathname section of the URL.",
                      "tags": [],
                      "required": true,
                      "type": "string",
                      "schema": "string"
                    },
                    "query": {
                      "name": "query",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "LocationQueryRaw | undefined",
                      "schema": "LocationQueryRaw | undefined"
                    },
                    "hash": {
                      "name": "hash",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "replace": {
                      "name": "replace",
                      "global": false,
                      "description": "Replace the entry in the history instead of pushing a new entry",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "force": {
                      "name": "force",
                      "global": false,
                      "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "state": {
                      "name": "state",
                      "global": false,
                      "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                      "tags": [],
                      "required": false,
                      "type": "HistoryState | undefined",
                      "schema": "HistoryState | undefined"
                    }
                  }
                }
              }
            }
          },
          "activeClass": {
            "name": "activeClass",
            "global": false,
            "description": "Class to apply when the link is active",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "exactActiveClass": {
            "name": "exactActiveClass",
            "global": false,
            "description": "Class to apply when the link is exact active",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "ariaCurrentValue": {
            "name": "ariaCurrentValue",
            "global": false,
            "description": "Value passed to the attribute `aria-current` when the link is exact active.",
            "tags": [
              {
                "name": "defaultValue",
                "text": "`'page'`"
              }
            ],
            "required": false,
            "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
            "schema": {
              "kind": "enum",
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "0": "undefined",
                "1": "'page'",
                "2": "'step'",
                "3": "'location'",
                "4": "'date'",
                "5": "'time'",
                "6": "'true'",
                "7": "'false'"
              }
            }
          },
          "viewTransition": {
            "name": "viewTransition",
            "global": false,
            "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "exact": {
            "name": "exact",
            "global": false,
            "description": "Will only be active if the current route is an exact match.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "exactQuery": {
            "name": "exactQuery",
            "global": false,
            "description": "Allows controlling how the current route query sets the link as active.",
            "tags": [],
            "required": false,
            "type": "boolean | 'partial' | undefined",
            "schema": {
              "kind": "enum",
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "0": "undefined",
                "1": "false",
                "2": "true",
                "3": "'partial'"
              }
            }
          },
          "exactHash": {
            "name": "exactHash",
            "global": false,
            "description": "Will only be active if the current route hash is an exact match.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "inactiveClass": {
            "name": "inactiveClass",
            "global": false,
            "description": "The class to apply when the link is inactive.",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "href": {
            "name": "href",
            "global": false,
            "description": "An alias for `to`. If used with `to`, `href` will be ignored",
            "tags": [],
            "required": false,
            "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
            "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
          },
          "external": {
            "name": "external",
            "global": false,
            "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "target": {
            "name": "target",
            "global": false,
            "description": "Where to display the linked URL, as the name for a browsing context.",
            "tags": [],
            "required": false,
            "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
            "schema": {
              "kind": "enum",
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "0": "undefined",
                "1": "null",
                "2": "string & {}",
                "3": "'_blank'",
                "4": "'_parent'",
                "5": "'_self'",
                "6": "'_top'"
              }
            }
          },
          "rel": {
            "name": "rel",
            "global": false,
            "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
            "tags": [],
            "required": false,
            "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
            "schema": {
              "kind": "enum",
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "0": "undefined",
                "1": "null",
                "2": "string & {}",
                "3": "'noopener'",
                "4": "'noreferrer'",
                "5": "'nofollow'",
                "6": "'sponsored'",
                "7": "'ugc'"
              }
            }
          },
          "noRel": {
            "name": "noRel",
            "global": false,
            "description": "If set to true, no rel attribute will be added to the link",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "prefetchedClass": {
            "name": "prefetchedClass",
            "global": false,
            "description": "A class to apply to links that have been prefetched.",
            "tags": [],
            "required": false,
            "type": "string | undefined",
            "schema": "string | undefined"
          },
          "prefetch": {
            "name": "prefetch",
            "global": false,
            "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          },
          "prefetchOn": {
            "name": "prefetchOn",
            "global": false,
            "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
            "tags": [],
            "required": false,
            "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
            "schema": {
              "kind": "enum",
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "0": "undefined",
                "1": "'visibility'",
                "2": "'interaction'",
                "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
              }
            }
          },
          "noPrefetch": {
            "name": "noPrefetch",
            "global": false,
            "description": "Escape hatch to disable `prefetch` attribute.",
            "tags": [],
            "required": false,
            "type": "boolean | undefined",
            "schema": "boolean | undefined"
          }
        }
      }
    ]
  },
  {
    "name": "update:open",
    "description": "",
    "tags": [],
    "type": "[value: boolean]",
    "signature": "(evt: 'update:open', value: boolean): void",
    "schema": [
      {
        "kind": "enum",
        "type": "boolean",
        "schema": [
          "false",
          "true"
        ]
      }
    ]
  },
  {
    "name": "highlight",
    "description": "",
    "tags": [],
    "type": "[payload: { ref: HTMLElement; value: PCommandPaletteItem; } | undefined]",
    "signature": "(evt: 'highlight', payload: { ref: HTMLElement; value: PCommandPaletteItem; } | undefined): void",
    "schema": [
      {
        "kind": "enum",
        "type": "{ ref: HTMLElement; value: PCommandPaletteItem; } | undefined",
        "schema": [
          "undefined",
          {
            "kind": "object",
            "type": "{ ref: HTMLElement; value: PCommandPaletteItem; }",
            "schema": {
              "ref": {
                "name": "ref",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "HTMLElement",
                "schema": {
                  "kind": "object",
                  "type": "HTMLElement",
                  "schema": {}
                }
              },
              "value": {
                "name": "value",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "PCommandPaletteItem",
                "schema": {
                  "kind": "object",
                  "type": "PCommandPaletteItem",
                  "schema": {
                    "prefix": {
                      "name": "prefix",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string"
                        }
                      }
                    },
                    "label": {
                      "name": "label",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "suffix": {
                      "name": "suffix",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "icon": {
                      "name": "icon",
                      "global": false,
                      "description": "",
                      "tags": [
                        {
                          "name": "IconifyIcon"
                        }
                      ],
                      "required": false,
                      "type": "string | object | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | object | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string",
                          "2": "object"
                        }
                      }
                    },
                    "avatar": {
                      "name": "avatar",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PAvatarProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PAvatarProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "object",
                            "type": "PAvatarProps",
                            "schema": {
                              "as": {
                                "name": "as",
                                "global": false,
                                "description": "The element or component this component should render as.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'span'"
                                  }
                                ],
                                "required": false,
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'a'",
                                    "2": "'button'",
                                    "3": "'div'",
                                    "4": "'form'",
                                    "5": "'h2'",
                                    "6": "'h3'",
                                    "7": "'img'",
                                    "8": "'input'",
                                    "9": "'label'",
                                    "10": "'li'",
                                    "11": "'nav'",
                                    "12": "'ol'",
                                    "13": "'p'",
                                    "14": "'span'",
                                    "15": "'svg'",
                                    "16": "'template'",
                                    "17": "'ul'",
                                    "18": {
                                      "kind": "object",
                                      "type": "string & {}",
                                      "schema": {}
                                    },
                                    "19": {
                                      "kind": "object",
                                      "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                      "schema": {
                                        "beforeRouteEnter": {
                                          "name": "beforeRouteEnter",
                                          "global": false,
                                          "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuardWithThis<undefined> | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuardWithThis<undefined> | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteUpdate": {
                                          "name": "beforeRouteUpdate",
                                          "global": false,
                                          "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "NavigationGuard | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        },
                                        "beforeRouteLeave": {
                                          "name": "beforeRouteLeave",
                                          "global": false,
                                          "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                          "tags": [
                                            {
                                              "name": "param",
                                              "text": "to - RouteLocationRaw we are navigating to"
                                            },
                                            {
                                              "name": "param",
                                              "text": "from - RouteLocationRaw we are navigating from"
                                            },
                                            {
                                              "name": "param",
                                              "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                            }
                                          ],
                                          "required": false,
                                          "type": "NavigationGuard | undefined",
                                          "schema": "NavigationGuard | undefined"
                                        },
                                        "head": {
                                          "name": "head",
                                          "global": false,
                                          "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                          "tags": [],
                                          "required": false,
                                          "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": {
                                                "kind": "event",
                                                "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                                "schema": []
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "20": {
                                      "kind": "event",
                                      "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                      "schema": []
                                    },
                                    "21": {
                                      "kind": "object",
                                      "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                      "schema": {}
                                    }
                                  }
                                }
                              },
                              "src": {
                                "name": "src",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "alt": {
                                "name": "alt",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "icon": {
                                "name": "icon",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "IconifyIcon"
                                  }
                                ],
                                "required": false,
                                "type": "string | object | undefined",
                                "schema": "string | object | undefined"
                              },
                              "text": {
                                "name": "text",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'md'"
                                  }
                                ],
                                "required": false,
                                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'md'",
                                    "2": "'xs'",
                                    "3": "'sm'",
                                    "4": "'lg'",
                                    "5": "'xl'",
                                    "6": "'3xs'",
                                    "7": "'2xs'",
                                    "8": "'2xl'",
                                    "9": "'3xl'"
                                  }
                                }
                              },
                              "chip": {
                                "name": "chip",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "boolean | PChipProps | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "boolean | PChipProps | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "false",
                                    "2": "true",
                                    "3": {
                                      "kind": "object",
                                      "type": "PChipProps",
                                      "schema": {
                                        "as": {
                                          "name": "as",
                                          "global": false,
                                          "description": "The element or component this component should render as.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'div'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "APrimitiveAsTag | Component | undefined",
                                          "schema": "APrimitiveAsTag | Component | undefined"
                                        },
                                        "text": {
                                          "name": "text",
                                          "global": false,
                                          "description": "Display some text inside the chip.",
                                          "tags": [],
                                          "required": false,
                                          "type": "string | number | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "string | number | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "string",
                                              "2": "number"
                                            }
                                          }
                                        },
                                        "color": {
                                          "name": "color",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'primary'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'error'",
                                              "2": "'primary'",
                                              "3": "'secondary'",
                                              "4": "'success'",
                                              "5": "'info'",
                                              "6": "'warning'",
                                              "7": "'neutral'"
                                            }
                                          }
                                        },
                                        "size": {
                                          "name": "size",
                                          "global": false,
                                          "description": "",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'md'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                          "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                        },
                                        "position": {
                                          "name": "position",
                                          "global": false,
                                          "description": "The position of the chip.",
                                          "tags": [
                                            {
                                              "name": "defaultValue",
                                              "text": "'top-right'"
                                            }
                                          ],
                                          "required": false,
                                          "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "'top-right'",
                                              "2": "'bottom-right'",
                                              "3": "'top-left'",
                                              "4": "'bottom-left'"
                                            }
                                          }
                                        },
                                        "inset": {
                                          "name": "inset",
                                          "global": false,
                                          "description": "When `true`, keep the chip inside the component for rounded elements.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "boolean | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "false",
                                              "2": "true"
                                            }
                                          }
                                        },
                                        "standalone": {
                                          "name": "standalone",
                                          "global": false,
                                          "description": "When `true`, render the chip relatively to the parent.",
                                          "tags": [],
                                          "required": false,
                                          "type": "boolean | undefined",
                                          "schema": "boolean | undefined"
                                        },
                                        "class": {
                                          "name": "class",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "any",
                                          "schema": "any"
                                        },
                                        "pohon": {
                                          "name": "pohon",
                                          "global": false,
                                          "description": "",
                                          "tags": [],
                                          "required": false,
                                          "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                          "schema": {
                                            "kind": "enum",
                                            "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                            "schema": {
                                              "0": "undefined",
                                              "1": "{ root?: ClassValue; base?: ClassValue; }"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "style": {
                                "name": "style",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              },
                              "pohon": {
                                "name": "pohon",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "chip": {
                      "name": "chip",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PChipProps | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PChipProps | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "PChipProps"
                        }
                      }
                    },
                    "kbds": {
                      "name": "kbds",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "(string | undefined)[] | PKbdProps[] | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "(string | undefined)[] | PKbdProps[] | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "array",
                            "type": "(string | undefined)[]",
                            "schema": [
                              "string | undefined"
                            ]
                          },
                          "2": {
                            "kind": "array",
                            "type": "PKbdProps[]",
                            "schema": [
                              {
                                "kind": "object",
                                "type": "PKbdProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'kbd'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "value": {
                                    "name": "value",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | undefined",
                                    "schema": "string | undefined"
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'neutral'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                  },
                                  "variant": {
                                    "name": "variant",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'outline'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'solid'",
                                        "2": "'outline'",
                                        "3": "'soft'",
                                        "4": "'subtle'"
                                      }
                                    }
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'sm' | 'lg' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'md' | 'sm' | 'lg' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'md'",
                                        "2": "'sm'",
                                        "3": "'lg'"
                                      }
                                    }
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    "active": {
                      "name": "active",
                      "global": false,
                      "description": "Force the link to be active independent of the current route.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "loading": {
                      "name": "loading",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "disabled": {
                      "name": "disabled",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "slot": {
                      "name": "slot",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "placeholder": {
                      "name": "placeholder",
                      "global": false,
                      "description": "The placeholder to display when the item has children.",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "children": {
                      "name": "children",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "PCommandPaletteItem[] | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "PCommandPaletteItem[] | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "array",
                            "type": "PCommandPaletteItem[]",
                            "schema": [
                              "PCommandPaletteItem"
                            ]
                          }
                        }
                      }
                    },
                    "onSelect": {
                      "name": "onSelect",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "((event?: Event | undefined) => void) | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "((event?: Event | undefined) => void) | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": {
                            "kind": "event",
                            "type": "(event?: Event | undefined): void",
                            "schema": []
                          }
                        }
                      }
                    },
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "Pick<{ root?: ClassValue; input?: ClassValue; close?: ClassValue; back?: ClassValue; content?: ClassValue; footer?: ClassValue; viewport?: ClassValue; group?: ClassValue; empty?: ClassValue; label?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemLeadingChip?: ClassValue; itemLeadingChipSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingHighlightedIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelBase?: ClassValue; itemLabelPrefix?: ClassValue; itemLabelSuffix?: ClassValue; }, 'item' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemLeadingChip' | 'itemLeadingChipSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingHighlightedIcon' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelBase' | 'itemLabelPrefix' | 'itemLabelSuffix'>"
                        }
                      }
                    },
                    "as": {
                      "name": "as",
                      "global": false,
                      "description": "The element or component this component should render as when not a link.",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "'button'"
                        }
                      ],
                      "required": false,
                      "type": "APrimitiveAsTag | Component | undefined",
                      "schema": "APrimitiveAsTag | Component | undefined"
                    },
                    "replace": {
                      "name": "replace",
                      "global": false,
                      "description": "Calls `router.replace` instead of `router.push`.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "to": {
                      "name": "to",
                      "global": false,
                      "description": "Route Location the link should navigate to when clicked on.",
                      "tags": [],
                      "required": false,
                      "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "string",
                          "2": {
                            "kind": "object",
                            "type": "RouteLocationAsRelativeGeneric",
                            "schema": {
                              "name": {
                                "name": "name",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "RouteRecordNameGeneric",
                                "schema": {
                                  "kind": "enum",
                                  "type": "RouteRecordNameGeneric",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "string",
                                    "2": "symbol"
                                  }
                                }
                              },
                              "params": {
                                "name": "params",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "RouteParamsRawGeneric | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "RouteParamsRawGeneric | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "RouteParamsRawGeneric"
                                  }
                                }
                              },
                              "path": {
                                "name": "path",
                                "global": false,
                                "description": "A relative path to the current location. This property should be removed",
                                "tags": [],
                                "required": false,
                                "type": "undefined",
                                "schema": "undefined"
                              },
                              "query": {
                                "name": "query",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "LocationQueryRaw | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "LocationQueryRaw | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "LocationQueryRaw"
                                  }
                                }
                              },
                              "hash": {
                                "name": "hash",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "replace": {
                                "name": "replace",
                                "global": false,
                                "description": "Replace the entry in the history instead of pushing a new entry",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "force": {
                                "name": "force",
                                "global": false,
                                "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "state": {
                                "name": "state",
                                "global": false,
                                "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                                "tags": [],
                                "required": false,
                                "type": "HistoryState | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "HistoryState | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": {
                                      "kind": "object",
                                      "type": "HistoryState",
                                      "schema": {}
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "3": {
                            "kind": "object",
                            "type": "RouteLocationAsPathGeneric",
                            "schema": {
                              "path": {
                                "name": "path",
                                "global": false,
                                "description": "Percentage encoded pathname section of the URL.",
                                "tags": [],
                                "required": true,
                                "type": "string",
                                "schema": "string"
                              },
                              "query": {
                                "name": "query",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "LocationQueryRaw | undefined",
                                "schema": "LocationQueryRaw | undefined"
                              },
                              "hash": {
                                "name": "hash",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "replace": {
                                "name": "replace",
                                "global": false,
                                "description": "Replace the entry in the history instead of pushing a new entry",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "force": {
                                "name": "force",
                                "global": false,
                                "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                                "tags": [],
                                "required": false,
                                "type": "boolean | undefined",
                                "schema": "boolean | undefined"
                              },
                              "state": {
                                "name": "state",
                                "global": false,
                                "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                                "tags": [],
                                "required": false,
                                "type": "HistoryState | undefined",
                                "schema": "HistoryState | undefined"
                              }
                            }
                          }
                        }
                      }
                    },
                    "activeClass": {
                      "name": "activeClass",
                      "global": false,
                      "description": "Class to apply when the link is active",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "exactActiveClass": {
                      "name": "exactActiveClass",
                      "global": false,
                      "description": "Class to apply when the link is exact active",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "ariaCurrentValue": {
                      "name": "ariaCurrentValue",
                      "global": false,
                      "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                      "tags": [
                        {
                          "name": "defaultValue",
                          "text": "`'page'`"
                        }
                      ],
                      "required": false,
                      "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'page'",
                          "2": "'step'",
                          "3": "'location'",
                          "4": "'date'",
                          "5": "'time'",
                          "6": "'true'",
                          "7": "'false'"
                        }
                      }
                    },
                    "viewTransition": {
                      "name": "viewTransition",
                      "global": false,
                      "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "exact": {
                      "name": "exact",
                      "global": false,
                      "description": "Will only be active if the current route is an exact match.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "exactQuery": {
                      "name": "exactQuery",
                      "global": false,
                      "description": "Allows controlling how the current route query sets the link as active.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | 'partial' | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "boolean | 'partial' | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "false",
                          "2": "true",
                          "3": "'partial'"
                        }
                      }
                    },
                    "exactHash": {
                      "name": "exactHash",
                      "global": false,
                      "description": "Will only be active if the current route hash is an exact match.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "inactiveClass": {
                      "name": "inactiveClass",
                      "global": false,
                      "description": "The class to apply when the link is inactive.",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "href": {
                      "name": "href",
                      "global": false,
                      "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                      "tags": [],
                      "required": false,
                      "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                      "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
                    },
                    "external": {
                      "name": "external",
                      "global": false,
                      "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "target": {
                      "name": "target",
                      "global": false,
                      "description": "Where to display the linked URL, as the name for a browsing context.",
                      "tags": [],
                      "required": false,
                      "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "null",
                          "2": "string & {}",
                          "3": "'_blank'",
                          "4": "'_parent'",
                          "5": "'_self'",
                          "6": "'_top'"
                        }
                      }
                    },
                    "rel": {
                      "name": "rel",
                      "global": false,
                      "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                      "tags": [],
                      "required": false,
                      "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "null",
                          "2": "string & {}",
                          "3": "'noopener'",
                          "4": "'noreferrer'",
                          "5": "'nofollow'",
                          "6": "'sponsored'",
                          "7": "'ugc'"
                        }
                      }
                    },
                    "noRel": {
                      "name": "noRel",
                      "global": false,
                      "description": "If set to true, no rel attribute will be added to the link",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "prefetchedClass": {
                      "name": "prefetchedClass",
                      "global": false,
                      "description": "A class to apply to links that have been prefetched.",
                      "tags": [],
                      "required": false,
                      "type": "string | undefined",
                      "schema": "string | undefined"
                    },
                    "prefetch": {
                      "name": "prefetch",
                      "global": false,
                      "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    },
                    "prefetchOn": {
                      "name": "prefetchOn",
                      "global": false,
                      "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                      "tags": [],
                      "required": false,
                      "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "'visibility'",
                          "2": "'interaction'",
                          "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                        }
                      }
                    },
                    "noPrefetch": {
                      "name": "noPrefetch",
                      "global": false,
                      "description": "Escape hatch to disable `prefetch` attribute.",
                      "tags": [],
                      "required": false,
                      "type": "boolean | undefined",
                      "schema": "boolean | undefined"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    ]
  },
  {
    "name": "entryFocus",
    "description": "",
    "tags": [],
    "type": "[event: CustomEvent<any>]",
    "signature": "(evt: 'entryFocus', event: CustomEvent<any>): void",
    "schema": [
      "CustomEvent<any>"
    ]
  },
  {
    "name": "leave",
    "description": "",
    "tags": [],
    "type": "[event: Event]",
    "signature": "(evt: 'leave', event: Event): void",
    "schema": [
      {
        "kind": "object",
        "type": "Event",
        "schema": {}
      }
    ]
  },
  {
    "name": "update:searchTerm",
    "description": "",
    "tags": [],
    "type": "[value: string]",
    "signature": "(evt: 'update:searchTerm', value: string): void",
    "schema": [
      "string"
    ]
  }
],
  "exposed": []
}
