{
  "props": [
  {
    "name": "as",
    "description": "The element or component this component should render as. Can be overwritten by `asChild`.",
    "type": "APrimitiveAsTag | Component",
    "required": false,
    "default": "'div'"
  },
  {
    "name": "asChild",
    "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.\n\nRead our [Composition](https://akar.vinicunca.dev/core/guides/composition) guide for more details.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "by",
    "description": "Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.",
    "type": "string | ((a: AcceptableValue, b: AcceptableValue) => boolean)",
    "required": false
  },
  {
    "name": "defaultValue",
    "description": "The value of the listbox when initially rendered. Use when you do not need to control the state of the Listbox",
    "type": "AcceptableValue | AcceptableValue[]",
    "required": false
  },
  {
    "name": "dir",
    "description": "The reading direction of the listbox when applicable. <br> If omitted, inherits globally from `ConfigProvider` or assumes LTR (left-to-right) reading mode.",
    "type": "'ltr' | 'rtl'",
    "required": false
  },
  {
    "name": "disabled",
    "description": "When `true`, prevents the user from interacting with listbox",
    "type": "boolean",
    "required": false
  },
  {
    "name": "highlightOnHover",
    "description": "When `true`, hover over item will trigger highlight",
    "type": "boolean",
    "required": false
  },
  {
    "name": "modelValue",
    "description": "The controlled value of the listbox. Can be binded with with `v-model`.",
    "type": "AcceptableValue | AcceptableValue[]",
    "required": false
  },
  {
    "name": "multiple",
    "description": "Whether multiple options can be selected or not.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "name",
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "type": "string",
    "required": false
  },
  {
    "name": "orientation",
    "description": "The orientation of the listbox. <br>Mainly so arrow navigation is done accordingly (left & right vs. up & down)",
    "type": "'horizontal' | 'vertical'",
    "required": false,
    "default": "'vertical'"
  },
  {
    "name": "required",
    "description": "When `true`, indicates that the user must set the value before the owning form can be submitted.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "selectionBehavior",
    "description": "How multiple selection should behave in the collection.",
    "type": "'replace' | 'toggle'",
    "required": false,
    "default": "'toggle'"
  }
],
  "events": [
  {
    "name": "entryFocus",
    "description": "Event handler called when container is being focused. Can be prevented.",
    "type": "[event: CustomEvent<any>]"
  },
  {
    "name": "highlight",
    "description": "Event handler when highlighted element changes.",
    "type": "[payload: { ref: HTMLElement; value: AcceptableValue; }]"
  },
  {
    "name": "leave",
    "description": "Event handler called when the mouse leave the container",
    "type": "[event: Event]"
  },
  {
    "name": "update:modelValue",
    "description": "Event handler called when the value changes.",
    "type": "[value: AcceptableValue]"
  }
],
  "slots": [
  {
    "name": "modelValue",
    "description": "Current active value",
    "type": "AcceptableValue | AcceptableValue[] | undefined"
  }
],
  "exposed": [
  {
    "name": "highlightItem",
    "description": "",
    "type": "(value: AcceptableValue) => void"
  },
  {
    "name": "highlightFirstItem",
    "description": "",
    "type": "() => void"
  },
  {
    "name": "highlightSelected",
    "description": "",
    "type": "(event?: Event | undefined) => Promise<void>"
  },
  {
    "name": "getItems",
    "description": "",
    "type": "(includeDisabledItem?: boolean) => ({ value: AcceptableValue; } & { ref: HTMLElement; value?: any; })[]"
  }
]
}
