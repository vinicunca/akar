{
  "props": [
  {
    "name": "arrow",
    "global": false,
    "description": "Display an arrow alongside the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | Omit<ADropdownMenuArrowProps, 'as' | 'asChild'> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Omit<ADropdownMenuArrowProps, 'as' | 'asChild'> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Omit<ADropdownMenuArrowProps, 'as' | 'asChild'>"
      }
    }
  },
  {
    "name": "checkedIcon",
    "global": false,
    "description": "The icon displayed when an item is checked.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.check"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "content",
    "global": false,
    "description": "The content of the menu.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ side: 'bottom', sideOffset: 8, collisionPadding: 8 }"
      }
    ],
    "required": false,
    "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
    "schema": {
      "kind": "enum",
      "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
          "schema": {
            "sticky": {
              "name": "sticky",
              "global": false,
              "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'partial'"
                }
              ],
              "required": false,
              "type": "'partial' | 'always' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'partial' | 'always' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'partial'",
                  "2": "'always'"
                }
              }
            },
            "side": {
              "name": "side",
              "global": false,
              "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'top'"
                }
              ],
              "required": false,
              "type": "Side | undefined",
              "schema": {
                "kind": "enum",
                "type": "Side | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'top'",
                  "2": "'bottom'",
                  "3": "'left'",
                  "4": "'right'"
                }
              }
            },
            "sideOffset": {
              "name": "sideOffset",
              "global": false,
              "description": "The distance in pixels from the trigger.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number"
                }
              }
            },
            "sideFlip": {
              "name": "sideFlip",
              "global": false,
              "description": "Flip to the opposite side when colliding with boundary.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "align": {
              "name": "align",
              "global": false,
              "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'center'"
                }
              ],
              "required": false,
              "type": "Align | undefined",
              "schema": {
                "kind": "enum",
                "type": "Align | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'center'",
                  "2": "'start'",
                  "3": "'end'"
                }
              }
            },
            "alignOffset": {
              "name": "alignOffset",
              "global": false,
              "description": "An offset in pixels from the `start` or `end` alignment options.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "alignFlip": {
              "name": "alignFlip",
              "global": false,
              "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "avoidCollisions": {
              "name": "avoidCollisions",
              "global": false,
              "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "true"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "collisionBoundary": {
              "name": "collisionBoundary",
              "global": false,
              "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "Array"
                }
              ],
              "required": false,
              "type": "Element | (Element | null)[] | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "Element | (Element | null)[] | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": {
                    "kind": "object",
                    "type": "Element",
                    "schema": {}
                  },
                  "3": {
                    "kind": "array",
                    "type": "(Element | null)[]",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "Element | null",
                        "schema": [
                          "null",
                          "Element"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "collisionPadding": {
              "name": "collisionPadding",
              "global": false,
              "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | Partial<Record<Side, number>> | undefined",
              "schema": {
                "kind": "enum",
                "type": "number | Partial<Record<Side, number>> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "number",
                  "2": "Partial<Record<Side, number>>"
                }
              }
            },
            "arrowPadding": {
              "name": "arrowPadding",
              "global": false,
              "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "0"
                }
              ],
              "required": false,
              "type": "number | undefined",
              "schema": "number | undefined"
            },
            "hideWhenDetached": {
              "name": "hideWhenDetached",
              "global": false,
              "description": "Whether to hide the content when the trigger becomes fully occluded.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "positionStrategy": {
              "name": "positionStrategy",
              "global": false,
              "description": "The type of CSS position property to use.",
              "tags": [],
              "required": false,
              "type": "'fixed' | 'absolute' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'fixed' | 'absolute' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'fixed'",
                  "2": "'absolute'"
                }
              }
            },
            "updatePositionStrategy": {
              "name": "updatePositionStrategy",
              "global": false,
              "description": "Strategy to update the position of the floating element on every animation frame.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'optimized'"
                }
              ],
              "required": false,
              "type": "'always' | 'optimized' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'always' | 'optimized' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'always'",
                  "2": "'optimized'"
                }
              }
            },
            "disableUpdateOnLayoutShift": {
              "name": "disableUpdateOnLayoutShift",
              "global": false,
              "description": "Whether to disable the update position for the content when the layout shifted.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prioritizePosition": {
              "name": "prioritizePosition",
              "global": false,
              "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "reference": {
              "name": "reference",
              "global": false,
              "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
              "tags": [],
              "required": false,
              "type": "ReferenceElement | undefined",
              "schema": {
                "kind": "enum",
                "type": "ReferenceElement | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "Element",
                  "2": {
                    "kind": "object",
                    "type": "VirtualElement",
                    "schema": {
                      "getBoundingClientRect": {
                        "name": "getBoundingClientRect",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": true,
                        "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                        "schema": {
                          "kind": "event",
                          "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                        }
                      },
                      "getClientRects": {
                        "name": "getClientRects",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "event",
                              "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                            }
                          }
                        }
                      },
                      "contextElement": {
                        "name": "contextElement",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "Element | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "Element | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "Element"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "loop": {
              "name": "loop",
              "global": false,
              "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "false"
                }
              ],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onEscapeKeyDown": {
              "name": "onEscapeKeyDown",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: KeyboardEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: KeyboardEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: KeyboardEvent): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "KeyboardEvent",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            },
            "onPointerDownOutside": {
              "name": "onPointerDownOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent): void",
                    "schema": [
                      "PointerDownOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onFocusOutside": {
              "name": "onFocusOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: FocusOutsideEvent): void",
                    "schema": [
                      "FocusOutsideEvent"
                    ]
                  }
                }
              }
            },
            "onInteractOutside": {
              "name": "onInteractOutside",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                    "schema": [
                      {
                        "kind": "enum",
                        "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                        "schema": [
                          "PointerDownOutsideEvent",
                          "FocusOutsideEvent"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "onCloseAutoFocus": {
              "name": "onCloseAutoFocus",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: Event) => void) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: Event) => void) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: Event): void",
                    "schema": [
                      {
                        "kind": "object",
                        "type": "Event",
                        "schema": {}
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "name": "defaultOpen",
    "global": false,
    "description": "The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "externalIcon",
    "global": false,
    "description": "The icon displayed when the item is an external link.\nSet to `false` to hide the external icon.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.external"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | boolean | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": "object"
      }
    },
    "default": "true"
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
    "schema": {
      "kind": "enum",
      "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PDropdownMenuItem[]",
          "schema": [
            {
              "kind": "object",
              "type": "PDropdownMenuItem",
              "schema": {
                "label": {
                  "name": "label",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string"
                    }
                  }
                },
                "icon": {
                  "name": "icon",
                  "global": false,
                  "description": "",
                  "tags": [
                    {
                      "name": "IconifyIcon"
                    }
                  ],
                  "required": false,
                  "type": "string | object | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | object | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string",
                      "2": "object"
                    }
                  }
                },
                "color": {
                  "name": "color",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'error'",
                      "2": "'primary'",
                      "3": "'secondary'",
                      "4": "'success'",
                      "5": "'info'",
                      "6": "'warning'",
                      "7": "'neutral'"
                    }
                  }
                },
                "avatar": {
                  "name": "avatar",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "PAvatarProps | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "object",
                        "type": "PAvatarProps",
                        "schema": {
                          "as": {
                            "name": "as",
                            "global": false,
                            "description": "The element or component this component should render as.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'span'"
                              }
                            ],
                            "required": false,
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'a'",
                                "2": "'button'",
                                "3": "'div'",
                                "4": "'form'",
                                "5": "'h2'",
                                "6": "'h3'",
                                "7": "'img'",
                                "8": "'input'",
                                "9": "'label'",
                                "10": "'li'",
                                "11": "'nav'",
                                "12": "'ol'",
                                "13": "'p'",
                                "14": "'span'",
                                "15": "'svg'",
                                "16": "'template'",
                                "17": "'ul'",
                                "18": {
                                  "kind": "object",
                                  "type": "string & {}",
                                  "schema": {}
                                },
                                "19": {
                                  "kind": "object",
                                  "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                  "schema": {
                                    "beforeRouteEnter": {
                                      "name": "beforeRouteEnter",
                                      "global": false,
                                      "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuardWithThis<undefined> | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteUpdate": {
                                      "name": "beforeRouteUpdate",
                                      "global": false,
                                      "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "NavigationGuard | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    },
                                    "beforeRouteLeave": {
                                      "name": "beforeRouteLeave",
                                      "global": false,
                                      "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                      "tags": [
                                        {
                                          "name": "param",
                                          "text": "to - RouteLocationRaw we are navigating to"
                                        },
                                        {
                                          "name": "param",
                                          "text": "from - RouteLocationRaw we are navigating from"
                                        },
                                        {
                                          "name": "param",
                                          "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                        }
                                      ],
                                      "required": false,
                                      "type": "NavigationGuard | undefined",
                                      "schema": "NavigationGuard | undefined"
                                    },
                                    "head": {
                                      "name": "head",
                                      "global": false,
                                      "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                      "tags": [],
                                      "required": false,
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                            "schema": []
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "20": {
                                  "kind": "event",
                                  "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                  "schema": []
                                },
                                "21": {
                                  "kind": "object",
                                  "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                  "schema": {}
                                }
                              }
                            }
                          },
                          "src": {
                            "name": "src",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "alt": {
                            "name": "alt",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "icon": {
                            "name": "icon",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "IconifyIcon"
                              }
                            ],
                            "required": false,
                            "type": "string | object | undefined",
                            "schema": "string | object | undefined"
                          },
                          "text": {
                            "name": "text",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "size": {
                            "name": "size",
                            "global": false,
                            "description": "",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'md'"
                              }
                            ],
                            "required": false,
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'md'",
                                "2": "'xs'",
                                "3": "'sm'",
                                "4": "'lg'",
                                "5": "'xl'",
                                "6": "'3xs'",
                                "7": "'2xs'",
                                "8": "'2xl'",
                                "9": "'3xl'"
                              }
                            }
                          },
                          "chip": {
                            "name": "chip",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "boolean | PChipProps | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "false",
                                "2": "true",
                                "3": {
                                  "kind": "object",
                                  "type": "PChipProps",
                                  "schema": {
                                    "as": {
                                      "name": "as",
                                      "global": false,
                                      "description": "The element or component this component should render as.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'div'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "APrimitiveAsTag | Component | undefined",
                                      "schema": "APrimitiveAsTag | Component | undefined"
                                    },
                                    "text": {
                                      "name": "text",
                                      "global": false,
                                      "description": "Display some text inside the chip.",
                                      "tags": [],
                                      "required": false,
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "string | number | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "string",
                                          "2": "number"
                                        }
                                      }
                                    },
                                    "color": {
                                      "name": "color",
                                      "global": false,
                                      "description": "",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'primary'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                      "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                    },
                                    "size": {
                                      "name": "size",
                                      "global": false,
                                      "description": "",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'md'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                      "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                    },
                                    "position": {
                                      "name": "position",
                                      "global": false,
                                      "description": "The position of the chip.",
                                      "tags": [
                                        {
                                          "name": "defaultValue",
                                          "text": "'top-right'"
                                        }
                                      ],
                                      "required": false,
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "'top-right'",
                                          "2": "'bottom-right'",
                                          "3": "'top-left'",
                                          "4": "'bottom-left'"
                                        }
                                      }
                                    },
                                    "inset": {
                                      "name": "inset",
                                      "global": false,
                                      "description": "When `true`, keep the chip inside the component for rounded elements.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "boolean | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "false",
                                          "2": "true"
                                        }
                                      }
                                    },
                                    "standalone": {
                                      "name": "standalone",
                                      "global": false,
                                      "description": "When `true`, render the chip relatively to the parent.",
                                      "tags": [],
                                      "required": false,
                                      "type": "boolean | undefined",
                                      "schema": "boolean | undefined"
                                    },
                                    "class": {
                                      "name": "class",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "any",
                                      "schema": "any"
                                    },
                                    "pohon": {
                                      "name": "pohon",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "{ root?: ClassValue; base?: ClassValue; }"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "class": {
                            "name": "class",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "style": {
                            "name": "style",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "any",
                            "schema": "any"
                          },
                          "pohon": {
                            "name": "pohon",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "content": {
                  "name": "content",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "object",
                        "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
                        "schema": {
                          "sticky": {
                            "name": "sticky",
                            "global": false,
                            "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'partial'"
                              }
                            ],
                            "required": false,
                            "type": "'partial' | 'always' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'partial' | 'always' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'partial'",
                                "2": "'always'"
                              }
                            }
                          },
                          "side": {
                            "name": "side",
                            "global": false,
                            "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'top'"
                              }
                            ],
                            "required": false,
                            "type": "Side | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "Side | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'top'",
                                "2": "'bottom'",
                                "3": "'left'",
                                "4": "'right'"
                              }
                            }
                          },
                          "sideOffset": {
                            "name": "sideOffset",
                            "global": false,
                            "description": "The distance in pixels from the trigger.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "0"
                              }
                            ],
                            "required": false,
                            "type": "number | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "number | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "number"
                              }
                            }
                          },
                          "sideFlip": {
                            "name": "sideFlip",
                            "global": false,
                            "description": "Flip to the opposite side when colliding with boundary.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "align": {
                            "name": "align",
                            "global": false,
                            "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'center'"
                              }
                            ],
                            "required": false,
                            "type": "Align | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "Align | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'center'",
                                "2": "'start'",
                                "3": "'end'"
                              }
                            }
                          },
                          "alignOffset": {
                            "name": "alignOffset",
                            "global": false,
                            "description": "An offset in pixels from the `start` or `end` alignment options.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "0"
                              }
                            ],
                            "required": false,
                            "type": "number | undefined",
                            "schema": "number | undefined"
                          },
                          "alignFlip": {
                            "name": "alignFlip",
                            "global": false,
                            "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "avoidCollisions": {
                            "name": "avoidCollisions",
                            "global": false,
                            "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "true"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "collisionBoundary": {
                            "name": "collisionBoundary",
                            "global": false,
                            "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "Array"
                              }
                            ],
                            "required": false,
                            "type": "Element | (Element | null)[] | null | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "Element | (Element | null)[] | null | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "null",
                                "2": {
                                  "kind": "object",
                                  "type": "Element",
                                  "schema": {}
                                },
                                "3": {
                                  "kind": "array",
                                  "type": "(Element | null)[]",
                                  "schema": [
                                    {
                                      "kind": "enum",
                                      "type": "Element | null",
                                      "schema": [
                                        "null",
                                        "Element"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "collisionPadding": {
                            "name": "collisionPadding",
                            "global": false,
                            "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "0"
                              }
                            ],
                            "required": false,
                            "type": "number | Partial<Record<Side, number>> | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "number | Partial<Record<Side, number>> | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "number",
                                "2": "Partial<Record<Side, number>>"
                              }
                            }
                          },
                          "arrowPadding": {
                            "name": "arrowPadding",
                            "global": false,
                            "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "0"
                              }
                            ],
                            "required": false,
                            "type": "number | undefined",
                            "schema": "number | undefined"
                          },
                          "hideWhenDetached": {
                            "name": "hideWhenDetached",
                            "global": false,
                            "description": "Whether to hide the content when the trigger becomes fully occluded.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "positionStrategy": {
                            "name": "positionStrategy",
                            "global": false,
                            "description": "The type of CSS position property to use.",
                            "tags": [],
                            "required": false,
                            "type": "'fixed' | 'absolute' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'fixed' | 'absolute' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'fixed'",
                                "2": "'absolute'"
                              }
                            }
                          },
                          "updatePositionStrategy": {
                            "name": "updatePositionStrategy",
                            "global": false,
                            "description": "Strategy to update the position of the floating element on every animation frame.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "'optimized'"
                              }
                            ],
                            "required": false,
                            "type": "'always' | 'optimized' | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "'always' | 'optimized' | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "'always'",
                                "2": "'optimized'"
                              }
                            }
                          },
                          "disableUpdateOnLayoutShift": {
                            "name": "disableUpdateOnLayoutShift",
                            "global": false,
                            "description": "Whether to disable the update position for the content when the layout shifted.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "prioritizePosition": {
                            "name": "prioritizePosition",
                            "global": false,
                            "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "reference": {
                            "name": "reference",
                            "global": false,
                            "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                            "tags": [],
                            "required": false,
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "ReferenceElement | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "Element",
                                "2": {
                                  "kind": "object",
                                  "type": "VirtualElement",
                                  "schema": {
                                    "getBoundingClientRect": {
                                      "name": "getBoundingClientRect",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": true,
                                      "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                      "schema": {
                                        "kind": "event",
                                        "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                      }
                                    },
                                    "getClientRects": {
                                      "name": "getClientRects",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": {
                                            "kind": "event",
                                            "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                          }
                                        }
                                      }
                                    },
                                    "contextElement": {
                                      "name": "contextElement",
                                      "global": false,
                                      "description": "",
                                      "tags": [],
                                      "required": false,
                                      "type": "Element | undefined",
                                      "schema": {
                                        "kind": "enum",
                                        "type": "Element | undefined",
                                        "schema": {
                                          "0": "undefined",
                                          "1": "Element"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "loop": {
                            "name": "loop",
                            "global": false,
                            "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                            "tags": [
                              {
                                "name": "defaultValue",
                                "text": "false"
                              }
                            ],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "onEscapeKeyDown": {
                            "name": "onEscapeKeyDown",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "((event: KeyboardEvent) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((event: KeyboardEvent) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(event: KeyboardEvent): void",
                                  "schema": [
                                    {
                                      "kind": "object",
                                      "type": "KeyboardEvent",
                                      "schema": {}
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "onPointerDownOutside": {
                            "name": "onPointerDownOutside",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(event: PointerDownOutsideEvent): void",
                                  "schema": [
                                    "PointerDownOutsideEvent"
                                  ]
                                }
                              }
                            }
                          },
                          "onFocusOutside": {
                            "name": "onFocusOutside",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "((event: FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((event: FocusOutsideEvent) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(event: FocusOutsideEvent): void",
                                  "schema": [
                                    "FocusOutsideEvent"
                                  ]
                                }
                              }
                            }
                          },
                          "onInteractOutside": {
                            "name": "onInteractOutside",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                  "schema": [
                                    {
                                      "kind": "enum",
                                      "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                      "schema": [
                                        "PointerDownOutsideEvent",
                                        "FocusOutsideEvent"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "onCloseAutoFocus": {
                            "name": "onCloseAutoFocus",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "((event: Event) => void) | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "((event: Event) => void) | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "event",
                                  "type": "(event: Event): void",
                                  "schema": [
                                    {
                                      "kind": "object",
                                      "type": "Event",
                                      "schema": {}
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "kbds": {
                  "name": "kbds",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(string | undefined)[] | PKbdProps[] | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "array",
                        "type": "(string | undefined)[]",
                        "schema": [
                          "string | undefined"
                        ]
                      },
                      "2": {
                        "kind": "array",
                        "type": "PKbdProps[]",
                        "schema": [
                          {
                            "kind": "object",
                            "type": "PKbdProps",
                            "schema": {
                              "as": {
                                "name": "as",
                                "global": false,
                                "description": "The element or component this component should render as.",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'kbd'"
                                  }
                                ],
                                "required": false,
                                "type": "APrimitiveAsTag | Component | undefined",
                                "schema": "APrimitiveAsTag | Component | undefined"
                              },
                              "value": {
                                "name": "value",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "string | undefined",
                                "schema": "string | undefined"
                              },
                              "color": {
                                "name": "color",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'neutral'"
                                  }
                                ],
                                "required": false,
                                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                              },
                              "variant": {
                                "name": "variant",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'outline'"
                                  }
                                ],
                                "required": false,
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'solid'",
                                    "2": "'outline'",
                                    "3": "'soft'",
                                    "4": "'subtle'"
                                  }
                                }
                              },
                              "size": {
                                "name": "size",
                                "global": false,
                                "description": "",
                                "tags": [
                                  {
                                    "name": "defaultValue",
                                    "text": "'md'"
                                  }
                                ],
                                "required": false,
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "kind": "enum",
                                  "type": "'md' | 'sm' | 'lg' | undefined",
                                  "schema": {
                                    "0": "undefined",
                                    "1": "'md'",
                                    "2": "'sm'",
                                    "3": "'lg'"
                                  }
                                }
                              },
                              "class": {
                                "name": "class",
                                "global": false,
                                "description": "",
                                "tags": [],
                                "required": false,
                                "type": "any",
                                "schema": "any"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "type": {
                  "name": "type",
                  "global": false,
                  "description": "The item type.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'link'"
                    }
                  ],
                  "required": false,
                  "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'label'",
                      "2": "'link'",
                      "3": "'separator'",
                      "4": "'checkbox'"
                    }
                  }
                },
                "slot": {
                  "name": "slot",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "loading": {
                  "name": "loading",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "disabled": {
                  "name": "disabled",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "checked": {
                  "name": "checked",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "open": {
                  "name": "open",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "defaultOpen": {
                  "name": "defaultOpen",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "children": {
                  "name": "children",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                  "schema": "ArrayOrNested<PDropdownMenuItem> | undefined"
                },
                "onSelect": {
                  "name": "onSelect",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "((event: Event) => void) | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "event",
                        "type": "(event: Event): void",
                        "schema": []
                      }
                    }
                  }
                },
                "onUpdateChecked": {
                  "name": "onUpdateChecked",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "((checked: boolean) => void) | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "((checked: boolean) => void) | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": {
                        "kind": "event",
                        "type": "(checked: boolean): void",
                        "schema": []
                      }
                    }
                  }
                },
                "class": {
                  "name": "class",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "any",
                  "schema": "any"
                },
                "pohon": {
                  "name": "pohon",
                  "global": false,
                  "description": "",
                  "tags": [],
                  "required": false,
                  "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'>"
                    }
                  }
                },
                "as": {
                  "name": "as",
                  "global": false,
                  "description": "The element or component this component should render as when not a link.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "'button'"
                    }
                  ],
                  "required": false,
                  "type": "APrimitiveAsTag | Component | undefined",
                  "schema": "APrimitiveAsTag | Component | undefined"
                },
                "replace": {
                  "name": "replace",
                  "global": false,
                  "description": "Calls `router.replace` instead of `router.push`.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "to": {
                  "name": "to",
                  "global": false,
                  "description": "Route Location the link should navigate to when clicked on.",
                  "tags": [],
                  "required": false,
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "string",
                      "2": {
                        "kind": "object",
                        "type": "RouteLocationAsRelativeGeneric",
                        "schema": {
                          "name": {
                            "name": "name",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "kind": "enum",
                              "type": "RouteRecordNameGeneric",
                              "schema": {
                                "0": "undefined",
                                "1": "string",
                                "2": "symbol"
                              }
                            }
                          },
                          "params": {
                            "name": "params",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "RouteParamsRawGeneric | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "RouteParamsRawGeneric"
                              }
                            }
                          },
                          "path": {
                            "name": "path",
                            "global": false,
                            "description": "A relative path to the current location. This property should be removed",
                            "tags": [],
                            "required": false,
                            "type": "undefined",
                            "schema": "undefined"
                          },
                          "query": {
                            "name": "query",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "LocationQueryRaw | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": "LocationQueryRaw"
                              }
                            }
                          },
                          "hash": {
                            "name": "hash",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "replace": {
                            "name": "replace",
                            "global": false,
                            "description": "Replace the entry in the history instead of pushing a new entry",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "force": {
                            "name": "force",
                            "global": false,
                            "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "state": {
                            "name": "state",
                            "global": false,
                            "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                            "tags": [],
                            "required": false,
                            "type": "HistoryState | undefined",
                            "schema": {
                              "kind": "enum",
                              "type": "HistoryState | undefined",
                              "schema": {
                                "0": "undefined",
                                "1": {
                                  "kind": "object",
                                  "type": "HistoryState",
                                  "schema": {}
                                }
                              }
                            }
                          }
                        }
                      },
                      "3": {
                        "kind": "object",
                        "type": "RouteLocationAsPathGeneric",
                        "schema": {
                          "path": {
                            "name": "path",
                            "global": false,
                            "description": "Percentage encoded pathname section of the URL.",
                            "tags": [],
                            "required": true,
                            "type": "string",
                            "schema": "string"
                          },
                          "query": {
                            "name": "query",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "LocationQueryRaw | undefined",
                            "schema": "LocationQueryRaw | undefined"
                          },
                          "hash": {
                            "name": "hash",
                            "global": false,
                            "description": "",
                            "tags": [],
                            "required": false,
                            "type": "string | undefined",
                            "schema": "string | undefined"
                          },
                          "replace": {
                            "name": "replace",
                            "global": false,
                            "description": "Replace the entry in the history instead of pushing a new entry",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "force": {
                            "name": "force",
                            "global": false,
                            "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                            "tags": [],
                            "required": false,
                            "type": "boolean | undefined",
                            "schema": "boolean | undefined"
                          },
                          "state": {
                            "name": "state",
                            "global": false,
                            "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                            "tags": [],
                            "required": false,
                            "type": "HistoryState | undefined",
                            "schema": "HistoryState | undefined"
                          }
                        }
                      }
                    }
                  }
                },
                "activeClass": {
                  "name": "activeClass",
                  "global": false,
                  "description": "Class to apply when the link is active",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "exactActiveClass": {
                  "name": "exactActiveClass",
                  "global": false,
                  "description": "Class to apply when the link is exact active",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "ariaCurrentValue": {
                  "name": "ariaCurrentValue",
                  "global": false,
                  "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                  "tags": [
                    {
                      "name": "defaultValue",
                      "text": "`'page'`"
                    }
                  ],
                  "required": false,
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'page'",
                      "2": "'step'",
                      "3": "'location'",
                      "4": "'date'",
                      "5": "'time'",
                      "6": "'true'",
                      "7": "'false'"
                    }
                  }
                },
                "viewTransition": {
                  "name": "viewTransition",
                  "global": false,
                  "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "active": {
                  "name": "active",
                  "global": false,
                  "description": "Force the link to be active independent of the current route.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "exact": {
                  "name": "exact",
                  "global": false,
                  "description": "Will only be active if the current route is an exact match.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "exactQuery": {
                  "name": "exactQuery",
                  "global": false,
                  "description": "Allows controlling how the current route query sets the link as active.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "boolean | 'partial' | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "false",
                      "2": "true",
                      "3": "'partial'"
                    }
                  }
                },
                "exactHash": {
                  "name": "exactHash",
                  "global": false,
                  "description": "Will only be active if the current route hash is an exact match.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "inactiveClass": {
                  "name": "inactiveClass",
                  "global": false,
                  "description": "The class to apply when the link is inactive.",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "href": {
                  "name": "href",
                  "global": false,
                  "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                  "tags": [],
                  "required": false,
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
                },
                "external": {
                  "name": "external",
                  "global": false,
                  "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "target": {
                  "name": "target",
                  "global": false,
                  "description": "Where to display the linked URL, as the name for a browsing context.",
                  "tags": [],
                  "required": false,
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "null",
                      "2": "string & {}",
                      "3": "'_blank'",
                      "4": "'_parent'",
                      "5": "'_self'",
                      "6": "'_top'"
                    }
                  }
                },
                "rel": {
                  "name": "rel",
                  "global": false,
                  "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                  "tags": [],
                  "required": false,
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "null",
                      "2": "string & {}",
                      "3": "'noopener'",
                      "4": "'noreferrer'",
                      "5": "'nofollow'",
                      "6": "'sponsored'",
                      "7": "'ugc'"
                    }
                  }
                },
                "noRel": {
                  "name": "noRel",
                  "global": false,
                  "description": "If set to true, no rel attribute will be added to the link",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "prefetchedClass": {
                  "name": "prefetchedClass",
                  "global": false,
                  "description": "A class to apply to links that have been prefetched.",
                  "tags": [],
                  "required": false,
                  "type": "string | undefined",
                  "schema": "string | undefined"
                },
                "prefetch": {
                  "name": "prefetch",
                  "global": false,
                  "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                },
                "prefetchOn": {
                  "name": "prefetchOn",
                  "global": false,
                  "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                  "tags": [],
                  "required": false,
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "kind": "enum",
                    "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                    "schema": {
                      "0": "undefined",
                      "1": "'visibility'",
                      "2": "'interaction'",
                      "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                    }
                  }
                },
                "noPrefetch": {
                  "name": "noPrefetch",
                  "global": false,
                  "description": "Escape hatch to disable `prefetch` attribute.",
                  "tags": [],
                  "required": false,
                  "type": "boolean | undefined",
                  "schema": "boolean | undefined"
                }
              }
            }
          ]
        },
        "2": {
          "kind": "array",
          "type": "PDropdownMenuItem[][]",
          "schema": [
            "PDropdownMenuItem[]"
          ]
        }
      }
    }
  },
  {
    "name": "labelKey",
    "global": false,
    "description": "The key used to get the label from the item.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'label'"
      }
    ],
    "required": false,
    "type": "GetItemKeys<ArrayOrNested<PDropdownMenuItem>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "GetItemKeys<ArrayOrNested<PDropdownMenuItem>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "number"
      }
    },
    "default": "'label'"
  },
  {
    "name": "loadingIcon",
    "global": false,
    "description": "The icon displayed when an item is loading.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.loading"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "modal",
    "global": false,
    "description": "The modality of the dropdown menu.\n\nWhen set to `true`, interaction with outside elements will be disabled and only menu content will be visible to screen readers.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "open",
    "global": false,
    "description": "The controlled open state of the menu. Can be used as `v-model:open`.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "portal",
    "global": false,
    "description": "Render the menu in a portal.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "true"
      }
    ],
    "required": false,
    "type": "string | boolean | HTMLElement | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | boolean | HTMLElement | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "false",
        "3": "true",
        "4": {
          "kind": "object",
          "type": "HTMLElement",
          "schema": {}
        }
      }
    },
    "default": "true"
  },
  {
    "name": "size",
    "global": false,
    "description": "",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'md'"
      }
    ],
    "required": false,
    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'md'",
        "2": "'xs'",
        "3": "'sm'",
        "4": "'lg'",
        "5": "'xl'"
      }
    }
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }"
      }
    }
  }
],
  "slots": [
  {
    "name": "default",
    "type": "{ open: boolean; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ open: boolean; }",
      "schema": {
        "open": {
          "name": "open",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "boolean",
          "schema": {
            "kind": "enum",
            "type": "boolean",
            "schema": {
              "0": "false",
              "1": "true"
            }
          }
        }
      }
    }
  },
  {
    "name": "item",
    "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PDropdownMenuItem",
          "schema": {
            "kind": "object",
            "type": "PDropdownMenuItem",
            "schema": {
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "color": {
                "name": "color",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'error'",
                    "2": "'primary'",
                    "3": "'secondary'",
                    "4": "'success'",
                    "5": "'info'",
                    "6": "'warning'",
                    "7": "'neutral'"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "content": {
                "name": "content",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
                      "schema": {
                        "sticky": {
                          "name": "sticky",
                          "global": false,
                          "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'partial'"
                            }
                          ],
                          "required": false,
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'partial' | 'always' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'partial'",
                              "2": "'always'"
                            }
                          }
                        },
                        "side": {
                          "name": "side",
                          "global": false,
                          "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'top'"
                            }
                          ],
                          "required": false,
                          "type": "Side | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Side | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'top'",
                              "2": "'bottom'",
                              "3": "'left'",
                              "4": "'right'"
                            }
                          }
                        },
                        "sideOffset": {
                          "name": "sideOffset",
                          "global": false,
                          "description": "The distance in pixels from the trigger.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number"
                            }
                          }
                        },
                        "sideFlip": {
                          "name": "sideFlip",
                          "global": false,
                          "description": "Flip to the opposite side when colliding with boundary.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "align": {
                          "name": "align",
                          "global": false,
                          "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'center'"
                            }
                          ],
                          "required": false,
                          "type": "Align | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Align | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'center'",
                              "2": "'start'",
                              "3": "'end'"
                            }
                          }
                        },
                        "alignOffset": {
                          "name": "alignOffset",
                          "global": false,
                          "description": "An offset in pixels from the `start` or `end` alignment options.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "alignFlip": {
                          "name": "alignFlip",
                          "global": false,
                          "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "avoidCollisions": {
                          "name": "avoidCollisions",
                          "global": false,
                          "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "collisionBoundary": {
                          "name": "collisionBoundary",
                          "global": false,
                          "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "Array"
                            }
                          ],
                          "required": false,
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Element | (Element | null)[] | null | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "null",
                              "2": {
                                "kind": "object",
                                "type": "Element",
                                "schema": {}
                              },
                              "3": {
                                "kind": "array",
                                "type": "(Element | null)[]",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "Element | null",
                                    "schema": [
                                      "null",
                                      "Element"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "collisionPadding": {
                          "name": "collisionPadding",
                          "global": false,
                          "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | Partial<Record<Side, number>> | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number",
                              "2": "Partial<Record<Side, number>>"
                            }
                          }
                        },
                        "arrowPadding": {
                          "name": "arrowPadding",
                          "global": false,
                          "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "hideWhenDetached": {
                          "name": "hideWhenDetached",
                          "global": false,
                          "description": "Whether to hide the content when the trigger becomes fully occluded.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "positionStrategy": {
                          "name": "positionStrategy",
                          "global": false,
                          "description": "The type of CSS position property to use.",
                          "tags": [],
                          "required": false,
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'fixed' | 'absolute' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'fixed'",
                              "2": "'absolute'"
                            }
                          }
                        },
                        "updatePositionStrategy": {
                          "name": "updatePositionStrategy",
                          "global": false,
                          "description": "Strategy to update the position of the floating element on every animation frame.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'optimized'"
                            }
                          ],
                          "required": false,
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'always' | 'optimized' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'always'",
                              "2": "'optimized'"
                            }
                          }
                        },
                        "disableUpdateOnLayoutShift": {
                          "name": "disableUpdateOnLayoutShift",
                          "global": false,
                          "description": "Whether to disable the update position for the content when the layout shifted.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "prioritizePosition": {
                          "name": "prioritizePosition",
                          "global": false,
                          "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "reference": {
                          "name": "reference",
                          "global": false,
                          "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                          "tags": [],
                          "required": false,
                          "type": "ReferenceElement | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "Element",
                              "2": {
                                "kind": "object",
                                "type": "VirtualElement",
                                "schema": {
                                  "getBoundingClientRect": {
                                    "name": "getBoundingClientRect",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                    "schema": {
                                      "kind": "event",
                                      "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                    }
                                  },
                                  "getClientRects": {
                                    "name": "getClientRects",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                        }
                                      }
                                    }
                                  },
                                  "contextElement": {
                                    "name": "contextElement",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "Element | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "Element | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "Element"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "loop": {
                          "name": "loop",
                          "global": false,
                          "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "onEscapeKeyDown": {
                          "name": "onEscapeKeyDown",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: KeyboardEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: KeyboardEvent): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "KeyboardEvent",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onPointerDownOutside": {
                          "name": "onPointerDownOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent): void",
                                "schema": [
                                  "PointerDownOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onFocusOutside": {
                          "name": "onFocusOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: FocusOutsideEvent): void",
                                "schema": [
                                  "FocusOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onInteractOutside": {
                          "name": "onInteractOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                    "schema": [
                                      "PointerDownOutsideEvent",
                                      "FocusOutsideEvent"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onCloseAutoFocus": {
                          "name": "onCloseAutoFocus",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: Event) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: Event): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "Event",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "type": {
                "name": "type",
                "global": false,
                "description": "The item type.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'link'"
                  }
                ],
                "required": false,
                "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'label'",
                    "2": "'link'",
                    "3": "'separator'",
                    "4": "'checkbox'"
                  }
                }
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "checked": {
                "name": "checked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "open": {
                "name": "open",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "defaultOpen": {
                "name": "defaultOpen",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[]",
                      "schema": [
                        "PDropdownMenuItem"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[][]",
                      "schema": [
                        "PDropdownMenuItem[]"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event: Event) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event: Event): void",
                      "schema": []
                    }
                  }
                }
              },
              "onUpdateChecked": {
                "name": "onUpdateChecked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((checked: boolean) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((checked: boolean) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(checked: boolean): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "active": {
          "name": "active",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "boolean | undefined",
          "schema": "boolean | undefined"
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-leading",
    "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PDropdownMenuItem",
          "schema": {
            "kind": "object",
            "type": "PDropdownMenuItem",
            "schema": {
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "color": {
                "name": "color",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'error'",
                    "2": "'primary'",
                    "3": "'secondary'",
                    "4": "'success'",
                    "5": "'info'",
                    "6": "'warning'",
                    "7": "'neutral'"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "content": {
                "name": "content",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
                      "schema": {
                        "sticky": {
                          "name": "sticky",
                          "global": false,
                          "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'partial'"
                            }
                          ],
                          "required": false,
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'partial' | 'always' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'partial'",
                              "2": "'always'"
                            }
                          }
                        },
                        "side": {
                          "name": "side",
                          "global": false,
                          "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'top'"
                            }
                          ],
                          "required": false,
                          "type": "Side | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Side | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'top'",
                              "2": "'bottom'",
                              "3": "'left'",
                              "4": "'right'"
                            }
                          }
                        },
                        "sideOffset": {
                          "name": "sideOffset",
                          "global": false,
                          "description": "The distance in pixels from the trigger.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number"
                            }
                          }
                        },
                        "sideFlip": {
                          "name": "sideFlip",
                          "global": false,
                          "description": "Flip to the opposite side when colliding with boundary.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "align": {
                          "name": "align",
                          "global": false,
                          "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'center'"
                            }
                          ],
                          "required": false,
                          "type": "Align | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Align | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'center'",
                              "2": "'start'",
                              "3": "'end'"
                            }
                          }
                        },
                        "alignOffset": {
                          "name": "alignOffset",
                          "global": false,
                          "description": "An offset in pixels from the `start` or `end` alignment options.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "alignFlip": {
                          "name": "alignFlip",
                          "global": false,
                          "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "avoidCollisions": {
                          "name": "avoidCollisions",
                          "global": false,
                          "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "collisionBoundary": {
                          "name": "collisionBoundary",
                          "global": false,
                          "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "Array"
                            }
                          ],
                          "required": false,
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Element | (Element | null)[] | null | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "null",
                              "2": {
                                "kind": "object",
                                "type": "Element",
                                "schema": {}
                              },
                              "3": {
                                "kind": "array",
                                "type": "(Element | null)[]",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "Element | null",
                                    "schema": [
                                      "null",
                                      "Element"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "collisionPadding": {
                          "name": "collisionPadding",
                          "global": false,
                          "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | Partial<Record<Side, number>> | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number",
                              "2": "Partial<Record<Side, number>>"
                            }
                          }
                        },
                        "arrowPadding": {
                          "name": "arrowPadding",
                          "global": false,
                          "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "hideWhenDetached": {
                          "name": "hideWhenDetached",
                          "global": false,
                          "description": "Whether to hide the content when the trigger becomes fully occluded.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "positionStrategy": {
                          "name": "positionStrategy",
                          "global": false,
                          "description": "The type of CSS position property to use.",
                          "tags": [],
                          "required": false,
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'fixed' | 'absolute' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'fixed'",
                              "2": "'absolute'"
                            }
                          }
                        },
                        "updatePositionStrategy": {
                          "name": "updatePositionStrategy",
                          "global": false,
                          "description": "Strategy to update the position of the floating element on every animation frame.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'optimized'"
                            }
                          ],
                          "required": false,
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'always' | 'optimized' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'always'",
                              "2": "'optimized'"
                            }
                          }
                        },
                        "disableUpdateOnLayoutShift": {
                          "name": "disableUpdateOnLayoutShift",
                          "global": false,
                          "description": "Whether to disable the update position for the content when the layout shifted.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "prioritizePosition": {
                          "name": "prioritizePosition",
                          "global": false,
                          "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "reference": {
                          "name": "reference",
                          "global": false,
                          "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                          "tags": [],
                          "required": false,
                          "type": "ReferenceElement | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "Element",
                              "2": {
                                "kind": "object",
                                "type": "VirtualElement",
                                "schema": {
                                  "getBoundingClientRect": {
                                    "name": "getBoundingClientRect",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                    "schema": {
                                      "kind": "event",
                                      "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                    }
                                  },
                                  "getClientRects": {
                                    "name": "getClientRects",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                        }
                                      }
                                    }
                                  },
                                  "contextElement": {
                                    "name": "contextElement",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "Element | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "Element | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "Element"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "loop": {
                          "name": "loop",
                          "global": false,
                          "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "onEscapeKeyDown": {
                          "name": "onEscapeKeyDown",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: KeyboardEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: KeyboardEvent): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "KeyboardEvent",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onPointerDownOutside": {
                          "name": "onPointerDownOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent): void",
                                "schema": [
                                  "PointerDownOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onFocusOutside": {
                          "name": "onFocusOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: FocusOutsideEvent): void",
                                "schema": [
                                  "FocusOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onInteractOutside": {
                          "name": "onInteractOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                    "schema": [
                                      "PointerDownOutsideEvent",
                                      "FocusOutsideEvent"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onCloseAutoFocus": {
                          "name": "onCloseAutoFocus",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: Event) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: Event): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "Event",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "type": {
                "name": "type",
                "global": false,
                "description": "The item type.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'link'"
                  }
                ],
                "required": false,
                "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'label'",
                    "2": "'link'",
                    "3": "'separator'",
                    "4": "'checkbox'"
                  }
                }
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "checked": {
                "name": "checked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "open": {
                "name": "open",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "defaultOpen": {
                "name": "defaultOpen",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[]",
                      "schema": [
                        "PDropdownMenuItem"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[][]",
                      "schema": [
                        "PDropdownMenuItem[]"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event: Event) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event: Event): void",
                      "schema": []
                    }
                  }
                }
              },
              "onUpdateChecked": {
                "name": "onUpdateChecked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((checked: boolean) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((checked: boolean) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(checked: boolean): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "active": {
          "name": "active",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "boolean | undefined",
          "schema": "boolean | undefined"
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-label",
    "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PDropdownMenuItem",
          "schema": {
            "kind": "object",
            "type": "PDropdownMenuItem",
            "schema": {
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "color": {
                "name": "color",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'error'",
                    "2": "'primary'",
                    "3": "'secondary'",
                    "4": "'success'",
                    "5": "'info'",
                    "6": "'warning'",
                    "7": "'neutral'"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "content": {
                "name": "content",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
                      "schema": {
                        "sticky": {
                          "name": "sticky",
                          "global": false,
                          "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'partial'"
                            }
                          ],
                          "required": false,
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'partial' | 'always' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'partial'",
                              "2": "'always'"
                            }
                          }
                        },
                        "side": {
                          "name": "side",
                          "global": false,
                          "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'top'"
                            }
                          ],
                          "required": false,
                          "type": "Side | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Side | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'top'",
                              "2": "'bottom'",
                              "3": "'left'",
                              "4": "'right'"
                            }
                          }
                        },
                        "sideOffset": {
                          "name": "sideOffset",
                          "global": false,
                          "description": "The distance in pixels from the trigger.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number"
                            }
                          }
                        },
                        "sideFlip": {
                          "name": "sideFlip",
                          "global": false,
                          "description": "Flip to the opposite side when colliding with boundary.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "align": {
                          "name": "align",
                          "global": false,
                          "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'center'"
                            }
                          ],
                          "required": false,
                          "type": "Align | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Align | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'center'",
                              "2": "'start'",
                              "3": "'end'"
                            }
                          }
                        },
                        "alignOffset": {
                          "name": "alignOffset",
                          "global": false,
                          "description": "An offset in pixels from the `start` or `end` alignment options.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "alignFlip": {
                          "name": "alignFlip",
                          "global": false,
                          "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "avoidCollisions": {
                          "name": "avoidCollisions",
                          "global": false,
                          "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "collisionBoundary": {
                          "name": "collisionBoundary",
                          "global": false,
                          "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "Array"
                            }
                          ],
                          "required": false,
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Element | (Element | null)[] | null | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "null",
                              "2": {
                                "kind": "object",
                                "type": "Element",
                                "schema": {}
                              },
                              "3": {
                                "kind": "array",
                                "type": "(Element | null)[]",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "Element | null",
                                    "schema": [
                                      "null",
                                      "Element"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "collisionPadding": {
                          "name": "collisionPadding",
                          "global": false,
                          "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | Partial<Record<Side, number>> | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number",
                              "2": "Partial<Record<Side, number>>"
                            }
                          }
                        },
                        "arrowPadding": {
                          "name": "arrowPadding",
                          "global": false,
                          "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "hideWhenDetached": {
                          "name": "hideWhenDetached",
                          "global": false,
                          "description": "Whether to hide the content when the trigger becomes fully occluded.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "positionStrategy": {
                          "name": "positionStrategy",
                          "global": false,
                          "description": "The type of CSS position property to use.",
                          "tags": [],
                          "required": false,
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'fixed' | 'absolute' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'fixed'",
                              "2": "'absolute'"
                            }
                          }
                        },
                        "updatePositionStrategy": {
                          "name": "updatePositionStrategy",
                          "global": false,
                          "description": "Strategy to update the position of the floating element on every animation frame.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'optimized'"
                            }
                          ],
                          "required": false,
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'always' | 'optimized' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'always'",
                              "2": "'optimized'"
                            }
                          }
                        },
                        "disableUpdateOnLayoutShift": {
                          "name": "disableUpdateOnLayoutShift",
                          "global": false,
                          "description": "Whether to disable the update position for the content when the layout shifted.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "prioritizePosition": {
                          "name": "prioritizePosition",
                          "global": false,
                          "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "reference": {
                          "name": "reference",
                          "global": false,
                          "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                          "tags": [],
                          "required": false,
                          "type": "ReferenceElement | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "Element",
                              "2": {
                                "kind": "object",
                                "type": "VirtualElement",
                                "schema": {
                                  "getBoundingClientRect": {
                                    "name": "getBoundingClientRect",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                    "schema": {
                                      "kind": "event",
                                      "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                    }
                                  },
                                  "getClientRects": {
                                    "name": "getClientRects",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                        }
                                      }
                                    }
                                  },
                                  "contextElement": {
                                    "name": "contextElement",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "Element | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "Element | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "Element"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "loop": {
                          "name": "loop",
                          "global": false,
                          "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "onEscapeKeyDown": {
                          "name": "onEscapeKeyDown",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: KeyboardEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: KeyboardEvent): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "KeyboardEvent",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onPointerDownOutside": {
                          "name": "onPointerDownOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent): void",
                                "schema": [
                                  "PointerDownOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onFocusOutside": {
                          "name": "onFocusOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: FocusOutsideEvent): void",
                                "schema": [
                                  "FocusOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onInteractOutside": {
                          "name": "onInteractOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                    "schema": [
                                      "PointerDownOutsideEvent",
                                      "FocusOutsideEvent"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onCloseAutoFocus": {
                          "name": "onCloseAutoFocus",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: Event) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: Event): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "Event",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "type": {
                "name": "type",
                "global": false,
                "description": "The item type.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'link'"
                  }
                ],
                "required": false,
                "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'label'",
                    "2": "'link'",
                    "3": "'separator'",
                    "4": "'checkbox'"
                  }
                }
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "checked": {
                "name": "checked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "open": {
                "name": "open",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "defaultOpen": {
                "name": "defaultOpen",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[]",
                      "schema": [
                        "PDropdownMenuItem"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[][]",
                      "schema": [
                        "PDropdownMenuItem[]"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event: Event) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event: Event): void",
                      "schema": []
                    }
                  }
                }
              },
              "onUpdateChecked": {
                "name": "onUpdateChecked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((checked: boolean) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((checked: boolean) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(checked: boolean): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "active": {
          "name": "active",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "boolean | undefined",
          "schema": "boolean | undefined"
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "item-trailing",
    "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
    "description": "",
    "schema": {
      "kind": "object",
      "type": "{ item: PDropdownMenuItem; active?: boolean | undefined; index: number; }",
      "schema": {
        "item": {
          "name": "item",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "PDropdownMenuItem",
          "schema": {
            "kind": "object",
            "type": "PDropdownMenuItem",
            "schema": {
              "label": {
                "name": "label",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string"
                  }
                }
              },
              "icon": {
                "name": "icon",
                "global": false,
                "description": "",
                "tags": [
                  {
                    "name": "IconifyIcon"
                  }
                ],
                "required": false,
                "type": "string | object | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | object | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": "object"
                  }
                }
              },
              "color": {
                "name": "color",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'error'",
                    "2": "'primary'",
                    "3": "'secondary'",
                    "4": "'success'",
                    "5": "'info'",
                    "6": "'warning'",
                    "7": "'neutral'"
                  }
                }
              },
              "avatar": {
                "name": "avatar",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "PAvatarProps | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "PAvatarProps | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "PAvatarProps",
                      "schema": {
                        "as": {
                          "name": "as",
                          "global": false,
                          "description": "The element or component this component should render as.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'span'"
                            }
                          ],
                          "required": false,
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "APrimitiveAsTag | Component | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'a'",
                              "2": "'button'",
                              "3": "'div'",
                              "4": "'form'",
                              "5": "'h2'",
                              "6": "'h3'",
                              "7": "'img'",
                              "8": "'input'",
                              "9": "'label'",
                              "10": "'li'",
                              "11": "'nav'",
                              "12": "'ol'",
                              "13": "'p'",
                              "14": "'span'",
                              "15": "'svg'",
                              "16": "'template'",
                              "17": "'ul'",
                              "18": {
                                "kind": "object",
                                "type": "string & {}",
                                "schema": {}
                              },
                              "19": {
                                "kind": "object",
                                "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                                "schema": {
                                  "beforeRouteEnter": {
                                    "name": "beforeRouteEnter",
                                    "global": false,
                                    "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuardWithThis<undefined> | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteUpdate": {
                                    "name": "beforeRouteUpdate",
                                    "global": false,
                                    "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "NavigationGuard | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  },
                                  "beforeRouteLeave": {
                                    "name": "beforeRouteLeave",
                                    "global": false,
                                    "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                    "tags": [
                                      {
                                        "name": "param",
                                        "text": "to - RouteLocationRaw we are navigating to"
                                      },
                                      {
                                        "name": "param",
                                        "text": "from - RouteLocationRaw we are navigating from"
                                      },
                                      {
                                        "name": "param",
                                        "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                      }
                                    ],
                                    "required": false,
                                    "type": "NavigationGuard | undefined",
                                    "schema": "NavigationGuard | undefined"
                                  },
                                  "head": {
                                    "name": "head",
                                    "global": false,
                                    "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                    "tags": [],
                                    "required": false,
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                          "schema": []
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "20": {
                                "kind": "event",
                                "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                                "schema": []
                              },
                              "21": {
                                "kind": "object",
                                "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                                "schema": {}
                              }
                            }
                          }
                        },
                        "src": {
                          "name": "src",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "alt": {
                          "name": "alt",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "icon": {
                          "name": "icon",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "IconifyIcon"
                            }
                          ],
                          "required": false,
                          "type": "string | object | undefined",
                          "schema": "string | object | undefined"
                        },
                        "text": {
                          "name": "text",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "size": {
                          "name": "size",
                          "global": false,
                          "description": "",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'md'"
                            }
                          ],
                          "required": false,
                          "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'md'",
                              "2": "'xs'",
                              "3": "'sm'",
                              "4": "'lg'",
                              "5": "'xl'",
                              "6": "'3xs'",
                              "7": "'2xs'",
                              "8": "'2xl'",
                              "9": "'3xl'"
                            }
                          }
                        },
                        "chip": {
                          "name": "chip",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "boolean | PChipProps | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "false",
                              "2": "true",
                              "3": {
                                "kind": "object",
                                "type": "PChipProps",
                                "schema": {
                                  "as": {
                                    "name": "as",
                                    "global": false,
                                    "description": "The element or component this component should render as.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'div'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "APrimitiveAsTag | Component | undefined",
                                    "schema": "APrimitiveAsTag | Component | undefined"
                                  },
                                  "text": {
                                    "name": "text",
                                    "global": false,
                                    "description": "Display some text inside the chip.",
                                    "tags": [],
                                    "required": false,
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "string | number | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "string",
                                        "2": "number"
                                      }
                                    }
                                  },
                                  "color": {
                                    "name": "color",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'primary'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                    "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                  },
                                  "size": {
                                    "name": "size",
                                    "global": false,
                                    "description": "",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'md'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined",
                                    "schema": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl' | undefined"
                                  },
                                  "position": {
                                    "name": "position",
                                    "global": false,
                                    "description": "The position of the chip.",
                                    "tags": [
                                      {
                                        "name": "defaultValue",
                                        "text": "'top-right'"
                                      }
                                    ],
                                    "required": false,
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "'top-right'",
                                        "2": "'bottom-right'",
                                        "3": "'top-left'",
                                        "4": "'bottom-left'"
                                      }
                                    }
                                  },
                                  "inset": {
                                    "name": "inset",
                                    "global": false,
                                    "description": "When `true`, keep the chip inside the component for rounded elements.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "boolean | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "false",
                                        "2": "true"
                                      }
                                    }
                                  },
                                  "standalone": {
                                    "name": "standalone",
                                    "global": false,
                                    "description": "When `true`, render the chip relatively to the parent.",
                                    "tags": [],
                                    "required": false,
                                    "type": "boolean | undefined",
                                    "schema": "boolean | undefined"
                                  },
                                  "class": {
                                    "name": "class",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "any",
                                    "schema": "any"
                                  },
                                  "pohon": {
                                    "name": "pohon",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "{ root?: ClassValue; base?: ClassValue; }"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "class": {
                          "name": "class",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "style": {
                          "name": "style",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "any",
                          "schema": "any"
                        },
                        "pohon": {
                          "name": "pohon",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "content": {
                "name": "content",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "object",
                      "type": "Omit<ADropdownMenuContentProps, 'as' | 'asChild' | 'forceMount'> & Partial<EmitsToProps<AMenuContentEmits>>",
                      "schema": {
                        "sticky": {
                          "name": "sticky",
                          "global": false,
                          "description": "The sticky behavior on the align axis. `partial` will keep the\ncontent in the boundary as long as the trigger is at least partially\nin the boundary whilst 'always' will keep the content in the boundary\nregardless.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'partial'"
                            }
                          ],
                          "required": false,
                          "type": "'partial' | 'always' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'partial' | 'always' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'partial'",
                              "2": "'always'"
                            }
                          }
                        },
                        "side": {
                          "name": "side",
                          "global": false,
                          "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and avoidCollisions\nis enabled.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'top'"
                            }
                          ],
                          "required": false,
                          "type": "Side | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Side | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'top'",
                              "2": "'bottom'",
                              "3": "'left'",
                              "4": "'right'"
                            }
                          }
                        },
                        "sideOffset": {
                          "name": "sideOffset",
                          "global": false,
                          "description": "The distance in pixels from the trigger.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number"
                            }
                          }
                        },
                        "sideFlip": {
                          "name": "sideFlip",
                          "global": false,
                          "description": "Flip to the opposite side when colliding with boundary.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "align": {
                          "name": "align",
                          "global": false,
                          "description": "The preferred alignment against the trigger.\nMay change when collisions occur.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'center'"
                            }
                          ],
                          "required": false,
                          "type": "Align | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Align | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'center'",
                              "2": "'start'",
                              "3": "'end'"
                            }
                          }
                        },
                        "alignOffset": {
                          "name": "alignOffset",
                          "global": false,
                          "description": "An offset in pixels from the `start` or `end` alignment options.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "alignFlip": {
                          "name": "alignFlip",
                          "global": false,
                          "description": "Flip alignment when colliding with boundary.\nMay only occur when `prioritizePosition` is true.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "avoidCollisions": {
                          "name": "avoidCollisions",
                          "global": false,
                          "description": "When `true`, overrides the side and align preferences\nto prevent collisions with boundary edges.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "true"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "collisionBoundary": {
                          "name": "collisionBoundary",
                          "global": false,
                          "description": "The element used as the collision boundary. By default\nthis is the viewport, though you can provide additional\nelement(s) to be included in this check.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "Array"
                            }
                          ],
                          "required": false,
                          "type": "Element | (Element | null)[] | null | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "Element | (Element | null)[] | null | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "null",
                              "2": {
                                "kind": "object",
                                "type": "Element",
                                "schema": {}
                              },
                              "3": {
                                "kind": "array",
                                "type": "(Element | null)[]",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "Element | null",
                                    "schema": [
                                      "null",
                                      "Element"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "collisionPadding": {
                          "name": "collisionPadding",
                          "global": false,
                          "description": "The distance in pixels from the boundary edges where collision\ndetection should occur. Accepts a number (same for all sides),\nor a partial padding object, for example: { top: 20, left: 20 }.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | Partial<Record<Side, number>> | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "number | Partial<Record<Side, number>> | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "number",
                              "2": "Partial<Record<Side, number>>"
                            }
                          }
                        },
                        "arrowPadding": {
                          "name": "arrowPadding",
                          "global": false,
                          "description": "The padding between the arrow and the edges of the content.\nIf your content has border-radius, this will prevent it from\noverflowing the corners.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "0"
                            }
                          ],
                          "required": false,
                          "type": "number | undefined",
                          "schema": "number | undefined"
                        },
                        "hideWhenDetached": {
                          "name": "hideWhenDetached",
                          "global": false,
                          "description": "Whether to hide the content when the trigger becomes fully occluded.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "positionStrategy": {
                          "name": "positionStrategy",
                          "global": false,
                          "description": "The type of CSS position property to use.",
                          "tags": [],
                          "required": false,
                          "type": "'fixed' | 'absolute' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'fixed' | 'absolute' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'fixed'",
                              "2": "'absolute'"
                            }
                          }
                        },
                        "updatePositionStrategy": {
                          "name": "updatePositionStrategy",
                          "global": false,
                          "description": "Strategy to update the position of the floating element on every animation frame.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "'optimized'"
                            }
                          ],
                          "required": false,
                          "type": "'always' | 'optimized' | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "'always' | 'optimized' | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "'always'",
                              "2": "'optimized'"
                            }
                          }
                        },
                        "disableUpdateOnLayoutShift": {
                          "name": "disableUpdateOnLayoutShift",
                          "global": false,
                          "description": "Whether to disable the update position for the content when the layout shifted.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "prioritizePosition": {
                          "name": "prioritizePosition",
                          "global": false,
                          "description": "Force content to be position within the viewport.\n\nMight overlap the reference element, which may not be desired.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "reference": {
                          "name": "reference",
                          "global": false,
                          "description": "The custom element or virtual element that will be set as the reference\nto position the floating element.\n\nIf provided, it will replace the default anchor element.",
                          "tags": [],
                          "required": false,
                          "type": "ReferenceElement | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "ReferenceElement | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "Element",
                              "2": {
                                "kind": "object",
                                "type": "VirtualElement",
                                "schema": {
                                  "getBoundingClientRect": {
                                    "name": "getBoundingClientRect",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": true,
                                    "type": "() => { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }",
                                    "schema": {
                                      "kind": "event",
                                      "type": "(): { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }"
                                    }
                                  },
                                  "getClientRects": {
                                    "name": "getClientRects",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "(() => DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]) | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": {
                                          "kind": "event",
                                          "type": "(): DOMRectList | { x: number; y: number; width: number; height: number; top: number; bottom: number; left: number; right: number; }[]"
                                        }
                                      }
                                    }
                                  },
                                  "contextElement": {
                                    "name": "contextElement",
                                    "global": false,
                                    "description": "",
                                    "tags": [],
                                    "required": false,
                                    "type": "Element | undefined",
                                    "schema": {
                                      "kind": "enum",
                                      "type": "Element | undefined",
                                      "schema": {
                                        "0": "undefined",
                                        "1": "Element"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "loop": {
                          "name": "loop",
                          "global": false,
                          "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                          "tags": [
                            {
                              "name": "defaultValue",
                              "text": "false"
                            }
                          ],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "onEscapeKeyDown": {
                          "name": "onEscapeKeyDown",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: KeyboardEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: KeyboardEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: KeyboardEvent): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "KeyboardEvent",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onPointerDownOutside": {
                          "name": "onPointerDownOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent): void",
                                "schema": [
                                  "PointerDownOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onFocusOutside": {
                          "name": "onFocusOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: FocusOutsideEvent): void",
                                "schema": [
                                  "FocusOutsideEvent"
                                ]
                              }
                            }
                          }
                        },
                        "onInteractOutside": {
                          "name": "onInteractOutside",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: PointerDownOutsideEvent | FocusOutsideEvent) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent): void",
                                "schema": [
                                  {
                                    "kind": "enum",
                                    "type": "PointerDownOutsideEvent | FocusOutsideEvent",
                                    "schema": [
                                      "PointerDownOutsideEvent",
                                      "FocusOutsideEvent"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "onCloseAutoFocus": {
                          "name": "onCloseAutoFocus",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "((event: Event) => void) | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "((event: Event) => void) | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "event",
                                "type": "(event: Event): void",
                                "schema": [
                                  {
                                    "kind": "object",
                                    "type": "Event",
                                    "schema": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "kbds": {
                "name": "kbds",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "(string | undefined)[] | PKbdProps[] | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string | undefined)[] | PKbdProps[] | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "(string | undefined)[]",
                      "schema": [
                        "string | undefined"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PKbdProps[]",
                      "schema": [
                        {
                          "kind": "object",
                          "type": "PKbdProps",
                          "schema": {
                            "as": {
                              "name": "as",
                              "global": false,
                              "description": "The element or component this component should render as.",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'kbd'"
                                }
                              ],
                              "required": false,
                              "type": "APrimitiveAsTag | Component | undefined",
                              "schema": "APrimitiveAsTag | Component | undefined"
                            },
                            "value": {
                              "name": "value",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "string | undefined",
                              "schema": "string | undefined"
                            },
                            "color": {
                              "name": "color",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'neutral'"
                                }
                              ],
                              "required": false,
                              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                            },
                            "variant": {
                              "name": "variant",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'outline'"
                                }
                              ],
                              "required": false,
                              "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'solid' | 'outline' | 'soft' | 'subtle' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'solid'",
                                  "2": "'outline'",
                                  "3": "'soft'",
                                  "4": "'subtle'"
                                }
                              }
                            },
                            "size": {
                              "name": "size",
                              "global": false,
                              "description": "",
                              "tags": [
                                {
                                  "name": "defaultValue",
                                  "text": "'md'"
                                }
                              ],
                              "required": false,
                              "type": "'md' | 'sm' | 'lg' | undefined",
                              "schema": {
                                "kind": "enum",
                                "type": "'md' | 'sm' | 'lg' | undefined",
                                "schema": {
                                  "0": "undefined",
                                  "1": "'md'",
                                  "2": "'sm'",
                                  "3": "'lg'"
                                }
                              }
                            },
                            "class": {
                              "name": "class",
                              "global": false,
                              "description": "",
                              "tags": [],
                              "required": false,
                              "type": "any",
                              "schema": "any"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "type": {
                "name": "type",
                "global": false,
                "description": "The item type.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'link'"
                  }
                ],
                "required": false,
                "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'label' | 'link' | 'separator' | 'checkbox' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'label'",
                    "2": "'link'",
                    "3": "'separator'",
                    "4": "'checkbox'"
                  }
                }
              },
              "slot": {
                "name": "slot",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "loading": {
                "name": "loading",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "disabled": {
                "name": "disabled",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "checked": {
                "name": "checked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "open": {
                "name": "open",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "defaultOpen": {
                "name": "defaultOpen",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "children": {
                "name": "children",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "ArrayOrNested<PDropdownMenuItem> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[]",
                      "schema": [
                        "PDropdownMenuItem"
                      ]
                    },
                    "2": {
                      "kind": "array",
                      "type": "PDropdownMenuItem[][]",
                      "schema": [
                        "PDropdownMenuItem[]"
                      ]
                    }
                  }
                }
              },
              "onSelect": {
                "name": "onSelect",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((event: Event) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((event: Event) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(event: Event): void",
                      "schema": []
                    }
                  }
                }
              },
              "onUpdateChecked": {
                "name": "onUpdateChecked",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "((checked: boolean) => void) | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "((checked: boolean) => void) | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": {
                      "kind": "event",
                      "type": "(checked: boolean): void",
                      "schema": []
                    }
                  }
                }
              },
              "class": {
                "name": "class",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "any",
                "schema": "any"
              },
              "pohon": {
                "name": "pohon",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "Pick<{ content?: ClassValue; viewport?: ClassValue; arrow?: ClassValue; group?: ClassValue; label?: ClassValue; separator?: ClassValue; item?: ClassValue; itemLeadingIcon?: ClassValue; itemLeadingAvatar?: ClassValue; itemLeadingAvatarSize?: ClassValue; itemTrailing?: ClassValue; itemTrailingIcon?: ClassValue; itemTrailingKbds?: ClassValue; itemTrailingKbdsSize?: ClassValue; itemLabel?: ClassValue; itemLabelExternalIcon?: ClassValue; }, 'label' | 'item' | 'separator' | 'itemLeadingIcon' | 'itemLeadingAvatar' | 'itemLeadingAvatarSize' | 'itemTrailing' | 'itemTrailingIcon' | 'itemLabel' | 'itemTrailingKbds' | 'itemTrailingKbdsSize' | 'itemLabelExternalIcon'>"
                  }
                }
              },
              "as": {
                "name": "as",
                "global": false,
                "description": "The element or component this component should render as when not a link.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "'button'"
                  }
                ],
                "required": false,
                "type": "APrimitiveAsTag | Component | undefined",
                "schema": "APrimitiveAsTag | Component | undefined"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Calls `router.replace` instead of `router.push`.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "to": {
                "name": "to",
                "global": false,
                "description": "Route Location the link should navigate to when clicked on.",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "string",
                    "2": {
                      "kind": "object",
                      "type": "RouteLocationAsRelativeGeneric",
                      "schema": {
                        "name": {
                          "name": "name",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteRecordNameGeneric",
                            "schema": {
                              "0": "undefined",
                              "1": "string",
                              "2": "symbol"
                            }
                          }
                        },
                        "params": {
                          "name": "params",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "RouteParamsRawGeneric | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "RouteParamsRawGeneric"
                            }
                          }
                        },
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "A relative path to the current location. This property should be removed",
                          "tags": [],
                          "required": false,
                          "type": "undefined",
                          "schema": "undefined"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "LocationQueryRaw | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": "LocationQueryRaw"
                            }
                          }
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": {
                            "kind": "enum",
                            "type": "HistoryState | undefined",
                            "schema": {
                              "0": "undefined",
                              "1": {
                                "kind": "object",
                                "type": "HistoryState",
                                "schema": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "kind": "object",
                      "type": "RouteLocationAsPathGeneric",
                      "schema": {
                        "path": {
                          "name": "path",
                          "global": false,
                          "description": "Percentage encoded pathname section of the URL.",
                          "tags": [],
                          "required": true,
                          "type": "string",
                          "schema": "string"
                        },
                        "query": {
                          "name": "query",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "LocationQueryRaw | undefined",
                          "schema": "LocationQueryRaw | undefined"
                        },
                        "hash": {
                          "name": "hash",
                          "global": false,
                          "description": "",
                          "tags": [],
                          "required": false,
                          "type": "string | undefined",
                          "schema": "string | undefined"
                        },
                        "replace": {
                          "name": "replace",
                          "global": false,
                          "description": "Replace the entry in the history instead of pushing a new entry",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "force": {
                          "name": "force",
                          "global": false,
                          "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                          "tags": [],
                          "required": false,
                          "type": "boolean | undefined",
                          "schema": "boolean | undefined"
                        },
                        "state": {
                          "name": "state",
                          "global": false,
                          "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                          "tags": [],
                          "required": false,
                          "type": "HistoryState | undefined",
                          "schema": "HistoryState | undefined"
                        }
                      }
                    }
                  }
                }
              },
              "activeClass": {
                "name": "activeClass",
                "global": false,
                "description": "Class to apply when the link is active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "exactActiveClass": {
                "name": "exactActiveClass",
                "global": false,
                "description": "Class to apply when the link is exact active",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "ariaCurrentValue": {
                "name": "ariaCurrentValue",
                "global": false,
                "description": "Value passed to the attribute `aria-current` when the link is exact active.",
                "tags": [
                  {
                    "name": "defaultValue",
                    "text": "`'page'`"
                  }
                ],
                "required": false,
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'page'",
                    "2": "'step'",
                    "3": "'location'",
                    "4": "'date'",
                    "5": "'time'",
                    "6": "'true'",
                    "7": "'false'"
                  }
                }
              },
              "viewTransition": {
                "name": "viewTransition",
                "global": false,
                "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "active": {
                "name": "active",
                "global": false,
                "description": "Force the link to be active independent of the current route.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exact": {
                "name": "exact",
                "global": false,
                "description": "Will only be active if the current route is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "exactQuery": {
                "name": "exactQuery",
                "global": false,
                "description": "Allows controlling how the current route query sets the link as active.",
                "tags": [],
                "required": false,
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "boolean | 'partial' | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "false",
                    "2": "true",
                    "3": "'partial'"
                  }
                }
              },
              "exactHash": {
                "name": "exactHash",
                "global": false,
                "description": "Will only be active if the current route hash is an exact match.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "inactiveClass": {
                "name": "inactiveClass",
                "global": false,
                "description": "The class to apply when the link is inactive.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "href": {
                "name": "href",
                "global": false,
                "description": "An alias for `to`. If used with `to`, `href` will be ignored",
                "tags": [],
                "required": false,
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
              },
              "external": {
                "name": "external",
                "global": false,
                "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "target": {
                "name": "target",
                "global": false,
                "description": "Where to display the linked URL, as the name for a browsing context.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'_blank'",
                    "4": "'_parent'",
                    "5": "'_self'",
                    "6": "'_top'"
                  }
                }
              },
              "rel": {
                "name": "rel",
                "global": false,
                "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
                "tags": [],
                "required": false,
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "null",
                    "2": "string & {}",
                    "3": "'noopener'",
                    "4": "'noreferrer'",
                    "5": "'nofollow'",
                    "6": "'sponsored'",
                    "7": "'ugc'"
                  }
                }
              },
              "noRel": {
                "name": "noRel",
                "global": false,
                "description": "If set to true, no rel attribute will be added to the link",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchedClass": {
                "name": "prefetchedClass",
                "global": false,
                "description": "A class to apply to links that have been prefetched.",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "schema": "string | undefined"
              },
              "prefetch": {
                "name": "prefetch",
                "global": false,
                "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              },
              "prefetchOn": {
                "name": "prefetchOn",
                "global": false,
                "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
                "tags": [],
                "required": false,
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "kind": "enum",
                  "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                  "schema": {
                    "0": "undefined",
                    "1": "'visibility'",
                    "2": "'interaction'",
                    "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                  }
                }
              },
              "noPrefetch": {
                "name": "noPrefetch",
                "global": false,
                "description": "Escape hatch to disable `prefetch` attribute.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "schema": "boolean | undefined"
              }
            }
          }
        },
        "active": {
          "name": "active",
          "global": false,
          "description": "",
          "tags": [],
          "required": false,
          "type": "boolean | undefined",
          "schema": "boolean | undefined"
        },
        "index": {
          "name": "index",
          "global": false,
          "description": "",
          "tags": [],
          "required": true,
          "type": "number",
          "schema": "number"
        }
      }
    }
  },
  {
    "name": "content-top",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  },
  {
    "name": "content-bottom",
    "type": "object | undefined",
    "description": "",
    "schema": {
      "kind": "enum",
      "type": "object | undefined",
      "schema": {
        "0": "undefined",
        "1": "object"
      }
    }
  }
],
  "events": [
  {
    "name": "update:open",
    "description": "",
    "tags": [],
    "type": "[payload: boolean]",
    "signature": "(evt: 'update:open', payload: boolean): void",
    "schema": [
      {
        "kind": "enum",
        "type": "boolean",
        "schema": [
          "false",
          "true"
        ]
      }
    ]
  }
],
  "exposed": []
}
