{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'div'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    }
  },
  {
    "name": "active",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "true"
  },
  {
    "name": "align",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "AlignmentOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "AlignmentOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "'center'",
        "2": "'start'",
        "3": "'end'",
        "4": {
          "kind": "event",
          "type": "(viewSize: number, snapSize: number, index: number): number",
          "schema": []
        }
      }
    },
    "default": "'center'"
  },
  {
    "name": "arrows",
    "global": false,
    "description": "Display prev and next buttons to scroll the carousel.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "autoHeight",
    "global": false,
    "description": "Enable Auto Height plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/auto-height/"
      }
    ],
    "required": false,
    "type": "boolean | Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>>"
      }
    },
    "default": "false"
  },
  {
    "name": "autoplay",
    "global": false,
    "description": "Enable Autoplay plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/autoplay/"
      }
    ],
    "required": false,
    "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<CreateOptionsType<OptionsType>>"
      }
    },
    "default": "false"
  },
  {
    "name": "autoScroll",
    "global": false,
    "description": "Enable Auto Scroll plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/auto-scroll/"
      }
    ],
    "required": false,
    "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<CreateOptionsType<OptionsType>>"
      }
    },
    "default": "false"
  },
  {
    "name": "breakpoints",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ [key: string]: Omit<Partial<CreateOptionsType<{ align: AlignmentOptionType; axis: AxisOptionType; container: string | HTMLElement | null; slides: string | HTMLElement[] | NodeListOf<HTMLElement> | null; containScroll: ScrollContainOptionType; direction: AxisDirectionOptionType; slidesToScroll: SlidesToScrollOptionType; dragFree: boolean; dragThreshold: number; inViewThreshold: number | number[] | undefined; loop: boolean; skipSnaps: boolean; duration: number; startIndex: number; watchDrag: DragHandlerOptionType; watchResize: ResizeHandlerOptionType; watchSlides: SlidesHandlerOptionType; watchFocus: FocusHandlerOptionType; }>>, 'breakpoints'>; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ [key: string]: Omit<Partial<CreateOptionsType<{ align: AlignmentOptionType; axis: AxisOptionType; container: string | HTMLElement | null; slides: string | HTMLElement[] | NodeListOf<HTMLElement> | null; containScroll: ScrollContainOptionType; direction: AxisDirectionOptionType; slidesToScroll: SlidesToScrollOptionType; dragFree: boolean; dragThreshold: number; inViewThreshold: number | number[] | undefined; loop: boolean; skipSnaps: boolean; duration: number; startIndex: number; watchDrag: DragHandlerOptionType; watchResize: ResizeHandlerOptionType; watchSlides: SlidesHandlerOptionType; watchFocus: FocusHandlerOptionType; }>>, 'breakpoints'>; } | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "{ [key: string]: Omit<Partial<CreateOptionsType<{ align: AlignmentOptionType; axis: AxisOptionType; container: string | HTMLElement | null; slides: string | HTMLElement[] | NodeListOf<HTMLElement> | null; containScroll: ScrollContainOptionType; direction: AxisDirectionOptionType; slidesToScroll: SlidesToScrollOptionType; dragFree: boolean; dragThreshold: number; inViewThreshold: number | number[] | undefined; loop: boolean; skipSnaps: boolean; duration: number; startIndex: number; watchDrag: DragHandlerOptionType; watchResize: ResizeHandlerOptionType; watchSlides: SlidesHandlerOptionType; watchFocus: FocusHandlerOptionType; }>>, 'breakpoints'>; }",
          "schema": {}
        }
      }
    },
    "default": "{}"
  },
  {
    "name": "classNames",
    "global": false,
    "description": "Enable Class Names plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/class-names/"
      }
    ],
    "required": false,
    "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<CreateOptionsType<OptionsType>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<CreateOptionsType<OptionsType>>"
      }
    },
    "default": "false"
  },
  {
    "name": "containScroll",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ScrollContainOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "ScrollContainOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "'trimSnaps'",
        "3": "'keepSnaps'"
      }
    },
    "default": "'trimSnaps'"
  },
  {
    "name": "dots",
    "global": false,
    "description": "Display dots to scroll to a specific slide.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "false"
      }
    ],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "dragFree",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "dragThreshold",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "10"
  },
  {
    "name": "duration",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "25"
  },
  {
    "name": "fade",
    "global": false,
    "description": "Enable Fade plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/fade/"
      }
    ],
    "required": false,
    "type": "boolean | Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>> | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>> | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "Partial<CreateOptionsType<{ active: boolean; breakpoints: { [key: string]: Omit<Partial<any>, 'breakpoints'>; }; }>>"
      }
    },
    "default": "false"
  },
  {
    "name": "inViewThreshold",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | number[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | number[] | undefined",
      "schema": {
        "0": "undefined",
        "1": "number",
        "2": {
          "kind": "array",
          "type": "number[]",
          "schema": [
            "number"
          ]
        }
      }
    },
    "default": "0"
  },
  {
    "name": "items",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "PCarouselItem[] | undefined",
    "schema": {
      "kind": "enum",
      "type": "PCarouselItem[] | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "array",
          "type": "PCarouselItem[]",
          "schema": [
            {
              "kind": "enum",
              "type": "PCarouselItem",
              "schema": [
                "null",
                "string",
                "number",
                "bigint",
                "false",
                "true",
                {
                  "kind": "object",
                  "type": "{ [key: string]: any; class?: any; pohon?: Pick<{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; }, 'item'> | undefined; }",
                  "schema": {
                    "class": {
                      "name": "class",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "any",
                      "schema": "any"
                    },
                    "pohon": {
                      "name": "pohon",
                      "global": false,
                      "description": "",
                      "tags": [],
                      "required": false,
                      "type": "Pick<{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; }, 'item'> | undefined",
                      "schema": {
                        "kind": "enum",
                        "type": "Pick<{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; }, 'item'> | undefined",
                        "schema": {
                          "0": "undefined",
                          "1": "Pick<{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; }, 'item'>"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "name": "loop",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "next",
    "global": false,
    "description": "Configure the next button when arrows are enabled.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ size: 'md', color: 'neutral', variant: 'link' }"
      }
    ],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'3xs'",
                            "3": "'2xs'",
                            "4": "'xs'",
                            "5": "'sm'",
                            "6": "'lg'",
                            "7": "'xl'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "nextIcon",
    "global": false,
    "description": "The icon displayed in the next button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.arrowRight"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "orientation",
    "global": false,
    "description": "The orientation of the carousel.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'horizontal'"
      }
    ],
    "required": false,
    "type": "'vertical' | 'horizontal' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'vertical' | 'horizontal' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'vertical'",
        "2": "'horizontal'"
      }
    },
    "default": "'horizontal'"
  },
  {
    "name": "prev",
    "global": false,
    "description": "Configure the prev button when arrows are enabled.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "{ size: 'md', color: 'neutral', variant: 'link' }"
      }
    ],
    "required": false,
    "type": "PButtonProps | undefined",
    "schema": {
      "kind": "enum",
      "type": "PButtonProps | undefined",
      "schema": {
        "0": "undefined",
        "1": {
          "kind": "object",
          "type": "PButtonProps",
          "schema": {
            "label": {
              "name": "label",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "color": {
              "name": "color",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'primary'"
                }
              ],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'error'",
                  "2": "'primary'",
                  "3": "'secondary'",
                  "4": "'success'",
                  "5": "'info'",
                  "6": "'warning'",
                  "7": "'neutral'"
                }
              }
            },
            "activeColor": {
              "name": "activeColor",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
              "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
            },
            "variant": {
              "name": "variant",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'solid'"
                }
              ],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'link'",
                  "2": "'solid'",
                  "3": "'outline'",
                  "4": "'soft'",
                  "5": "'subtle'",
                  "6": "'ghost'"
                }
              }
            },
            "activeVariant": {
              "name": "activeVariant",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined",
              "schema": "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost' | undefined"
            },
            "size": {
              "name": "size",
              "global": false,
              "description": "",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'md'"
                }
              ],
              "required": false,
              "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'md' | 'xs' | 'sm' | 'lg' | 'xl' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'md'",
                  "2": "'xs'",
                  "3": "'sm'",
                  "4": "'lg'",
                  "5": "'xl'"
                }
              }
            },
            "square": {
              "name": "square",
              "global": false,
              "description": "Render the button with equal padding on all sides.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "block": {
              "name": "block",
              "global": false,
              "description": "Render the button full width.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingAuto": {
              "name": "loadingAuto",
              "global": false,
              "description": "Set loading state automatically based on the `@click` promise state",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "onClick": {
              "name": "onClick",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
              "schema": {
                "kind": "enum",
                "type": "((event: MouseEvent) => void | Promise<void>) | ((event: MouseEvent) => void | Promise<void>)[] | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(event: MouseEvent): void | Promise<void>",
                    "schema": []
                  },
                  "2": {
                    "kind": "array",
                    "type": "((event: MouseEvent) => void | Promise<void>)[]",
                    "schema": [
                      {
                        "kind": "event",
                        "type": "(event: MouseEvent): void | Promise<void>",
                        "schema": []
                      }
                    ]
                  }
                }
              }
            },
            "class": {
              "name": "class",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "any",
              "schema": "any"
            },
            "pohon": {
              "name": "pohon",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
              "schema": {
                "kind": "enum",
                "type": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; } | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "{ base?: ClassValue; label?: ClassValue; leadingIcon?: ClassValue; leadingAvatar?: ClassValue; leadingAvatarSize?: ClassValue; trailingIcon?: ClassValue; }"
                }
              }
            },
            "icon": {
              "name": "icon",
              "global": false,
              "description": "Display an icon based on the `leading` and `trailing` props.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | object | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "object"
                }
              }
            },
            "avatar": {
              "name": "avatar",
              "global": false,
              "description": "Display an avatar on the left side.",
              "tags": [],
              "required": false,
              "type": "PAvatarProps | undefined",
              "schema": {
                "kind": "enum",
                "type": "PAvatarProps | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "PAvatarProps",
                    "schema": {
                      "as": {
                        "name": "as",
                        "global": false,
                        "description": "The element or component this component should render as.",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'span'"
                          }
                        ],
                        "required": false,
                        "type": "APrimitiveAsTag | Component | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "APrimitiveAsTag | Component | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'a'",
                            "2": "'button'",
                            "3": "'div'",
                            "4": "'form'",
                            "5": "'h2'",
                            "6": "'h3'",
                            "7": "'img'",
                            "8": "'input'",
                            "9": "'label'",
                            "10": "'li'",
                            "11": "'nav'",
                            "12": "'ol'",
                            "13": "'p'",
                            "14": "'span'",
                            "15": "'svg'",
                            "16": "'template'",
                            "17": "'ul'",
                            "18": {
                              "kind": "object",
                              "type": "string & {}",
                              "schema": {}
                            },
                            "19": {
                              "kind": "object",
                              "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
                              "schema": {
                                "beforeRouteEnter": {
                                  "name": "beforeRouteEnter",
                                  "global": false,
                                  "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuardWithThis<undefined> | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuardWithThis<undefined> | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteUpdate": {
                                  "name": "beforeRouteUpdate",
                                  "global": false,
                                  "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "NavigationGuard | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                                        "schema": []
                                      }
                                    }
                                  }
                                },
                                "beforeRouteLeave": {
                                  "name": "beforeRouteLeave",
                                  "global": false,
                                  "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
                                  "tags": [
                                    {
                                      "name": "param",
                                      "text": "to - RouteLocationRaw we are navigating to"
                                    },
                                    {
                                      "name": "param",
                                      "text": "from - RouteLocationRaw we are navigating from"
                                    },
                                    {
                                      "name": "param",
                                      "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                                    }
                                  ],
                                  "required": false,
                                  "type": "NavigationGuard | undefined",
                                  "schema": "NavigationGuard | undefined"
                                },
                                "head": {
                                  "name": "head",
                                  "global": false,
                                  "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
                                  "tags": [],
                                  "required": false,
                                  "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": {
                                        "kind": "event",
                                        "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                                        "schema": []
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "20": {
                              "kind": "event",
                              "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
                              "schema": []
                            },
                            "21": {
                              "kind": "object",
                              "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
                              "schema": {}
                            }
                          }
                        }
                      },
                      "src": {
                        "name": "src",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "alt": {
                        "name": "alt",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "icon": {
                        "name": "icon",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "IconifyIcon"
                          }
                        ],
                        "required": false,
                        "type": "string | object | undefined",
                        "schema": "string | object | undefined"
                      },
                      "text": {
                        "name": "text",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "size": {
                        "name": "size",
                        "global": false,
                        "description": "",
                        "tags": [
                          {
                            "name": "defaultValue",
                            "text": "'md'"
                          }
                        ],
                        "required": false,
                        "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "'md'",
                            "2": "'3xs'",
                            "3": "'2xs'",
                            "4": "'xs'",
                            "5": "'sm'",
                            "6": "'lg'",
                            "7": "'xl'",
                            "8": "'2xl'",
                            "9": "'3xl'"
                          }
                        }
                      },
                      "chip": {
                        "name": "chip",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "boolean | PChipProps | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "boolean | PChipProps | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "false",
                            "2": "true",
                            "3": {
                              "kind": "object",
                              "type": "PChipProps",
                              "schema": {
                                "as": {
                                  "name": "as",
                                  "global": false,
                                  "description": "The element or component this component should render as.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'div'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "APrimitiveAsTag | Component | undefined",
                                  "schema": "APrimitiveAsTag | Component | undefined"
                                },
                                "text": {
                                  "name": "text",
                                  "global": false,
                                  "description": "Display some text inside the chip.",
                                  "tags": [],
                                  "required": false,
                                  "type": "string | number | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "string | number | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "string",
                                      "2": "number"
                                    }
                                  }
                                },
                                "color": {
                                  "name": "color",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'primary'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined",
                                  "schema": "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral' | undefined"
                                },
                                "size": {
                                  "name": "size",
                                  "global": false,
                                  "description": "",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'md'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined",
                                  "schema": "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
                                },
                                "position": {
                                  "name": "position",
                                  "global": false,
                                  "description": "The position of the chip.",
                                  "tags": [
                                    {
                                      "name": "defaultValue",
                                      "text": "'top-right'"
                                    }
                                  ],
                                  "required": false,
                                  "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left' | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "'top-right'",
                                      "2": "'bottom-right'",
                                      "3": "'top-left'",
                                      "4": "'bottom-left'"
                                    }
                                  }
                                },
                                "inset": {
                                  "name": "inset",
                                  "global": false,
                                  "description": "When `true`, keep the chip inside the component for rounded elements.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "standalone": {
                                  "name": "standalone",
                                  "global": false,
                                  "description": "When `true`, render the chip relatively to the parent.",
                                  "tags": [],
                                  "required": false,
                                  "type": "boolean | undefined",
                                  "schema": "boolean | undefined"
                                },
                                "class": {
                                  "name": "class",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "any",
                                  "schema": "any"
                                },
                                "pohon": {
                                  "name": "pohon",
                                  "global": false,
                                  "description": "",
                                  "tags": [],
                                  "required": false,
                                  "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                  "schema": {
                                    "kind": "enum",
                                    "type": "{ root?: ClassValue; base?: ClassValue; } | undefined",
                                    "schema": {
                                      "0": "undefined",
                                      "1": "{ root?: ClassValue; base?: ClassValue; }"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "class": {
                        "name": "class",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "style": {
                        "name": "style",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "any",
                        "schema": "any"
                      },
                      "pohon": {
                        "name": "pohon",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; } | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "{ root?: ClassValue; image?: ClassValue; fallback?: ClassValue; icon?: ClassValue; }"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "leading": {
              "name": "leading",
              "global": false,
              "description": "When `true`, the icon will be displayed on the left side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "leadingIcon": {
              "name": "leadingIcon",
              "global": false,
              "description": "Display an icon on the left side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "trailing": {
              "name": "trailing",
              "global": false,
              "description": "When `true`, the icon will be displayed on the right side.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "trailingIcon": {
              "name": "trailingIcon",
              "global": false,
              "description": "Display an icon on the right side.",
              "tags": [
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "loading": {
              "name": "loading",
              "global": false,
              "description": "When `true`, the loading icon will be displayed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "loadingIcon": {
              "name": "loadingIcon",
              "global": false,
              "description": "The icon when the `loading` prop is `true`.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "appConfig.pohon.icons.loading"
                },
                {
                  "name": "IconifyIcon"
                }
              ],
              "required": false,
              "type": "string | object | undefined",
              "schema": "string | object | undefined"
            },
            "type": {
              "name": "type",
              "global": false,
              "description": "The type of the button when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "'button' | 'reset' | 'submit' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'button' | 'reset' | 'submit' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'button'",
                  "2": "'reset'",
                  "3": "'submit'"
                }
              }
            },
            "disabled": {
              "name": "disabled",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "as": {
              "name": "as",
              "global": false,
              "description": "The element or component this component should render as when not a link.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "'button'"
                }
              ],
              "required": false,
              "type": "APrimitiveAsTag | Component | undefined",
              "schema": "APrimitiveAsTag | Component | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Calls `router.replace` instead of `router.push`.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "to": {
              "name": "to",
              "global": false,
              "description": "Route Location the link should navigate to when clicked on.",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": {
                    "kind": "object",
                    "type": "RouteLocationAsRelativeGeneric",
                    "schema": {
                      "name": {
                        "name": "name",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteRecordNameGeneric",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteRecordNameGeneric",
                          "schema": {
                            "0": "undefined",
                            "1": "string",
                            "2": "symbol"
                          }
                        }
                      },
                      "params": {
                        "name": "params",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "RouteParamsRawGeneric | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "RouteParamsRawGeneric | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "RouteParamsRawGeneric"
                          }
                        }
                      },
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "A relative path to the current location. This property should be removed",
                        "tags": [],
                        "required": false,
                        "type": "undefined",
                        "schema": "undefined"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "LocationQueryRaw | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": "LocationQueryRaw"
                          }
                        }
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": {
                          "kind": "enum",
                          "type": "HistoryState | undefined",
                          "schema": {
                            "0": "undefined",
                            "1": {
                              "kind": "object",
                              "type": "HistoryState",
                              "schema": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "3": {
                    "kind": "object",
                    "type": "RouteLocationAsPathGeneric",
                    "schema": {
                      "path": {
                        "name": "path",
                        "global": false,
                        "description": "Percentage encoded pathname section of the URL.",
                        "tags": [],
                        "required": true,
                        "type": "string",
                        "schema": "string"
                      },
                      "query": {
                        "name": "query",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "LocationQueryRaw | undefined",
                        "schema": "LocationQueryRaw | undefined"
                      },
                      "hash": {
                        "name": "hash",
                        "global": false,
                        "description": "",
                        "tags": [],
                        "required": false,
                        "type": "string | undefined",
                        "schema": "string | undefined"
                      },
                      "replace": {
                        "name": "replace",
                        "global": false,
                        "description": "Replace the entry in the history instead of pushing a new entry",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "force": {
                        "name": "force",
                        "global": false,
                        "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
                        "tags": [],
                        "required": false,
                        "type": "boolean | undefined",
                        "schema": "boolean | undefined"
                      },
                      "state": {
                        "name": "state",
                        "global": false,
                        "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                        "tags": [],
                        "required": false,
                        "type": "HistoryState | undefined",
                        "schema": "HistoryState | undefined"
                      }
                    }
                  }
                }
              }
            },
            "activeClass": {
              "name": "activeClass",
              "global": false,
              "description": "Class to apply when the link is active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "exactActiveClass": {
              "name": "exactActiveClass",
              "global": false,
              "description": "Class to apply when the link is exact active",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "ariaCurrentValue": {
              "name": "ariaCurrentValue",
              "global": false,
              "description": "Value passed to the attribute `aria-current` when the link is exact active.",
              "tags": [
                {
                  "name": "defaultValue",
                  "text": "`'page'`"
                }
              ],
              "required": false,
              "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'page'",
                  "2": "'step'",
                  "3": "'location'",
                  "4": "'date'",
                  "5": "'time'",
                  "6": "'true'",
                  "7": "'false'"
                }
              }
            },
            "viewTransition": {
              "name": "viewTransition",
              "global": false,
              "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "Force the link to be active independent of the current route.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exact": {
              "name": "exact",
              "global": false,
              "description": "Will only be active if the current route is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "exactQuery": {
              "name": "exactQuery",
              "global": false,
              "description": "Allows controlling how the current route query sets the link as active.",
              "tags": [],
              "required": false,
              "type": "boolean | 'partial' | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | 'partial' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true",
                  "3": "'partial'"
                }
              }
            },
            "exactHash": {
              "name": "exactHash",
              "global": false,
              "description": "Will only be active if the current route hash is an exact match.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "inactiveClass": {
              "name": "inactiveClass",
              "global": false,
              "description": "The class to apply when the link is inactive.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "href": {
              "name": "href",
              "global": false,
              "description": "An alias for `to`. If used with `to`, `href` will be ignored",
              "tags": [],
              "required": false,
              "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
              "schema": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
            },
            "external": {
              "name": "external",
              "global": false,
              "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'_blank'",
                  "4": "'_parent'",
                  "5": "'_self'",
                  "6": "'_top'"
                }
              }
            },
            "rel": {
              "name": "rel",
              "global": false,
              "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
              "tags": [],
              "required": false,
              "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
              "schema": {
                "kind": "enum",
                "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "null",
                  "2": "string & {}",
                  "3": "'noopener'",
                  "4": "'noreferrer'",
                  "5": "'nofollow'",
                  "6": "'sponsored'",
                  "7": "'ugc'"
                }
              }
            },
            "noRel": {
              "name": "noRel",
              "global": false,
              "description": "If set to true, no rel attribute will be added to the link",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchedClass": {
              "name": "prefetchedClass",
              "global": false,
              "description": "A class to apply to links that have been prefetched.",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "prefetch": {
              "name": "prefetch",
              "global": false,
              "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "prefetchOn": {
              "name": "prefetchOn",
              "global": false,
              "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
              "tags": [],
              "required": false,
              "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
              "schema": {
                "kind": "enum",
                "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'visibility'",
                  "2": "'interaction'",
                  "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
                }
              }
            },
            "noPrefetch": {
              "name": "noPrefetch",
              "global": false,
              "description": "Escape hatch to disable `prefetch` attribute.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "prevIcon",
    "global": false,
    "description": "The icon displayed in the prev button.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "appConfig.pohon.icons.arrowLeft"
      },
      {
        "name": "IconifyIcon"
      }
    ],
    "required": false,
    "type": "string | object | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | object | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": "object"
      }
    }
  },
  {
    "name": "skipSnaps",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "false"
  },
  {
    "name": "slidesToScroll",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "SlidesToScrollOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "SlidesToScrollOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "number",
        "2": "'auto'"
      }
    },
    "default": "1"
  },
  {
    "name": "startIndex",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "number | undefined",
    "schema": {
      "kind": "enum",
      "type": "number | undefined",
      "schema": {
        "0": "undefined",
        "1": "number"
      }
    },
    "default": "0"
  },
  {
    "name": "watchDrag",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "DragHandlerOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "DragHandlerOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "event",
          "type": "(emblaApi: EmblaCarouselType, evt: PointerEventType): boolean | void",
          "schema": []
        }
      }
    },
    "default": "true"
  },
  {
    "name": "watchFocus",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "FocusHandlerOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "FocusHandlerOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "event",
          "type": "(emblaApi: EmblaCarouselType, evt: FocusEvent): boolean | void",
          "schema": []
        }
      }
    },
    "default": "true"
  },
  {
    "name": "watchResize",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "ResizeHandlerOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "ResizeHandlerOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "event",
          "type": "(emblaApi: EmblaCarouselType, entries: ResizeObserverEntry[]): boolean | void",
          "schema": []
        }
      }
    },
    "default": "true"
  },
  {
    "name": "watchSlides",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "SlidesHandlerOptionType | undefined",
    "schema": {
      "kind": "enum",
      "type": "SlidesHandlerOptionType | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "event",
          "type": "(emblaApi: EmblaCarouselType, mutations: MutationRecord[]): boolean | void",
          "schema": []
        }
      }
    },
    "default": "true"
  },
  {
    "name": "wheelGestures",
    "global": false,
    "description": "Enable Wheel Gestures plugin",
    "tags": [
      {
        "name": "see",
        "text": "https://www.embla-carousel.com/plugins/wheel-gestures/"
      }
    ],
    "required": false,
    "type": "boolean | WheelGesturesPluginOptions | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | WheelGesturesPluginOptions | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": {
          "kind": "object",
          "type": "WheelGesturesPluginOptions",
          "schema": {
            "wheelDraggingClass": {
              "name": "wheelDraggingClass",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "forceWheelAxis": {
              "name": "forceWheelAxis",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "'x' | 'y' | undefined",
              "schema": {
                "kind": "enum",
                "type": "'x' | 'y' | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "'x'",
                  "2": "'y'"
                }
              }
            },
            "target": {
              "name": "target",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "Element | undefined",
              "schema": {
                "kind": "enum",
                "type": "Element | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "Element",
                    "schema": {}
                  }
                }
              }
            },
            "active": {
              "name": "active",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "boolean",
              "schema": {
                "kind": "enum",
                "type": "boolean",
                "schema": {
                  "0": "false",
                  "1": "true"
                }
              }
            },
            "breakpoints": {
              "name": "breakpoints",
              "global": false,
              "description": "",
              "tags": [],
              "required": true,
              "type": "{ [key: string]: Omit<Partial<CreateOptionsType<{ wheelDraggingClass: string; forceWheelAxis?: 'x' | 'y' | undefined; target?: Element | undefined; }>>, 'breakpoints'>; }",
              "schema": {
                "kind": "object",
                "type": "{ [key: string]: Omit<Partial<CreateOptionsType<{ wheelDraggingClass: string; forceWheelAxis?: 'x' | 'y' | undefined; target?: Element | undefined; }>>, 'breakpoints'>; }",
                "schema": {}
              }
            }
          }
        }
      }
    },
    "default": "false"
  },
  {
    "name": "pohon",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; } | undefined",
    "schema": {
      "kind": "enum",
      "type": "{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; } | undefined",
      "schema": {
        "0": "undefined",
        "1": "{ root?: ClassValue; viewport?: ClassValue; container?: ClassValue; item?: ClassValue; controls?: ClassValue; arrows?: ClassValue; prev?: ClassValue; next?: ClassValue; dots?: ClassValue; dot?: ClassValue; }"
      }
    }
  }
],
  "emits": [
  {
    "name": "select",
    "description": "",
    "type": "[selectedIndex: number]"
  }
],
  "slots": [
  {
    "name": "item",
    "description": "",
    "type": "PCarouselItem"
  },
  {
    "name": "index",
    "description": "",
    "type": "number"
  }
]
}
