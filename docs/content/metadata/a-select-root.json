{
  "props": [
  {
    "name": "autocomplete",
    "description": "Native html input `autocomplete` attribute.",
    "type": "string",
    "required": false
  },
  {
    "name": "by",
    "description": "Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.",
    "type": "string | ((a: AcceptableValue, b: AcceptableValue) => boolean)",
    "required": false
  },
  {
    "name": "defaultOpen",
    "description": "The open state of the select when it is initially rendered. Use when you do not need to control its open state.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "defaultValue",
    "description": "The value of the select when initially rendered. Use when you do not need to control the state of the Select",
    "type": "AcceptableValue | AcceptableValue[]",
    "required": false
  },
  {
    "name": "dir",
    "description": "The reading direction of the combobox when applicable. <br> If omitted, inherits globally from `AConfigProvider` or assumes LTR (left-to-right) reading mode.",
    "type": "'ltr' | 'rtl'",
    "required": false
  },
  {
    "name": "disabled",
    "description": "When `true`, prevents the user from interacting with Select",
    "type": "boolean",
    "required": false
  },
  {
    "name": "modelValue",
    "description": "The controlled value of the Select. Can be bind as `v-model`.",
    "type": "AcceptableValue | AcceptableValue[]",
    "required": false
  },
  {
    "name": "multiple",
    "description": "Whether multiple options can be selected or not.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "name",
    "description": "The name of the field. Submitted with its owning form as part of a name/value pair.",
    "type": "string",
    "required": false
  },
  {
    "name": "open",
    "description": "The controlled open state of the Select. Can be bind as `v-model:open`.",
    "type": "boolean",
    "required": false
  },
  {
    "name": "required",
    "description": "When `true`, indicates that the user must set the value before the owning form can be submitted.",
    "type": "boolean",
    "required": false
  }
],
  "events": [
  {
    "name": "update:modelValue",
    "description": "Event handler called when the value changes.",
    "type": "[value: AcceptableValue]"
  },
  {
    "name": "update:open",
    "description": "Event handler called when the open state of the context menu changes.",
    "type": "[value: boolean]"
  }
],
  "slots": [
  {
    "name": "modelValue",
    "description": "Current input values",
    "type": "AcceptableValue | AcceptableValue[] | undefined"
  },
  {
    "name": "open",
    "description": "Current open state",
    "type": "boolean"
  }
]
}
