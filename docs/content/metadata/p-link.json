{
  "props": [
  {
    "name": "as",
    "global": false,
    "description": "The element or component this component should render as when not a link.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'button'"
      }
    ],
    "required": false,
    "type": "APrimitiveAsTag | Component | undefined",
    "schema": {
      "kind": "enum",
      "type": "APrimitiveAsTag | Component | undefined",
      "schema": {
        "0": "undefined",
        "1": "'a'",
        "2": "'button'",
        "3": "'div'",
        "4": "'form'",
        "5": "'h2'",
        "6": "'h3'",
        "7": "'img'",
        "8": "'input'",
        "9": "'label'",
        "10": "'li'",
        "11": "'nav'",
        "12": "'ol'",
        "13": "'p'",
        "14": "'span'",
        "15": "'svg'",
        "16": "'template'",
        "17": "'ul'",
        "18": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "19": {
          "kind": "object",
          "type": "ComponentOptions<any, any, any, ComputedOptions, MethodOptions, any, any, any, string, {}, {}, string, {}, {}, {}, string, ComponentProvideOptions>",
          "schema": {
            "beforeRouteEnter": {
              "name": "beforeRouteEnter",
              "global": false,
              "description": "Guard called when the router is navigating to the route that is rendering\nthis component from a different route. Differently from `beforeRouteUpdate`\nand `beforeRouteLeave`, `beforeRouteEnter` does not have access to the\ncomponent instance through `this` because it triggers before the component\nis even mounted.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuardWithThis<undefined> | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuardWithThis<undefined> | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(this: undefined, to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteUpdate": {
              "name": "beforeRouteUpdate",
              "global": false,
              "description": "Guard called whenever the route that renders this component has changed, but\nit is reused for the new route. This allows you to guard for changes in\nparams, the query or the hash.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": {
                "kind": "enum",
                "type": "NavigationGuard | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(to: RouteLocationNormalizedGeneric, from: RouteLocationNormalizedLoadedGeneric, next: NavigationGuardNext): _Awaitable<...>",
                    "schema": []
                  }
                }
              }
            },
            "beforeRouteLeave": {
              "name": "beforeRouteLeave",
              "global": false,
              "description": "Guard called when the router is navigating away from the current route that\nis rendering this component.",
              "tags": [
                {
                  "name": "param",
                  "text": "to - RouteLocationRaw we are navigating to"
                },
                {
                  "name": "param",
                  "text": "from - RouteLocationRaw we are navigating from"
                },
                {
                  "name": "param",
                  "text": "next - function to validate, cancel or modify (by redirecting) the\nnavigation"
                }
              ],
              "required": false,
              "type": "NavigationGuard | undefined",
              "schema": "NavigationGuard | undefined"
            },
            "head": {
              "name": "head",
              "global": false,
              "description": "Available exclusively for `defineNuxtComponent`.\nIt will not be executed when using `defineComponent`.",
              "tags": [],
              "required": false,
              "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
              "schema": {
                "kind": "enum",
                "type": "((nuxtApp: NuxtApp) => U<Deprecated>) | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "event",
                    "type": "(nuxtApp: NuxtApp): UseHeadInput<Deprecated>",
                    "schema": []
                  }
                }
              }
            }
          }
        },
        "20": {
          "kind": "event",
          "type": "(props: any, ctx: Omit<{ attrs: Data; slots: Readonly<InternalSlots>; emit: (event: string, ...args: any[]) => void; expose: <Exposed extends Record<string, any> = Record<string, any>>(exposed?: Exposed | undefined) => void; }, 'expose'>): any",
          "schema": []
        },
        "21": {
          "kind": "object",
          "type": "ComponentPublicInstanceConstructor<any, any, any, any, ComputedOptions, MethodOptions>",
          "schema": {}
        }
      }
    },
    "default": "'button'"
  },
  {
    "name": "active",
    "global": false,
    "description": "Force the link to be active independent of the current route.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    },
    "default": "undefined"
  },
  {
    "name": "activeClass",
    "global": false,
    "description": "Class to apply when the link is active",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "ariaCurrentValue",
    "global": false,
    "description": "Value passed to the attribute `aria-current` when the link is exact active.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "`'page'`"
      }
    ],
    "required": false,
    "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'page'",
        "2": "'step'",
        "3": "'location'",
        "4": "'date'",
        "5": "'time'",
        "6": "'true'",
        "7": "'false'"
      }
    },
    "default": "'page'"
  },
  {
    "name": "custom",
    "global": false,
    "description": "Whether RouterLink should not wrap its content in an `a` tag. Useful when\r\nusing `v-slot` to create a custom RouterLink",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "disabled",
    "global": false,
    "description": "",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "exact",
    "global": false,
    "description": "Will only be active if the current route is an exact match.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "exactActiveClass",
    "global": false,
    "description": "Class to apply when the link is exact active",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "exactHash",
    "global": false,
    "description": "Will only be active if the current route hash is an exact match.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "exactQuery",
    "global": false,
    "description": "Allows controlling how the current route query sets the link as active.",
    "tags": [],
    "required": false,
    "type": "boolean | 'partial' | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | 'partial' | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true",
        "3": "'partial'"
      }
    }
  },
  {
    "name": "external",
    "global": false,
    "description": "Forces the link to be considered as external (true) or internal (false). This is helpful to handle edge-cases",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "href",
    "global": false,
    "description": "An alias for `to`. If used with `to`, `href` will be ignored",
    "tags": [],
    "required": false,
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": {
          "kind": "object",
          "type": "RouteLocationAsRelativeGeneric",
          "schema": {
            "name": {
              "name": "name",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "RouteRecordNameGeneric",
              "schema": {
                "kind": "enum",
                "type": "RouteRecordNameGeneric",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "symbol"
                }
              }
            },
            "params": {
              "name": "params",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "RouteParamsRawGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "RouteParamsRawGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "RouteParamsRawGeneric"
                }
              }
            },
            "path": {
              "name": "path",
              "global": false,
              "description": "A relative path to the current location. This property should be removed",
              "tags": [],
              "required": false,
              "type": "undefined",
              "schema": "undefined"
            },
            "query": {
              "name": "query",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "LocationQueryRaw | undefined",
              "schema": {
                "kind": "enum",
                "type": "LocationQueryRaw | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "LocationQueryRaw"
                }
              }
            },
            "hash": {
              "name": "hash",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Replace the entry in the history instead of pushing a new entry",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "force": {
              "name": "force",
              "global": false,
              "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "state": {
              "name": "state",
              "global": false,
              "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
              "tags": [],
              "required": false,
              "type": "HistoryState | undefined",
              "schema": {
                "kind": "enum",
                "type": "HistoryState | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "HistoryState",
                    "schema": {}
                  }
                }
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "RouteLocationAsPathGeneric",
          "schema": {
            "path": {
              "name": "path",
              "global": false,
              "description": "Percentage encoded pathname section of the URL.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "query": {
              "name": "query",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "LocationQueryRaw | undefined",
              "schema": "LocationQueryRaw | undefined"
            },
            "hash": {
              "name": "hash",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Replace the entry in the history instead of pushing a new entry",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "force": {
              "name": "force",
              "global": false,
              "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "state": {
              "name": "state",
              "global": false,
              "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
              "tags": [],
              "required": false,
              "type": "HistoryState | undefined",
              "schema": "HistoryState | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "inactiveClass",
    "global": false,
    "description": "The class to apply when the link is inactive.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "noPrefetch",
    "global": false,
    "description": "Escape hatch to disable `prefetch` attribute.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "noRel",
    "global": false,
    "description": "If set to true, no rel attribute will be added to the link",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "prefetch",
    "global": false,
    "description": "When enabled will prefetch middleware, layouts and payloads of links in the viewport.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "prefetchedClass",
    "global": false,
    "description": "A class to apply to links that have been prefetched.",
    "tags": [],
    "required": false,
    "type": "string | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | undefined",
      "schema": {
        "0": "undefined",
        "1": "string"
      }
    }
  },
  {
    "name": "prefetchOn",
    "global": false,
    "description": "Allows controlling when to prefetch links. By default, prefetch is triggered only on visibility.",
    "tags": [],
    "required": false,
    "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
    "schema": {
      "kind": "enum",
      "type": "'visibility' | 'interaction' | Partial<{ visibility: boolean; interaction: boolean; }> | undefined",
      "schema": {
        "0": "undefined",
        "1": "'visibility'",
        "2": "'interaction'",
        "3": "Partial<{ visibility: boolean; interaction: boolean; }>"
      }
    }
  },
  {
    "name": "raw",
    "global": false,
    "description": "When `true`, only styles from `class`, `activeClass`, and `inactiveClass` will be applied.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "rel",
    "global": false,
    "description": "A rel attribute value to apply on the link. Defaults to 'noopener noreferrer' for external links.",
    "tags": [],
    "required": false,
    "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
    "schema": {
      "kind": "enum",
      "type": "(string & {}) | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "3": "'noopener'",
        "4": "'noreferrer'",
        "5": "'nofollow'",
        "6": "'sponsored'",
        "7": "'ugc'"
      }
    }
  },
  {
    "name": "replace",
    "global": false,
    "description": "Calls `router.replace` instead of `router.push`.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  },
  {
    "name": "target",
    "global": false,
    "description": "Where to display the linked URL, as the name for a browsing context.",
    "tags": [],
    "required": false,
    "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
    "schema": {
      "kind": "enum",
      "type": "(string & {}) | '_blank' | '_parent' | '_self' | '_top' | null | undefined",
      "schema": {
        "0": "undefined",
        "1": "null",
        "2": {
          "kind": "object",
          "type": "string & {}",
          "schema": {}
        },
        "3": "'_blank'",
        "4": "'_parent'",
        "5": "'_self'",
        "6": "'_top'"
      }
    }
  },
  {
    "name": "to",
    "global": false,
    "description": "Route Location the link should navigate to when clicked on.",
    "tags": [],
    "required": false,
    "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
    "schema": {
      "kind": "enum",
      "type": "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined",
      "schema": {
        "0": "undefined",
        "1": "string",
        "2": {
          "kind": "object",
          "type": "RouteLocationAsRelativeGeneric",
          "schema": {
            "name": {
              "name": "name",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "RouteRecordNameGeneric",
              "schema": {
                "kind": "enum",
                "type": "RouteRecordNameGeneric",
                "schema": {
                  "0": "undefined",
                  "1": "string",
                  "2": "symbol"
                }
              }
            },
            "params": {
              "name": "params",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "RouteParamsRawGeneric | undefined",
              "schema": {
                "kind": "enum",
                "type": "RouteParamsRawGeneric | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "RouteParamsRawGeneric"
                }
              }
            },
            "path": {
              "name": "path",
              "global": false,
              "description": "A relative path to the current location. This property should be removed",
              "tags": [],
              "required": false,
              "type": "undefined",
              "schema": "undefined"
            },
            "query": {
              "name": "query",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "LocationQueryRaw | undefined",
              "schema": {
                "kind": "enum",
                "type": "LocationQueryRaw | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "LocationQueryRaw"
                }
              }
            },
            "hash": {
              "name": "hash",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": {
                "kind": "enum",
                "type": "string | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "string"
                }
              }
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Replace the entry in the history instead of pushing a new entry",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": {
                "kind": "enum",
                "type": "boolean | undefined",
                "schema": {
                  "0": "undefined",
                  "1": "false",
                  "2": "true"
                }
              }
            },
            "force": {
              "name": "force",
              "global": false,
              "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "state": {
              "name": "state",
              "global": false,
              "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
              "tags": [],
              "required": false,
              "type": "HistoryState | undefined",
              "schema": {
                "kind": "enum",
                "type": "HistoryState | undefined",
                "schema": {
                  "0": "undefined",
                  "1": {
                    "kind": "object",
                    "type": "HistoryState",
                    "schema": {}
                  }
                }
              }
            }
          }
        },
        "3": {
          "kind": "object",
          "type": "RouteLocationAsPathGeneric",
          "schema": {
            "path": {
              "name": "path",
              "global": false,
              "description": "Percentage encoded pathname section of the URL.",
              "tags": [],
              "required": true,
              "type": "string",
              "schema": "string"
            },
            "query": {
              "name": "query",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "LocationQueryRaw | undefined",
              "schema": "LocationQueryRaw | undefined"
            },
            "hash": {
              "name": "hash",
              "global": false,
              "description": "",
              "tags": [],
              "required": false,
              "type": "string | undefined",
              "schema": "string | undefined"
            },
            "replace": {
              "name": "replace",
              "global": false,
              "description": "Replace the entry in the history instead of pushing a new entry",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "force": {
              "name": "force",
              "global": false,
              "description": "Triggers the navigation even if the location is the same as the current one.\r\nNote this will also add a new entry to the history unless `replace: true`\r\nis passed.",
              "tags": [],
              "required": false,
              "type": "boolean | undefined",
              "schema": "boolean | undefined"
            },
            "state": {
              "name": "state",
              "global": false,
              "description": "State to save using the History API. This cannot contain any reactive\r\nvalues and some primitives like Symbols are forbidden. More info at\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
              "tags": [],
              "required": false,
              "type": "HistoryState | undefined",
              "schema": "HistoryState | undefined"
            }
          }
        }
      }
    }
  },
  {
    "name": "type",
    "global": false,
    "description": "The type of the button when not a link.",
    "tags": [
      {
        "name": "defaultValue",
        "text": "'button'"
      }
    ],
    "required": false,
    "type": "'button' | 'reset' | 'submit' | undefined",
    "schema": {
      "kind": "enum",
      "type": "'button' | 'reset' | 'submit' | undefined",
      "schema": {
        "0": "undefined",
        "1": "'button'",
        "2": "'reset'",
        "3": "'submit'"
      }
    },
    "default": "'button'"
  },
  {
    "name": "viewTransition",
    "global": false,
    "description": "Pass the returned promise of `router.push()` to `document.startViewTransition()` if supported.",
    "tags": [],
    "required": false,
    "type": "boolean | undefined",
    "schema": {
      "kind": "enum",
      "type": "boolean | undefined",
      "schema": {
        "0": "undefined",
        "1": "false",
        "2": "true"
      }
    }
  }
],
  "slots": [
  {
    "name": "active",
    "description": "",
    "type": "boolean"
  }
]
}
